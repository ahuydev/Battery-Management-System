
BMS_SW_Ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000635c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd8  08006470  08006470  00007470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007448  08007448  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  08007448  08007448  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007448  08007448  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007448  08007448  00008448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800744c  0800744c  0000844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007450  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  2000006c  080074bc  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  080074bc  00009850  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c609  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ea  00000000  00000000  0001569e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00017a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d3  00000000  00000000  00018620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e9b  00000000  00000000  00018ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea00  00000000  00000000  0003dd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ec6  00000000  00000000  0004c78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122654  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d0  00000000  00000000  00122698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00126068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006454 	.word	0x08006454

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08006454 	.word	0x08006454

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <sendNops>:
 * Description   : This function sends NOP commands to all CIDs.
 *
 *END**************************************************************************/

void sendNops()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
    uint8_t cid;

    for (cid = 1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 8000a92:	2301      	movs	r3, #1
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	e007      	b.n	8000aa8 <sendNops+0x1c>
    {
        BCC_SendNop(&g_bccData.drvConfig, cid);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	@ (8000abc <sendNops+0x30>)
 8000a9e:	f002 fdd9 	bl	8003654 <BCC_SendNop>
    for (cid = 1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <sendNops+0x30>)
 8000aaa:	789b      	ldrb	r3, [r3, #2]
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d9f2      	bls.n	8000a98 <sendNops+0xc>
    }
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000128 	.word	0x20000128

08000ac0 <printInitialSettings>:
 * Description   : This function prints content of registers configured in
 *                 initialization phase to serial console output.
 *
 *END**************************************************************************/
bcc_status_t printInitialSettings(uint8_t cid)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b08b      	sub	sp, #44	@ 0x2c
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
    uint16_t regVal;
    uint8_t i;
    static char* printPattern = "  | %-18s | 0x%02X%02X |\r\n";
    bcc_status_t error;

    printf("###############################################\r\n");
 8000aca:	4887      	ldr	r0, [pc, #540]	@ (8000ce8 <printInitialSettings+0x228>)
 8000acc:	f004 fc32 	bl	8005334 <puts>
    printf("# CID %d (MC3377%sC): Initial value of registers\r\n", cid,
 8000ad0:	79f9      	ldrb	r1, [r7, #7]
            (g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C) ?
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	4a85      	ldr	r2, [pc, #532]	@ (8000cec <printInitialSettings+0x22c>)
 8000ad8:	4413      	add	r3, r2
 8000ada:	78db      	ldrb	r3, [r3, #3]
    printf("# CID %d (MC3377%sC): Initial value of registers\r\n", cid,
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <printInitialSettings+0x24>
 8000ae0:	4b83      	ldr	r3, [pc, #524]	@ (8000cf0 <printInitialSettings+0x230>)
 8000ae2:	e000      	b.n	8000ae6 <printInitialSettings+0x26>
 8000ae4:	4b83      	ldr	r3, [pc, #524]	@ (8000cf4 <printInitialSettings+0x234>)
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4883      	ldr	r0, [pc, #524]	@ (8000cf8 <printInitialSettings+0x238>)
 8000aea:	f004 fbbb 	bl	8005264 <iprintf>
                    "1" : "2");
    printf("###############################################\r\n\r\n");
 8000aee:	4883      	ldr	r0, [pc, #524]	@ (8000cfc <printInitialSettings+0x23c>)
 8000af0:	f004 fc20 	bl	8005334 <puts>

    printf("  -------------------------------\r\n");
 8000af4:	4882      	ldr	r0, [pc, #520]	@ (8000d00 <printInitialSettings+0x240>)
 8000af6:	f004 fc1d 	bl	8005334 <puts>
    printf("  | Register           | Value  |\r\n");
 8000afa:	4882      	ldr	r0, [pc, #520]	@ (8000d04 <printInitialSettings+0x244>)
 8000afc:	f004 fc1a 	bl	8005334 <puts>
    printf("  -------------------------------\r\n");
 8000b00:	487f      	ldr	r0, [pc, #508]	@ (8000d00 <printInitialSettings+0x240>)
 8000b02:	f004 fc17 	bl	8005334 <puts>

    error = BCC_Reg_Read(&g_bccData.drvConfig, cid, MC33771C_INIT_OFFSET, 1U, &regVal);
 8000b06:	79f9      	ldrb	r1, [r7, #7]
 8000b08:	f107 030e 	add.w	r3, r7, #14
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	2201      	movs	r2, #1
 8000b12:	4876      	ldr	r0, [pc, #472]	@ (8000cec <printInitialSettings+0x22c>)
 8000b14:	f002 fe0f 	bl	8003736 <BCC_Reg_Read>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	77bb      	strb	r3, [r7, #30]
    if (error != BCC_STATUS_SUCCESS)
 8000b1c:	7fbb      	ldrb	r3, [r7, #30]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <printInitialSettings+0x66>
    {
        return error;
 8000b22:	7fbb      	ldrb	r3, [r7, #30]
 8000b24:	e0dc      	b.n	8000ce0 <printInitialSettings+0x220>
    }

    printf(printPattern, "INIT", regVal >> 8, regVal & 0xFFU);
 8000b26:	4b78      	ldr	r3, [pc, #480]	@ (8000d08 <printInitialSettings+0x248>)
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	461a      	mov	r2, r3
 8000b32:	89fb      	ldrh	r3, [r7, #14]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4975      	ldr	r1, [pc, #468]	@ (8000d0c <printInitialSettings+0x24c>)
 8000b38:	f004 fb94 	bl	8005264 <iprintf>

    if (g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	4a6a      	ldr	r2, [pc, #424]	@ (8000cec <printInitialSettings+0x22c>)
 8000b42:	4413      	add	r3, r2
 8000b44:	78db      	ldrb	r3, [r3, #3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d12b      	bne.n	8000ba2 <printInitialSettings+0xe2>
    {
        for (i = 0U; i < MC33771C_REG_CONF_CNT; i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	77fb      	strb	r3, [r7, #31]
 8000b4e:	e024      	b.n	8000b9a <printInitialSettings+0xda>
        {
            error = BCC_Reg_Read(&g_bccData.drvConfig, cid,
 8000b50:	7ffb      	ldrb	r3, [r7, #31]
                    s_confRegsMc33771c[i].address, 1U, &regVal);
 8000b52:	4a6f      	ldr	r2, [pc, #444]	@ (8000d10 <printInitialSettings+0x250>)
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	791a      	ldrb	r2, [r3, #4]
            error = BCC_Reg_Read(&g_bccData.drvConfig, cid,
 8000b5a:	79f9      	ldrb	r1, [r7, #7]
 8000b5c:	f107 030e 	add.w	r3, r7, #14
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2301      	movs	r3, #1
 8000b64:	4861      	ldr	r0, [pc, #388]	@ (8000cec <printInitialSettings+0x22c>)
 8000b66:	f002 fde6 	bl	8003736 <BCC_Reg_Read>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	77bb      	strb	r3, [r7, #30]
            if (error != BCC_STATUS_SUCCESS)
 8000b6e:	7fbb      	ldrb	r3, [r7, #30]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <printInitialSettings+0xb8>
            {
                return error;
 8000b74:	7fbb      	ldrb	r3, [r7, #30]
 8000b76:	e0b3      	b.n	8000ce0 <printInitialSettings+0x220>
            }
            printf(printPattern, s_confRegsMc33771c[i].name,
 8000b78:	4b63      	ldr	r3, [pc, #396]	@ (8000d08 <printInitialSettings+0x248>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	7ffb      	ldrb	r3, [r7, #31]
 8000b7e:	4a64      	ldr	r2, [pc, #400]	@ (8000d10 <printInitialSettings+0x250>)
 8000b80:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f004 fb68 	bl	8005264 <iprintf>
        for (i = 0U; i < MC33771C_REG_CONF_CNT; i++)
 8000b94:	7ffb      	ldrb	r3, [r7, #31]
 8000b96:	3301      	adds	r3, #1
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	7ffb      	ldrb	r3, [r7, #31]
 8000b9c:	2b3c      	cmp	r3, #60	@ 0x3c
 8000b9e:	d9d7      	bls.n	8000b50 <printInitialSettings+0x90>
 8000ba0:	e02a      	b.n	8000bf8 <printInitialSettings+0x138>
                    regVal >> 8, regVal & 0xFFU);
        }
    }
    else
    {
        for (i = 0U; i < MC33772C_REG_CONF_CNT; i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	77fb      	strb	r3, [r7, #31]
 8000ba6:	e024      	b.n	8000bf2 <printInitialSettings+0x132>
        {
            error = BCC_Reg_Read(&g_bccData.drvConfig, cid,
 8000ba8:	7ffb      	ldrb	r3, [r7, #31]
                    s_confRegsMc33772c[i].address, 1U, &regVal);
 8000baa:	4a5a      	ldr	r2, [pc, #360]	@ (8000d14 <printInitialSettings+0x254>)
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	4413      	add	r3, r2
 8000bb0:	791a      	ldrb	r2, [r3, #4]
            error = BCC_Reg_Read(&g_bccData.drvConfig, cid,
 8000bb2:	79f9      	ldrb	r1, [r7, #7]
 8000bb4:	f107 030e 	add.w	r3, r7, #14
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	484b      	ldr	r0, [pc, #300]	@ (8000cec <printInitialSettings+0x22c>)
 8000bbe:	f002 fdba 	bl	8003736 <BCC_Reg_Read>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	77bb      	strb	r3, [r7, #30]
            if (error != BCC_STATUS_SUCCESS)
 8000bc6:	7fbb      	ldrb	r3, [r7, #30]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <printInitialSettings+0x110>
            {
                return error;
 8000bcc:	7fbb      	ldrb	r3, [r7, #30]
 8000bce:	e087      	b.n	8000ce0 <printInitialSettings+0x220>
            }
            printf(printPattern, s_confRegsMc33772c[i].name,
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000d08 <printInitialSettings+0x248>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	7ffb      	ldrb	r3, [r7, #31]
 8000bd6:	4a4f      	ldr	r2, [pc, #316]	@ (8000d14 <printInitialSettings+0x254>)
 8000bd8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000bdc:	89fb      	ldrh	r3, [r7, #14]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f004 fb3c 	bl	8005264 <iprintf>
        for (i = 0U; i < MC33772C_REG_CONF_CNT; i++)
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	77fb      	strb	r3, [r7, #31]
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	2b2c      	cmp	r3, #44	@ 0x2c
 8000bf6:	d9d7      	bls.n	8000ba8 <printInitialSettings+0xe8>
                    regVal >> 8, regVal & 0xFFU);
        }
    }

    printf("  -------------------------------\r\n");
 8000bf8:	4841      	ldr	r0, [pc, #260]	@ (8000d00 <printInitialSettings+0x240>)
 8000bfa:	f004 fb9b 	bl	8005334 <puts>
    printf("\r\n");
 8000bfe:	4846      	ldr	r0, [pc, #280]	@ (8000d18 <printInitialSettings+0x258>)
 8000c00:	f004 fb98 	bl	8005334 <puts>

    printf("  ------------------------\r\n");
 8000c04:	4845      	ldr	r0, [pc, #276]	@ (8000d1c <printInitialSettings+0x25c>)
 8000c06:	f004 fb95 	bl	8005334 <puts>
    printf("  | Fuse Mirror | Value  |\r\n");
 8000c0a:	4845      	ldr	r0, [pc, #276]	@ (8000d20 <printInitialSettings+0x260>)
 8000c0c:	f004 fb92 	bl	8005334 <puts>
    printf("  |  Register   |        |\r\n");
 8000c10:	4844      	ldr	r0, [pc, #272]	@ (8000d24 <printInitialSettings+0x264>)
 8000c12:	f004 fb8f 	bl	8005334 <puts>
    printf("  ------------------------\r\n");
 8000c16:	4841      	ldr	r0, [pc, #260]	@ (8000d1c <printInitialSettings+0x25c>)
 8000c18:	f004 fb8c 	bl	8005334 <puts>
    for (i = 0U; i <= ((g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C) ?
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	77fb      	strb	r3, [r7, #31]
 8000c20:	e01a      	b.n	8000c58 <printInitialSettings+0x198>
            MC33771C_LAST_FUSE_ADDR : MC33772C_LAST_FUSE_ADDR); i++)
    {
        error = BCC_FuseMirror_Read(&g_bccData.drvConfig, cid, i, &regVal);
 8000c22:	f107 030e 	add.w	r3, r7, #14
 8000c26:	7ffa      	ldrb	r2, [r7, #31]
 8000c28:	79f9      	ldrb	r1, [r7, #7]
 8000c2a:	4830      	ldr	r0, [pc, #192]	@ (8000cec <printInitialSettings+0x22c>)
 8000c2c:	f003 f8ce 	bl	8003dcc <BCC_FuseMirror_Read>
 8000c30:	4603      	mov	r3, r0
 8000c32:	77bb      	strb	r3, [r7, #30]
        if (error != BCC_STATUS_SUCCESS)
 8000c34:	7fbb      	ldrb	r3, [r7, #30]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <printInitialSettings+0x17e>
        {
            return error;
 8000c3a:	7fbb      	ldrb	r3, [r7, #30]
 8000c3c:	e050      	b.n	8000ce0 <printInitialSettings+0x220>
        }

        printf("  | $%02X         | 0x%02X%02X |\r\n", i, regVal >> 8, regVal & 0xFFU);
 8000c3e:	7ff9      	ldrb	r1, [r7, #31]
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	89fb      	ldrh	r3, [r7, #14]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4836      	ldr	r0, [pc, #216]	@ (8000d28 <printInitialSettings+0x268>)
 8000c4e:	f004 fb09 	bl	8005264 <iprintf>
            MC33771C_LAST_FUSE_ADDR : MC33772C_LAST_FUSE_ADDR); i++)
 8000c52:	7ffb      	ldrb	r3, [r7, #31]
 8000c54:	3301      	adds	r3, #1
 8000c56:	77fb      	strb	r3, [r7, #31]
    for (i = 0U; i <= ((g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C) ?
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	4923      	ldr	r1, [pc, #140]	@ (8000cec <printInitialSettings+0x22c>)
 8000c60:	440a      	add	r2, r1
 8000c62:	78d2      	ldrb	r2, [r2, #3]
            MC33771C_LAST_FUSE_ADDR : MC33772C_LAST_FUSE_ADDR); i++)
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d101      	bne.n	8000c6c <printInitialSettings+0x1ac>
 8000c68:	221a      	movs	r2, #26
 8000c6a:	e000      	b.n	8000c6e <printInitialSettings+0x1ae>
 8000c6c:	2212      	movs	r2, #18
    for (i = 0U; i <= ((g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C) ?
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d2d7      	bcs.n	8000c22 <printInitialSettings+0x162>
    }
    printf("  ------------------------\r\n");
 8000c72:	482a      	ldr	r0, [pc, #168]	@ (8000d1c <printInitialSettings+0x25c>)
 8000c74:	f004 fb5e 	bl	8005334 <puts>
    printf("\r\n");
 8000c78:	4827      	ldr	r0, [pc, #156]	@ (8000d18 <printInitialSettings+0x258>)
 8000c7a:	f004 fb5b 	bl	8005334 <puts>

    error = BCC_GUID_Read(&g_bccData.drvConfig, cid, &guid);
 8000c7e:	f107 0210 	add.w	r2, r7, #16
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4819      	ldr	r0, [pc, #100]	@ (8000cec <printInitialSettings+0x22c>)
 8000c88:	f003 f8e2 	bl	8003e50 <BCC_GUID_Read>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	77bb      	strb	r3, [r7, #30]
    if (error != BCC_STATUS_SUCCESS)
 8000c90:	7fbb      	ldrb	r3, [r7, #30]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <printInitialSettings+0x1da>
    {
        return error;
 8000c96:	7fbb      	ldrb	r3, [r7, #30]
 8000c98:	e022      	b.n	8000ce0 <printInitialSettings+0x220>
    }

    printf("  Device GUID: %02X%04X%04X\r\n",
            (uint16_t)((guid >> 32) & 0x001FU),
 8000c9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	2300      	movs	r3, #0
 8000caa:	b293      	uxth	r3, r2
    printf("  Device GUID: %02X%04X%04X\r\n",
 8000cac:	f003 041f 	and.w	r4, r3, #31
            (uint16_t)((guid >> 16) & 0xFFFFU),
 8000cb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	0c02      	lsrs	r2, r0, #16
 8000cbe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc2:	0c0b      	lsrs	r3, r1, #16
 8000cc4:	b293      	uxth	r3, r2
    printf("  Device GUID: %02X%04X%04X\r\n",
 8000cc6:	4619      	mov	r1, r3
            (uint16_t)(guid & 0xFFFFU));
 8000cc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ccc:	b293      	uxth	r3, r2
    printf("  Device GUID: %02X%04X%04X\r\n",
 8000cce:	460a      	mov	r2, r1
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	4816      	ldr	r0, [pc, #88]	@ (8000d2c <printInitialSettings+0x26c>)
 8000cd4:	f004 fac6 	bl	8005264 <iprintf>
    printf("\r\n");
 8000cd8:	480f      	ldr	r0, [pc, #60]	@ (8000d18 <printInitialSettings+0x258>)
 8000cda:	f004 fb2b 	bl	8005334 <puts>

    return BCC_STATUS_SUCCESS;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3724      	adds	r7, #36	@ 0x24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	08006710 	.word	0x08006710
 8000cec:	20000128 	.word	0x20000128
 8000cf0:	08006744 	.word	0x08006744
 8000cf4:	08006748 	.word	0x08006748
 8000cf8:	0800674c 	.word	0x0800674c
 8000cfc:	08006780 	.word	0x08006780
 8000d00:	080067b4 	.word	0x080067b4
 8000d04:	080067d8 	.word	0x080067d8
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	080067fc 	.word	0x080067fc
 8000d10:	08006e30 	.word	0x08006e30
 8000d14:	08007018 	.word	0x08007018
 8000d18:	08006804 	.word	0x08006804
 8000d1c:	08006808 	.word	0x08006808
 8000d20:	08006824 	.word	0x08006824
 8000d24:	08006840 	.word	0x08006840
 8000d28:	0800685c 	.word	0x0800685c
 8000d2c:	08006880 	.word	0x08006880

08000d30 <printFaultRegisters>:



bcc_status_t printFaultRegisters(uint8_t cid)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	uint16_t status[BCC_STAT_CNT]; /* Status registers. */
	    bcc_status_t error;

	    printf("###############################################\r\n");
 8000d3a:	486f      	ldr	r0, [pc, #444]	@ (8000ef8 <printFaultRegisters+0x1c8>)
 8000d3c:	f004 fafa 	bl	8005334 <puts>
	    printf("# CID %d (MC3377%sC): Device status\r\n", cid,
 8000d40:	79f9      	ldrb	r1, [r7, #7]
	            (g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C) ?
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a6d      	ldr	r2, [pc, #436]	@ (8000efc <printFaultRegisters+0x1cc>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	78db      	ldrb	r3, [r3, #3]
	    printf("# CID %d (MC3377%sC): Device status\r\n", cid,
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <printFaultRegisters+0x24>
 8000d50:	4b6b      	ldr	r3, [pc, #428]	@ (8000f00 <printFaultRegisters+0x1d0>)
 8000d52:	e000      	b.n	8000d56 <printFaultRegisters+0x26>
 8000d54:	4b6b      	ldr	r3, [pc, #428]	@ (8000f04 <printFaultRegisters+0x1d4>)
 8000d56:	461a      	mov	r2, r3
 8000d58:	486b      	ldr	r0, [pc, #428]	@ (8000f08 <printFaultRegisters+0x1d8>)
 8000d5a:	f004 fa83 	bl	8005264 <iprintf>
	                    "1" : "2");
	    printf("###############################################\r\n\r\n");
 8000d5e:	486b      	ldr	r0, [pc, #428]	@ (8000f0c <printFaultRegisters+0x1dc>)
 8000d60:	f004 fae8 	bl	8005334 <puts>

	    error = BCC_Fault_GetStatus(&g_bccData.drvConfig, cid, status);
 8000d64:	f107 0208 	add.w	r2, r7, #8
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4863      	ldr	r0, [pc, #396]	@ (8000efc <printFaultRegisters+0x1cc>)
 8000d6e:	f002 ffaf 	bl	8003cd0 <BCC_Fault_GetStatus>
 8000d72:	4603      	mov	r3, r0
 8000d74:	77fb      	strb	r3, [r7, #31]
	    if (error != BCC_STATUS_SUCCESS)
 8000d76:	7ffb      	ldrb	r3, [r7, #31]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <printFaultRegisters+0x50>
	    {
	        return error;
 8000d7c:	7ffb      	ldrb	r3, [r7, #31]
 8000d7e:	e0b7      	b.n	8000ef0 <printFaultRegisters+0x1c0>
	    }

	    printf("  ----------------------------------------------------\r\n");
 8000d80:	4863      	ldr	r0, [pc, #396]	@ (8000f10 <printFaultRegisters+0x1e0>)
 8000d82:	f004 fad7 	bl	8005334 <puts>
	    printf("  | Status\t| Raw Value\t| An event occurred? |\r\n");
 8000d86:	4863      	ldr	r0, [pc, #396]	@ (8000f14 <printFaultRegisters+0x1e4>)
 8000d88:	f004 fad4 	bl	8005334 <puts>
	    printf("  ----------------------------------------------------\r\n");
 8000d8c:	4860      	ldr	r0, [pc, #384]	@ (8000f10 <printFaultRegisters+0x1e0>)
 8000d8e:	f004 fad1 	bl	8005334 <puts>

	    PRINT_STATUS_REG_COMP("CELL_OV", status[BCC_FS_CELL_OV],
 8000d92:	893b      	ldrh	r3, [r7, #8]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	893b      	ldrh	r3, [r7, #8]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	893b      	ldrh	r3, [r7, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <printFaultRegisters+0x78>
 8000da4:	4b5c      	ldr	r3, [pc, #368]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000da6:	e000      	b.n	8000daa <printFaultRegisters+0x7a>
 8000da8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	460a      	mov	r2, r1
 8000db0:	495b      	ldr	r1, [pc, #364]	@ (8000f20 <printFaultRegisters+0x1f0>)
 8000db2:	485c      	ldr	r0, [pc, #368]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000db4:	f004 fa56 	bl	8005264 <iprintf>
	            BCC_CELL_OV_FLT_NOEVENT);
	    PRINT_STATUS_REG_COMP("CELL_UV", status[BCC_FS_CELL_UV],
 8000db8:	897b      	ldrh	r3, [r7, #10]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	897b      	ldrh	r3, [r7, #10]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	897b      	ldrh	r3, [r7, #10]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <printFaultRegisters+0x9e>
 8000dca:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000dcc:	e000      	b.n	8000dd0 <printFaultRegisters+0xa0>
 8000dce:	4b53      	ldr	r3, [pc, #332]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	4954      	ldr	r1, [pc, #336]	@ (8000f28 <printFaultRegisters+0x1f8>)
 8000dd8:	4852      	ldr	r0, [pc, #328]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000dda:	f004 fa43 	bl	8005264 <iprintf>
	            BCC_CELL_UV_FLT_NOEVENT);
	    PRINT_STATUS_REG_COMP("CB_OPEN", status[BCC_FS_CB_OPEN],
 8000dde:	89bb      	ldrh	r3, [r7, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	89bb      	ldrh	r3, [r7, #12]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	89bb      	ldrh	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <printFaultRegisters+0xc4>
 8000df0:	4b49      	ldr	r3, [pc, #292]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000df2:	e000      	b.n	8000df6 <printFaultRegisters+0xc6>
 8000df4:	4b49      	ldr	r3, [pc, #292]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	494b      	ldr	r1, [pc, #300]	@ (8000f2c <printFaultRegisters+0x1fc>)
 8000dfe:	4849      	ldr	r0, [pc, #292]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000e00:	f004 fa30 	bl	8005264 <iprintf>
	            BCC_CB_OPEN_FLT_NOEVENT);
	    PRINT_STATUS_REG_COMP("CB_SHORT", status[BCC_FS_CB_SHORT],
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <printFaultRegisters+0xea>
 8000e16:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000e18:	e000      	b.n	8000e1c <printFaultRegisters+0xec>
 8000e1a:	4b40      	ldr	r3, [pc, #256]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	460a      	mov	r2, r1
 8000e22:	4943      	ldr	r1, [pc, #268]	@ (8000f30 <printFaultRegisters+0x200>)
 8000e24:	483f      	ldr	r0, [pc, #252]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000e26:	f004 fa1d 	bl	8005264 <iprintf>
	            BCC_CB_SHORT_FLT_NOEVENT);
	    PRINT_STATUS_REG_COMP("AN_OT_UT", status[BCC_FS_AN_OT_UT],
 8000e2a:	8a7b      	ldrh	r3, [r7, #18]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4619      	mov	r1, r3
 8000e32:	8a7b      	ldrh	r3, [r7, #18]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	8a7b      	ldrh	r3, [r7, #18]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <printFaultRegisters+0x110>
 8000e3c:	4b36      	ldr	r3, [pc, #216]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000e3e:	e000      	b.n	8000e42 <printFaultRegisters+0x112>
 8000e40:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	460a      	mov	r2, r1
 8000e48:	493a      	ldr	r1, [pc, #232]	@ (8000f34 <printFaultRegisters+0x204>)
 8000e4a:	4836      	ldr	r0, [pc, #216]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000e4c:	f004 fa0a 	bl	8005264 <iprintf>
	            BCC_AN_OT_UT_FLT_NOEVENT);
	    PRINT_STATUS_REG_COMP("GPIO_SHORT", status[BCC_FS_GPIO_SHORT],
 8000e50:	8abb      	ldrh	r3, [r7, #20]
 8000e52:	0a1b      	lsrs	r3, r3, #8
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	8abb      	ldrh	r3, [r7, #20]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	8abb      	ldrh	r3, [r7, #20]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <printFaultRegisters+0x136>
 8000e62:	4b2d      	ldr	r3, [pc, #180]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000e64:	e000      	b.n	8000e68 <printFaultRegisters+0x138>
 8000e66:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	4932      	ldr	r1, [pc, #200]	@ (8000f38 <printFaultRegisters+0x208>)
 8000e70:	482c      	ldr	r0, [pc, #176]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000e72:	f004 f9f7 	bl	8005264 <iprintf>
	            BCC_GPIO_SHORT_NOEVENT);
	    PRINT_STATUS_REG_COMP("FAULT1", status[BCC_FS_FAULT1],
 8000e76:	8b3b      	ldrh	r3, [r7, #24]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	8b3b      	ldrh	r3, [r7, #24]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	8b3b      	ldrh	r3, [r7, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <printFaultRegisters+0x15c>
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000e8a:	e000      	b.n	8000e8e <printFaultRegisters+0x15e>
 8000e8c:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4613      	mov	r3, r2
 8000e92:	460a      	mov	r2, r1
 8000e94:	4929      	ldr	r1, [pc, #164]	@ (8000f3c <printFaultRegisters+0x20c>)
 8000e96:	4823      	ldr	r0, [pc, #140]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000e98:	f004 f9e4 	bl	8005264 <iprintf>
	            BCC_FAULT1_STATUS_NOEVENT);
	    PRINT_STATUS_REG_COMP("FAULT2", status[BCC_FS_FAULT2],
 8000e9c:	8b7b      	ldrh	r3, [r7, #26]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	8b7b      	ldrh	r3, [r7, #26]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	8b7b      	ldrh	r3, [r7, #26]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <printFaultRegisters+0x182>
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000eb0:	e000      	b.n	8000eb4 <printFaultRegisters+0x184>
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	460a      	mov	r2, r1
 8000eba:	4921      	ldr	r1, [pc, #132]	@ (8000f40 <printFaultRegisters+0x210>)
 8000ebc:	4819      	ldr	r0, [pc, #100]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000ebe:	f004 f9d1 	bl	8005264 <iprintf>
	            BCC_FAULT2_STATUS_NOEVENT);
	    PRINT_STATUS_REG_COMP("FAULT3", status[BCC_FS_FAULT3],
 8000ec2:	8bbb      	ldrh	r3, [r7, #28]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	8bbb      	ldrh	r3, [r7, #28]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	8bbb      	ldrh	r3, [r7, #28]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <printFaultRegisters+0x1a8>
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <printFaultRegisters+0x1e8>)
 8000ed6:	e000      	b.n	8000eda <printFaultRegisters+0x1aa>
 8000ed8:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <printFaultRegisters+0x1ec>)
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4613      	mov	r3, r2
 8000ede:	460a      	mov	r2, r1
 8000ee0:	4918      	ldr	r1, [pc, #96]	@ (8000f44 <printFaultRegisters+0x214>)
 8000ee2:	4810      	ldr	r0, [pc, #64]	@ (8000f24 <printFaultRegisters+0x1f4>)
 8000ee4:	f004 f9be 	bl	8005264 <iprintf>
//	    PRINT_STATUS_REG("GPIO_STS", status[BCC_FS_GPIO_STATUS], "-");
//
//	    /* Note: COM_STATUS is not a fault register. */
//	    PRINT_STATUS_REG("COM_STATUS", status[BCC_FS_COMM], "-");

	    printf("  ----------------------------------------------------\r\n\r\n");
 8000ee8:	4817      	ldr	r0, [pc, #92]	@ (8000f48 <printFaultRegisters+0x218>)
 8000eea:	f004 fa23 	bl	8005334 <puts>
	    * [CT_OV_FLT] bit.
	    * - The fault bits in the CELL_UV register are ORed to the FAULT1_STATUS
	    * [CT_UV_FLT] bit.
	    */

	    return BCC_STATUS_SUCCESS;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08006710 	.word	0x08006710
 8000efc:	20000128 	.word	0x20000128
 8000f00:	08006744 	.word	0x08006744
 8000f04:	08006748 	.word	0x08006748
 8000f08:	080068a0 	.word	0x080068a0
 8000f0c:	08006780 	.word	0x08006780
 8000f10:	080068c8 	.word	0x080068c8
 8000f14:	08006900 	.word	0x08006900
 8000f18:	08006930 	.word	0x08006930
 8000f1c:	08006934 	.word	0x08006934
 8000f20:	08006938 	.word	0x08006938
 8000f24:	08006940 	.word	0x08006940
 8000f28:	08006964 	.word	0x08006964
 8000f2c:	0800696c 	.word	0x0800696c
 8000f30:	08006974 	.word	0x08006974
 8000f34:	08006980 	.word	0x08006980
 8000f38:	0800698c 	.word	0x0800698c
 8000f3c:	08006998 	.word	0x08006998
 8000f40:	080069a0 	.word	0x080069a0
 8000f44:	080069a8 	.word	0x080069a8
 8000f48:	080069b0 	.word	0x080069b0

08000f4c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *data, int len) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)data, len, 1000);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <_write+0x28>)
 8000f64:	f001 ffd5 	bl	8002f12 <HAL_UART_Transmit>
    return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000e0 	.word	0x200000e0

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fd7b 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f855 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 f8ef 	bl	8001168 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f8a:	f000 f88d 	bl	80010a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f8e:	f000 f8c1 	bl	8001114 <MX_USART1_UART_Init>

  //  startDischarge_Charge();

    bcc_status_t bccError;

    initDemo(&bccError);
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fb3f 	bl	8001618 <initDemo>

        if (bccError != BCC_STATUS_SUCCESS)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00b      	beq.n	8000fb8 <main+0x40>
        {
            printf("An error occurred during BCC initialization: (0x%04x)\r\n", bccError);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4819      	ldr	r0, [pc, #100]	@ (800100c <main+0x94>)
 8000fa6:	f004 f95d 	bl	8005264 <iprintf>
            HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin,0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fb0:	4817      	ldr	r0, [pc, #92]	@ (8001010 <main+0x98>)
 8000fb2:	f001 f84f 	bl	8002054 <HAL_GPIO_WritePin>
 8000fb6:	e025      	b.n	8001004 <main+0x8c>
        }
        else
        {
            printf("------------- BEGIN ---------------\r\n");
 8000fb8:	4816      	ldr	r0, [pc, #88]	@ (8001014 <main+0x9c>)
 8000fba:	f004 f9bb 	bl	8005334 <puts>
            printf("Success\n");
 8000fbe:	4816      	ldr	r0, [pc, #88]	@ (8001018 <main+0xa0>)
 8000fc0:	f004 f9b8 	bl	8005334 <puts>
            if ((bccError = startApp()) != BCC_STATUS_SUCCESS)
 8000fc4:	f000 fb70 	bl	80016a8 <startApp>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d004      	beq.n	8000fdc <main+0x64>
            {
                printf("An error occurred (0x%04x)\r\n)", bccError);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4811      	ldr	r0, [pc, #68]	@ (800101c <main+0xa4>)
 8000fd8:	f004 f944 	bl	8005264 <iprintf>

            }

            bccError = BCC_Sleep(&g_bccData.drvConfig);
 8000fdc:	4810      	ldr	r0, [pc, #64]	@ (8001020 <main+0xa8>)
 8000fde:	f002 fb54 	bl	800368a <BCC_Sleep>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
            if (bccError != BCC_STATUS_SUCCESS)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <main+0x80>
            {
                printf("SLEEP (0x%04x)\r\n)", bccError);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <main+0xac>)
 8000ff2:	f004 f937 	bl	8005264 <iprintf>
 8000ff6:	e002      	b.n	8000ffe <main+0x86>

            }else{
          	  printf("SLEEPINGGGGG)");
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <main+0xb0>)
 8000ffa:	f004 f933 	bl	8005264 <iprintf>
            }

            printf("-------------- END ----------------\r\n");
 8000ffe:	480b      	ldr	r0, [pc, #44]	@ (800102c <main+0xb4>)
 8001000:	f004 f998 	bl	8005334 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MeasuarenceApp();
 8001004:	f000 f930 	bl	8001268 <MeasuarenceApp>
 8001008:	e7fc      	b.n	8001004 <main+0x8c>
 800100a:	bf00      	nop
 800100c:	08006a08 	.word	0x08006a08
 8001010:	40011000 	.word	0x40011000
 8001014:	08006a40 	.word	0x08006a40
 8001018:	08006a68 	.word	0x08006a68
 800101c:	08006a70 	.word	0x08006a70
 8001020:	20000128 	.word	0x20000128
 8001024:	08006a90 	.word	0x08006a90
 8001028:	08006aa4 	.word	0x08006aa4
 800102c:	08006ab4 	.word	0x08006ab4

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	@ 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fa58 	bl	80054f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001056:	2301      	movs	r3, #1
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105a:	2310      	movs	r3, #16
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800105e:	2300      	movs	r3, #0
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	4618      	mov	r0, r3
 8001068:	f001 f80c 	bl	8002084 <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001072:	f000 fb57 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fa7a 	bl	8002588 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800109a:	f000 fb43 	bl	8001724 <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3740      	adds	r7, #64	@ 0x40
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <MX_SPI1_Init+0x64>)
 80010ae:	4a18      	ldr	r2, [pc, #96]	@ (8001110 <MX_SPI1_Init+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010b2:	4b16      	ldr	r3, [pc, #88]	@ (800110c <MX_SPI1_Init+0x64>)
 80010b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_SPI1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_SPI1_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_SPI1_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_SPI1_Init+0x64>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_SPI1_Init+0x64>)
 80010d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_SPI1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <MX_SPI1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_SPI1_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <MX_SPI1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_SPI1_Init+0x64>)
 80010f4:	220a      	movs	r2, #10
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_SPI1_Init+0x64>)
 80010fa:	f001 fbd3 	bl	80028a4 <HAL_SPI_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001104:	f000 fb0e 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000088 	.word	0x20000088
 8001110:	40013000 	.word	0x40013000

08001114 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <MX_USART1_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_USART1_UART_Init+0x4c>)
 800114c:	f001 fe91 	bl	8002e72 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f000 fae5 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000e0 	.word	0x200000e0
 8001164:	40013800 	.word	0x40013800

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	4b35      	ldr	r3, [pc, #212]	@ (8001254 <MX_GPIO_Init+0xec>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a34      	ldr	r2, [pc, #208]	@ (8001254 <MX_GPIO_Init+0xec>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b32      	ldr	r3, [pc, #200]	@ (8001254 <MX_GPIO_Init+0xec>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <MX_GPIO_Init+0xec>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a2e      	ldr	r2, [pc, #184]	@ (8001254 <MX_GPIO_Init+0xec>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <MX_GPIO_Init+0xec>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <MX_GPIO_Init+0xec>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a28      	ldr	r2, [pc, #160]	@ (8001254 <MX_GPIO_Init+0xec>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <MX_GPIO_Init+0xec>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <MX_GPIO_Init+0xec>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a22      	ldr	r2, [pc, #136]	@ (8001254 <MX_GPIO_Init+0xec>)
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <MX_GPIO_Init+0xec>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOS_DISCHARGE_Pin|MOS_CHARGE_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2103      	movs	r1, #3
 80011e0:	481d      	ldr	r0, [pc, #116]	@ (8001258 <MX_GPIO_Init+0xf0>)
 80011e2:	f000 ff37 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2110      	movs	r1, #16
 80011ea:	481b      	ldr	r0, [pc, #108]	@ (8001258 <MX_GPIO_Init+0xf0>)
 80011ec:	f000 ff32 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_RST_GPIO_Port, BMS_RST_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	4819      	ldr	r0, [pc, #100]	@ (800125c <MX_GPIO_Init+0xf4>)
 80011f6:	f000 ff2d 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PC13_Pin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 80011fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_GPIO_Init+0xf8>)
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	4815      	ldr	r0, [pc, #84]	@ (8001264 <MX_GPIO_Init+0xfc>)
 8001210:	f000 fd9c 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOS_DISCHARGE_Pin MOS_CHARGE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MOS_DISCHARGE_Pin|MOS_CHARGE_Pin|SPI1_CS_Pin;
 8001214:	2313      	movs	r3, #19
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	480b      	ldr	r0, [pc, #44]	@ (8001258 <MX_GPIO_Init+0xf0>)
 800122c:	f000 fd8e 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_RST_Pin */
  GPIO_InitStruct.Pin = BMS_RST_Pin;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2302      	movs	r3, #2
 800123e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_RST_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_GPIO_Init+0xf4>)
 8001248:	f000 fd80 	bl	8001d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	40010800 	.word	0x40010800
 800125c:	40010c00 	.word	0x40010c00
 8001260:	10110000 	.word	0x10110000
 8001264:	40011000 	.word	0x40011000

08001268 <MeasuarenceApp>:

/* USER CODE BEGIN 4 */

// Measure voltage of stack, cell 1, cell 2, cell 3, isense.
bcc_status_t MeasuarenceApp(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	uint8_t cid;
	bcc_status_t error;
	uint32_t valueVoltage;


	error = BCC_Meas_StartAndWait(&g_bccData.drvConfig, BCC_CID_DEV1, BCC_AVG_1);
 800126e:	2200      	movs	r2, #0
 8001270:	2101      	movs	r1, #1
 8001272:	4861      	ldr	r0, [pc, #388]	@ (80013f8 <MeasuarenceApp+0x190>)
 8001274:	f002 fb3f 	bl	80038f6 <BCC_Meas_StartAndWait>
 8001278:	4603      	mov	r3, r0
 800127a:	71bb      	strb	r3, [r7, #6]
	if (error != BCC_STATUS_SUCCESS)
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MeasuarenceApp+0x1e>
	{
		return error;
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	e0b3      	b.n	80013ee <MeasuarenceApp+0x186>
	}

	for (cid = BCC_CID_DEV1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 8001286:	2301      	movs	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	e0aa      	b.n	80013e2 <MeasuarenceApp+0x17a>
	{
		sendNops();
 800128c:	f7ff fbfe 	bl	8000a8c <sendNops>

		printf("------------- BEGIN ---------------\r\n");
 8001290:	485a      	ldr	r0, [pc, #360]	@ (80013fc <MeasuarenceApp+0x194>)
 8001292:	f004 f84f 	bl	8005334 <puts>
		//	doMeasurements(1);
		error = BCC_Meas_GetStackVoltage(&g_bccData.drvConfig, BCC_CID_DEV1, &valueVoltage);
 8001296:	463b      	mov	r3, r7
 8001298:	461a      	mov	r2, r3
 800129a:	2101      	movs	r1, #1
 800129c:	4856      	ldr	r0, [pc, #344]	@ (80013f8 <MeasuarenceApp+0x190>)
 800129e:	f002 fc91 	bl	8003bc4 <BCC_Meas_GetStackVoltage>
 80012a2:	4603      	mov	r3, r0
 80012a4:	71bb      	strb	r3, [r7, #6]
		if (error != BCC_STATUS_SUCCESS)
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <MeasuarenceApp+0x50>
		{
			printf("Error (0x%04x)\r\n)", error);
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4853      	ldr	r0, [pc, #332]	@ (8001400 <MeasuarenceApp+0x198>)
 80012b2:	f003 ffd7 	bl	8005264 <iprintf>
 80012b6:	e008      	b.n	80012ca <MeasuarenceApp+0x62>
		}
		else
		{
			printf("Stack: %d mV \r\n",valueVoltage/1000U);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	4a52      	ldr	r2, [pc, #328]	@ (8001404 <MeasuarenceApp+0x19c>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	099b      	lsrs	r3, r3, #6
 80012c2:	4619      	mov	r1, r3
 80012c4:	4850      	ldr	r0, [pc, #320]	@ (8001408 <MeasuarenceApp+0x1a0>)
 80012c6:	f003 ffcd 	bl	8005264 <iprintf>
		}

		sendNops();
 80012ca:	f7ff fbdf 	bl	8000a8c <sendNops>

		//	 get cell 1 voltage
		error = BCC_Meas_GetCellVoltage(&g_bccData.drvConfig, BCC_CID_DEV1, 0, &valueVoltage);
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	4848      	ldr	r0, [pc, #288]	@ (80013f8 <MeasuarenceApp+0x190>)
 80012d6:	f002 fcb1 	bl	8003c3c <BCC_Meas_GetCellVoltage>
 80012da:	4603      	mov	r3, r0
 80012dc:	71bb      	strb	r3, [r7, #6]
		if (error != BCC_STATUS_SUCCESS)
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <MeasuarenceApp+0x88>
		{
			printf("Error (0x%04x)\r\n)", error);
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4845      	ldr	r0, [pc, #276]	@ (8001400 <MeasuarenceApp+0x198>)
 80012ea:	f003 ffbb 	bl	8005264 <iprintf>
 80012ee:	e008      	b.n	8001302 <MeasuarenceApp+0x9a>
		}
		else
		{
			printf("Cell 1: %d mV \r\n",valueVoltage/1000U);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4a44      	ldr	r2, [pc, #272]	@ (8001404 <MeasuarenceApp+0x19c>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	099b      	lsrs	r3, r3, #6
 80012fa:	4619      	mov	r1, r3
 80012fc:	4843      	ldr	r0, [pc, #268]	@ (800140c <MeasuarenceApp+0x1a4>)
 80012fe:	f003 ffb1 	bl	8005264 <iprintf>
		}

		sendNops();
 8001302:	f7ff fbc3 	bl	8000a8c <sendNops>

		//	  get cell 1 voltage
		error = BCC_Meas_GetCellVoltage(&g_bccData.drvConfig, BCC_CID_DEV1, 1, &valueVoltage);
 8001306:	463b      	mov	r3, r7
 8001308:	2201      	movs	r2, #1
 800130a:	2101      	movs	r1, #1
 800130c:	483a      	ldr	r0, [pc, #232]	@ (80013f8 <MeasuarenceApp+0x190>)
 800130e:	f002 fc95 	bl	8003c3c <BCC_Meas_GetCellVoltage>
 8001312:	4603      	mov	r3, r0
 8001314:	71bb      	strb	r3, [r7, #6]
		if (error != BCC_STATUS_SUCCESS)
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <MeasuarenceApp+0xc0>
		{
			printf("Error (0x%04x)\r\n)", error);
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	4619      	mov	r1, r3
 8001320:	4837      	ldr	r0, [pc, #220]	@ (8001400 <MeasuarenceApp+0x198>)
 8001322:	f003 ff9f 	bl	8005264 <iprintf>
 8001326:	e008      	b.n	800133a <MeasuarenceApp+0xd2>
		}else
		{
			printf("Cell 2: %d mV \r\n",valueVoltage/1000U);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	4a36      	ldr	r2, [pc, #216]	@ (8001404 <MeasuarenceApp+0x19c>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	099b      	lsrs	r3, r3, #6
 8001332:	4619      	mov	r1, r3
 8001334:	4836      	ldr	r0, [pc, #216]	@ (8001410 <MeasuarenceApp+0x1a8>)
 8001336:	f003 ff95 	bl	8005264 <iprintf>
		}

		sendNops();
 800133a:	f7ff fba7 	bl	8000a8c <sendNops>

		//	  get cell 1 voltage
		error = BCC_Meas_GetCellVoltage(&g_bccData.drvConfig, BCC_CID_DEV1, 5, &valueVoltage);
 800133e:	463b      	mov	r3, r7
 8001340:	2205      	movs	r2, #5
 8001342:	2101      	movs	r1, #1
 8001344:	482c      	ldr	r0, [pc, #176]	@ (80013f8 <MeasuarenceApp+0x190>)
 8001346:	f002 fc79 	bl	8003c3c <BCC_Meas_GetCellVoltage>
 800134a:	4603      	mov	r3, r0
 800134c:	71bb      	strb	r3, [r7, #6]
		if (error != BCC_STATUS_SUCCESS)
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <MeasuarenceApp+0xf8>
		{
			printf("Error (0x%04x)\r\n)", error);
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	4619      	mov	r1, r3
 8001358:	4829      	ldr	r0, [pc, #164]	@ (8001400 <MeasuarenceApp+0x198>)
 800135a:	f003 ff83 	bl	8005264 <iprintf>
 800135e:	e008      	b.n	8001372 <MeasuarenceApp+0x10a>
		}else{
			printf("Cell 3: %d mV \r\n",valueVoltage/1000U);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	4a28      	ldr	r2, [pc, #160]	@ (8001404 <MeasuarenceApp+0x19c>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	099b      	lsrs	r3, r3, #6
 800136a:	4619      	mov	r1, r3
 800136c:	4829      	ldr	r0, [pc, #164]	@ (8001414 <MeasuarenceApp+0x1ac>)
 800136e:	f003 ff79 	bl	8005264 <iprintf>
		}

		sendNops();
 8001372:	f7ff fb8b 	bl	8000a8c <sendNops>

		//	  get Isense voltage
		error = BCC_Meas_GetIsenseVoltage(&g_bccData.drvConfig, BCC_CID_DEV1, &valueVoltage);
 8001376:	463b      	mov	r3, r7
 8001378:	461a      	mov	r2, r3
 800137a:	2101      	movs	r1, #1
 800137c:	481e      	ldr	r0, [pc, #120]	@ (80013f8 <MeasuarenceApp+0x190>)
 800137e:	f002 fbb5 	bl	8003aec <BCC_Meas_GetIsenseVoltage>
 8001382:	4603      	mov	r3, r0
 8001384:	71bb      	strb	r3, [r7, #6]
		if (error != BCC_STATUS_SUCCESS)
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <MeasuarenceApp+0x130>
		 {
			printf("Error (0x%04x)\r\n)", error);
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	4619      	mov	r1, r3
 8001390:	481b      	ldr	r0, [pc, #108]	@ (8001400 <MeasuarenceApp+0x198>)
 8001392:	f003 ff67 	bl	8005264 <iprintf>
 8001396:	e011      	b.n	80013bc <MeasuarenceApp+0x154>
		}else
		{
			printf("ISENSE: %d  uV \r\n", valueVoltage);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	481e      	ldr	r0, [pc, #120]	@ (8001418 <MeasuarenceApp+0x1b0>)
 800139e:	f003 ff61 	bl	8005264 <iprintf>
			printf("ISENSE: %d  mA \r\n", abs(valueVoltage)/10U);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bfb8      	it	lt
 80013a8:	425b      	neglt	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MeasuarenceApp+0x1b4>)
 80013ae:	fba3 2302 	umull	r2, r3, r3, r2
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	4619      	mov	r1, r3
 80013b6:	481a      	ldr	r0, [pc, #104]	@ (8001420 <MeasuarenceApp+0x1b8>)
 80013b8:	f003 ff54 	bl	8005264 <iprintf>
		}

		sendNops();
 80013bc:	f7ff fb66 	bl	8000a8c <sendNops>
		//		get temperature value
		if ((error = doGetTemp(cid)) != BCC_STATUS_SUCCESS)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fdf2 	bl	8004fac <doGetTemp>
 80013c8:	4603      	mov	r3, r0
 80013ca:	71bb      	strb	r3, [r7, #6]
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MeasuarenceApp+0x16e>
		{
		    return error;
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	e00b      	b.n	80013ee <MeasuarenceApp+0x186>
		}

		printf("-------------- END ----------------\r\n");
 80013d6:	4813      	ldr	r0, [pc, #76]	@ (8001424 <MeasuarenceApp+0x1bc>)
 80013d8:	f003 ffac 	bl	8005334 <puts>
	for (cid = BCC_CID_DEV1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3301      	adds	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <MeasuarenceApp+0x190>)
 80013e4:	789b      	ldrb	r3, [r3, #2]
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f67f af4f 	bls.w	800128c <MeasuarenceApp+0x24>
	}
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000128 	.word	0x20000128
 80013fc:	08006a40 	.word	0x08006a40
 8001400:	08006adc 	.word	0x08006adc
 8001404:	10624dd3 	.word	0x10624dd3
 8001408:	08006af0 	.word	0x08006af0
 800140c:	08006b00 	.word	0x08006b00
 8001410:	08006b14 	.word	0x08006b14
 8001414:	08006b28 	.word	0x08006b28
 8001418:	08006b3c 	.word	0x08006b3c
 800141c:	cccccccd 	.word	0xcccccccd
 8001420:	08006b50 	.word	0x08006b50
 8001424:	08006ab4 	.word	0x08006ab4

08001428 <initRegisters>:

static bcc_status_t initRegisters()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
    uint8_t cid, i;
    bcc_status_t status;

    for (cid = 1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 800142e:	2301      	movs	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e03c      	b.n	80014ae <initRegisters+0x86>
    {
          for (i = 0; i < MC33772C_INIT_CONF_REG_CNT; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	71bb      	strb	r3, [r7, #6]
 8001438:	e033      	b.n	80014a2 <initRegisters+0x7a>
          {
              if (s_initRegsMc33772c[i].value != s_initRegsMc33772c[i].defaultVal)
 800143a:	79ba      	ldrb	r2, [r7, #6]
 800143c:	4921      	ldr	r1, [pc, #132]	@ (80014c4 <initRegisters+0x9c>)
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	440b      	add	r3, r1
 8001448:	3304      	adds	r3, #4
 800144a:	8819      	ldrh	r1, [r3, #0]
 800144c:	79ba      	ldrb	r2, [r7, #6]
 800144e:	481d      	ldr	r0, [pc, #116]	@ (80014c4 <initRegisters+0x9c>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4403      	add	r3, r0
 800145a:	3302      	adds	r3, #2
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	4299      	cmp	r1, r3
 8001460:	d01c      	beq.n	800149c <initRegisters+0x74>
              {
                  status = BCC_Reg_Write(&g_bccData.drvConfig, (bcc_cid_t)cid,
 8001462:	79ba      	ldrb	r2, [r7, #6]
                          s_initRegsMc33772c[i].address, s_initRegsMc33772c[i].value);
 8001464:	4917      	ldr	r1, [pc, #92]	@ (80014c4 <initRegisters+0x9c>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	440b      	add	r3, r1
 8001470:	7818      	ldrb	r0, [r3, #0]
                  status = BCC_Reg_Write(&g_bccData.drvConfig, (bcc_cid_t)cid,
 8001472:	79ba      	ldrb	r2, [r7, #6]
                          s_initRegsMc33772c[i].address, s_initRegsMc33772c[i].value);
 8001474:	4913      	ldr	r1, [pc, #76]	@ (80014c4 <initRegisters+0x9c>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	440b      	add	r3, r1
 8001480:	3304      	adds	r3, #4
 8001482:	881b      	ldrh	r3, [r3, #0]
                  status = BCC_Reg_Write(&g_bccData.drvConfig, (bcc_cid_t)cid,
 8001484:	79f9      	ldrb	r1, [r7, #7]
 8001486:	4602      	mov	r2, r0
 8001488:	480f      	ldr	r0, [pc, #60]	@ (80014c8 <initRegisters+0xa0>)
 800148a:	f002 f974 	bl	8003776 <BCC_Reg_Write>
 800148e:	4603      	mov	r3, r0
 8001490:	717b      	strb	r3, [r7, #5]
                  if (status != BCC_STATUS_SUCCESS)
 8001492:	797b      	ldrb	r3, [r7, #5]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <initRegisters+0x74>
                  {
                      return status;
 8001498:	797b      	ldrb	r3, [r7, #5]
 800149a:	e00e      	b.n	80014ba <initRegisters+0x92>
          for (i = 0; i < MC33772C_INIT_CONF_REG_CNT; i++)
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	3301      	adds	r3, #1
 80014a0:	71bb      	strb	r3, [r7, #6]
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80014a6:	d9c8      	bls.n	800143a <initRegisters+0x12>
    for (cid = 1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	3301      	adds	r3, #1
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <initRegisters+0xa0>)
 80014b0:	789b      	ldrb	r3, [r3, #2]
 80014b2:	79fa      	ldrb	r2, [r7, #7]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d9bd      	bls.n	8001434 <initRegisters+0xc>
                  }
              }
          }
  }
    return BCC_STATUS_SUCCESS;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	08007180 	.word	0x08007180
 80014c8:	20000128 	.word	0x20000128

080014cc <clearFaultRegs>:




static bcc_status_t clearFaultRegs()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
    uint8_t cid;
    bcc_status_t status;

    for (cid = 1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 80014d2:	2301      	movs	r3, #1
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	e091      	b.n	80015fc <clearFaultRegs+0x130>
    {
        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_CELL_OV);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	484d      	ldr	r0, [pc, #308]	@ (8001614 <clearFaultRegs+0x148>)
 80014e0:	f002 fc44 	bl	8003d6c <BCC_Fault_ClearStatus>
 80014e4:	4603      	mov	r3, r0
 80014e6:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <clearFaultRegs+0x26>
        {
            return status;
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	e08b      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_CELL_UV);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4619      	mov	r1, r3
 80014f8:	4846      	ldr	r0, [pc, #280]	@ (8001614 <clearFaultRegs+0x148>)
 80014fa:	f002 fc37 	bl	8003d6c <BCC_Fault_ClearStatus>
 80014fe:	4603      	mov	r3, r0
 8001500:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <clearFaultRegs+0x40>
        {
            return status;
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	e07e      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_CB_OPEN);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2202      	movs	r2, #2
 8001510:	4619      	mov	r1, r3
 8001512:	4840      	ldr	r0, [pc, #256]	@ (8001614 <clearFaultRegs+0x148>)
 8001514:	f002 fc2a 	bl	8003d6c <BCC_Fault_ClearStatus>
 8001518:	4603      	mov	r3, r0
 800151a:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <clearFaultRegs+0x5a>
        {
            return status;
 8001522:	79bb      	ldrb	r3, [r7, #6]
 8001524:	e071      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_CB_SHORT);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2203      	movs	r2, #3
 800152a:	4619      	mov	r1, r3
 800152c:	4839      	ldr	r0, [pc, #228]	@ (8001614 <clearFaultRegs+0x148>)
 800152e:	f002 fc1d 	bl	8003d6c <BCC_Fault_ClearStatus>
 8001532:	4603      	mov	r3, r0
 8001534:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <clearFaultRegs+0x74>
        {
            return status;
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	e064      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_GPIO_STATUS);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2204      	movs	r2, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4833      	ldr	r0, [pc, #204]	@ (8001614 <clearFaultRegs+0x148>)
 8001548:	f002 fc10 	bl	8003d6c <BCC_Fault_ClearStatus>
 800154c:	4603      	mov	r3, r0
 800154e:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <clearFaultRegs+0x8e>
        {
            return status;
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	e057      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_AN_OT_UT);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2205      	movs	r2, #5
 800155e:	4619      	mov	r1, r3
 8001560:	482c      	ldr	r0, [pc, #176]	@ (8001614 <clearFaultRegs+0x148>)
 8001562:	f002 fc03 	bl	8003d6c <BCC_Fault_ClearStatus>
 8001566:	4603      	mov	r3, r0
 8001568:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 800156a:	79bb      	ldrb	r3, [r7, #6]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <clearFaultRegs+0xa8>
        {
            return status;
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	e04a      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_GPIO_SHORT);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2206      	movs	r2, #6
 8001578:	4619      	mov	r1, r3
 800157a:	4826      	ldr	r0, [pc, #152]	@ (8001614 <clearFaultRegs+0x148>)
 800157c:	f002 fbf6 	bl	8003d6c <BCC_Fault_ClearStatus>
 8001580:	4603      	mov	r3, r0
 8001582:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <clearFaultRegs+0xc2>
        {
            return status;
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	e03d      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_COMM);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2207      	movs	r2, #7
 8001592:	4619      	mov	r1, r3
 8001594:	481f      	ldr	r0, [pc, #124]	@ (8001614 <clearFaultRegs+0x148>)
 8001596:	f002 fbe9 	bl	8003d6c <BCC_Fault_ClearStatus>
 800159a:	4603      	mov	r3, r0
 800159c:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <clearFaultRegs+0xdc>
        {
            return status;
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	e030      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_FAULT1);
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2208      	movs	r2, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	4819      	ldr	r0, [pc, #100]	@ (8001614 <clearFaultRegs+0x148>)
 80015b0:	f002 fbdc 	bl	8003d6c <BCC_Fault_ClearStatus>
 80015b4:	4603      	mov	r3, r0
 80015b6:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <clearFaultRegs+0xf6>
        {
            return status;
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	e023      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_FAULT2);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2209      	movs	r2, #9
 80015c6:	4619      	mov	r1, r3
 80015c8:	4812      	ldr	r0, [pc, #72]	@ (8001614 <clearFaultRegs+0x148>)
 80015ca:	f002 fbcf 	bl	8003d6c <BCC_Fault_ClearStatus>
 80015ce:	4603      	mov	r3, r0
 80015d0:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <clearFaultRegs+0x110>
        {
            return status;
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	e016      	b.n	800160a <clearFaultRegs+0x13e>
        }

        status = BCC_Fault_ClearStatus(&g_bccData.drvConfig, (bcc_cid_t)cid, BCC_FS_FAULT3);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	220a      	movs	r2, #10
 80015e0:	4619      	mov	r1, r3
 80015e2:	480c      	ldr	r0, [pc, #48]	@ (8001614 <clearFaultRegs+0x148>)
 80015e4:	f002 fbc2 	bl	8003d6c <BCC_Fault_ClearStatus>
 80015e8:	4603      	mov	r3, r0
 80015ea:	71bb      	strb	r3, [r7, #6]
        if (status != BCC_STATUS_SUCCESS)
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <clearFaultRegs+0x12a>
        {
            return status;
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	e009      	b.n	800160a <clearFaultRegs+0x13e>
    for (cid = 1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	3301      	adds	r3, #1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <clearFaultRegs+0x148>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	429a      	cmp	r2, r3
 8001604:	f67f af68 	bls.w	80014d8 <clearFaultRegs+0xc>
        }
    }

    return BCC_STATUS_SUCCESS;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000128 	.word	0x20000128

08001618 <initDemo>:



static void initDemo(bcc_status_t *bccError)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    ntc_config_t ntcConfig;
    /* Initialize BCC driver configuration structure (g_bccData.drvConfig). */

    g_bccData.drvConfig.drvInstance = 0U;
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <initDemo+0x8c>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
    g_bccData.drvConfig.commMode = BCC_MODE_SPI;
 8001626:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <initDemo+0x8c>)
 8001628:	2200      	movs	r2, #0
 800162a:	705a      	strb	r2, [r3, #1]
    g_bccData.drvConfig.devicesCnt = 1U;
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <initDemo+0x8c>)
 800162e:	2201      	movs	r2, #1
 8001630:	709a      	strb	r2, [r3, #2]
    g_bccData.drvConfig.device[0] = BCC_DEVICE_MC33772C;
 8001632:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <initDemo+0x8c>)
 8001634:	2201      	movs	r2, #1
 8001636:	70da      	strb	r2, [r3, #3]
    g_bccData.drvConfig.cellCnt[0] = 3U;
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <initDemo+0x8c>)
 800163a:	2203      	movs	r2, #3
 800163c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42


    /* Precalculate NTC look up table for fast temperature measurement. */
    ntcConfig.rntc = 6800U;               /* NTC pull-up 6.8kOhm */
 8001640:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8001644:	60fb      	str	r3, [r7, #12]
    ntcConfig.refTemp = 25U;              /* NTC resistance 10kOhm at 25 degC */
 8001646:	2319      	movs	r3, #25
 8001648:	753b      	strb	r3, [r7, #20]
    ntcConfig.refRes = 10000U;            /* NTC resistance 10kOhm at 25 degC */
 800164a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800164e:	613b      	str	r3, [r7, #16]
    ntcConfig.beta = 3435U;
 8001650:	f640 536b 	movw	r3, #3435	@ 0xd6b
 8001654:	60bb      	str	r3, [r7, #8]
    fillNtcTable(&ntcConfig);
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fbe0 	bl	8004e20 <fillNtcTable>

    /* Initialize BCC device. */
    *bccError = BCC_Init(&g_bccData.drvConfig);
 8001660:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <initDemo+0x8c>)
 8001662:	f001 ff55 	bl	8003510 <BCC_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	701a      	strb	r2, [r3, #0]
    if (*bccError != BCC_STATUS_SUCCESS)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d110      	bne.n	8001698 <initDemo+0x80>
    {
        return;
    }

    /* Initialize BCC device registers. */
    *bccError = initRegisters();
 8001676:	f7ff fed7 	bl	8001428 <initRegisters>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	701a      	strb	r2, [r3, #0]
    if (*bccError != BCC_STATUS_SUCCESS)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d108      	bne.n	800169c <initDemo+0x84>
    {
        return;
    }

    /* Clear fault registers. */
    *bccError = clearFaultRegs();
 800168a:	f7ff ff1f 	bl	80014cc <clearFaultRegs>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e002      	b.n	800169e <initDemo+0x86>
        return;
 8001698:	bf00      	nop
 800169a:	e000      	b.n	800169e <initDemo+0x86>
        return;
 800169c:	bf00      	nop
}
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000128 	.word	0x20000128

080016a8 <startApp>:


static bcc_status_t startApp(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
    uint8_t cid;
    bcc_status_t error;

    for (cid = BCC_CID_DEV1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 80016ae:	2301      	movs	r3, #1
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	e029      	b.n	8001708 <startApp+0x60>
    {
        /* Send NOP command to all nodes in order to prevent communication timeout. */
        sendNops();
 80016b4:	f7ff f9ea 	bl	8000a8c <sendNops>

        /* Print values of the configurable registers. */
        if ((error = printInitialSettings(cid)) != BCC_STATUS_SUCCESS)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fa00 	bl	8000ac0 <printInitialSettings>
 80016c0:	4603      	mov	r3, r0
 80016c2:	71bb      	strb	r3, [r7, #6]
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <startApp+0x26>
        {
            return error;
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	e024      	b.n	8001718 <startApp+0x70>
        }

        /* Send NOP command to all nodes in order to prevent communication timeout. */
        sendNops();
 80016ce:	f7ff f9dd 	bl	8000a8c <sendNops>

        /* Do a measurement and print the measured values. */
        if ((error = doMeasurements(cid)) != BCC_STATUS_SUCCESS)
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fc47 	bl	8004f68 <doMeasurements>
 80016da:	4603      	mov	r3, r0
 80016dc:	71bb      	strb	r3, [r7, #6]
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <startApp+0x40>
        {
            return error;
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	e017      	b.n	8001718 <startApp+0x70>
        }

        /* Send NOP command to all nodes in order to prevent communication timeout. */
        sendNops();
 80016e8:	f7ff f9d0 	bl	8000a8c <sendNops>

        /* Print content of the fault registers. */
        if ((error = printFaultRegisters(cid)) != BCC_STATUS_SUCCESS)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb1e 	bl	8000d30 <printFaultRegisters>
 80016f4:	4603      	mov	r3, r0
 80016f6:	71bb      	strb	r3, [r7, #6]
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <startApp+0x5a>
        {
            return error;
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	e00a      	b.n	8001718 <startApp+0x70>
    for (cid = BCC_CID_DEV1; cid <= g_bccData.drvConfig.devicesCnt; cid++)
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	3301      	adds	r3, #1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <startApp+0x78>)
 800170a:	789b      	ldrb	r3, [r3, #2]
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	429a      	cmp	r2, r3
 8001710:	d9d0      	bls.n	80016b4 <startApp+0xc>
        }
    }

    /* Send NOP command to all nodes in order to prevent communication timeout. */
    sendNops();
 8001712:	f7ff f9bb 	bl	8000a8c <sendNops>

    return BCC_STATUS_SUCCESS;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000128 	.word	0x20000128

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <Error_Handler+0x8>

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_MspInit+0x5c>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a14      	ldr	r2, [pc, #80]	@ (800178c <HAL_MspInit+0x5c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_MspInit+0x5c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_MspInit+0x5c>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_MspInit+0x5c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_MspInit+0x5c>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_MspInit+0x60>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <HAL_MspInit+0x60>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40021000 	.word	0x40021000
 8001790:	40010000 	.word	0x40010000

08001794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1b      	ldr	r2, [pc, #108]	@ (800181c <HAL_SPI_MspInit+0x88>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d12f      	bne.n	8001814 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_SPI_MspInit+0x8c>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a19      	ldr	r2, [pc, #100]	@ (8001820 <HAL_SPI_MspInit+0x8c>)
 80017ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_SPI_MspInit+0x8c>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_SPI_MspInit+0x8c>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a13      	ldr	r2, [pc, #76]	@ (8001820 <HAL_SPI_MspInit+0x8c>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_SPI_MspInit+0x8c>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017e4:	23a0      	movs	r3, #160	@ 0xa0
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480b      	ldr	r0, [pc, #44]	@ (8001824 <HAL_SPI_MspInit+0x90>)
 80017f8:	f000 faa8 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017fc:	2340      	movs	r3, #64	@ 0x40
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <HAL_SPI_MspInit+0x90>)
 8001810:	f000 fa9c 	bl	8001d4c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40013000 	.word	0x40013000
 8001820:	40021000 	.word	0x40021000
 8001824:	40010800 	.word	0x40010800

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1c      	ldr	r2, [pc, #112]	@ (80018b4 <HAL_UART_MspInit+0x8c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d131      	bne.n	80018ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <HAL_UART_MspInit+0x90>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a1a      	ldr	r2, [pc, #104]	@ (80018b8 <HAL_UART_MspInit+0x90>)
 800184e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_UART_MspInit+0x90>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_UART_MspInit+0x90>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <HAL_UART_MspInit+0x90>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_UART_MspInit+0x90>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800187c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	480b      	ldr	r0, [pc, #44]	@ (80018bc <HAL_UART_MspInit+0x94>)
 800188e:	f000 fa5d 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <HAL_UART_MspInit+0x94>)
 80018a8:	f000 fa50 	bl	8001d4c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010800 	.word	0x40010800

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <NMI_Handler+0x4>

080018c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <MemManage_Handler+0x4>

080018d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001910:	f000 f8f8 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00a      	b.n	8001940 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192a:	f3af 8000 	nop.w
 800192e:	4601      	mov	r1, r0
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf0      	blt.n	800192a <_read+0x12>
  }

  return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001978:	605a      	str	r2, [r3, #4]
  return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <_isatty>:

int _isatty(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
	...

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f003 fdd4 	bl	8005590 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20005000 	.word	0x20005000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	200005a8 	.word	0x200005a8
 8001a1c:	20000850 	.word	0x20000850

08001a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a2c:	f7ff fff8 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a32:	490c      	ldr	r1, [pc, #48]	@ (8001a64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a34:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a48:	4c09      	ldr	r4, [pc, #36]	@ (8001a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f003 fda1 	bl	800559c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5a:	f7ff fa8d 	bl	8000f78 <main>
  bx lr
 8001a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a68:	08007450 	.word	0x08007450
  ldr r2, =_sbss
 8001a6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a70:	20000850 	.word	0x20000850

08001a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_2_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <HAL_Init+0x28>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	@ (8001aa0 <HAL_Init+0x28>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f000 f92b 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	200f      	movs	r0, #15
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fe4c 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f935 	bl	8001d32 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f000 f90b 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	@ (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000004 	.word	0x20000004
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	20000008 	.word	0x20000008

08001b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_IncTick+0x1c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_IncTick+0x20>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a03      	ldr	r2, [pc, #12]	@ (8001b24 <HAL_IncTick+0x20>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	200005ac 	.word	0x200005ac

08001b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b02      	ldr	r3, [pc, #8]	@ (8001b38 <HAL_GetTick+0x10>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	200005ac 	.word	0x200005ac

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff fff0 	bl	8001b28 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffe0 	bl	8001b28 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000000c 	.word	0x2000000c

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff90 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff49 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff5e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffb0 	bl	8001ca0 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b08b      	sub	sp, #44	@ 0x2c
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	e169      	b.n	8002034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d60:	2201      	movs	r2, #1
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f040 8158 	bne.w	800202e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a9a      	ldr	r2, [pc, #616]	@ (8001fec <HAL_GPIO_Init+0x2a0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d05e      	beq.n	8001e46 <HAL_GPIO_Init+0xfa>
 8001d88:	4a98      	ldr	r2, [pc, #608]	@ (8001fec <HAL_GPIO_Init+0x2a0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d875      	bhi.n	8001e7a <HAL_GPIO_Init+0x12e>
 8001d8e:	4a98      	ldr	r2, [pc, #608]	@ (8001ff0 <HAL_GPIO_Init+0x2a4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d058      	beq.n	8001e46 <HAL_GPIO_Init+0xfa>
 8001d94:	4a96      	ldr	r2, [pc, #600]	@ (8001ff0 <HAL_GPIO_Init+0x2a4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d86f      	bhi.n	8001e7a <HAL_GPIO_Init+0x12e>
 8001d9a:	4a96      	ldr	r2, [pc, #600]	@ (8001ff4 <HAL_GPIO_Init+0x2a8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d052      	beq.n	8001e46 <HAL_GPIO_Init+0xfa>
 8001da0:	4a94      	ldr	r2, [pc, #592]	@ (8001ff4 <HAL_GPIO_Init+0x2a8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d869      	bhi.n	8001e7a <HAL_GPIO_Init+0x12e>
 8001da6:	4a94      	ldr	r2, [pc, #592]	@ (8001ff8 <HAL_GPIO_Init+0x2ac>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d04c      	beq.n	8001e46 <HAL_GPIO_Init+0xfa>
 8001dac:	4a92      	ldr	r2, [pc, #584]	@ (8001ff8 <HAL_GPIO_Init+0x2ac>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d863      	bhi.n	8001e7a <HAL_GPIO_Init+0x12e>
 8001db2:	4a92      	ldr	r2, [pc, #584]	@ (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d046      	beq.n	8001e46 <HAL_GPIO_Init+0xfa>
 8001db8:	4a90      	ldr	r2, [pc, #576]	@ (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d85d      	bhi.n	8001e7a <HAL_GPIO_Init+0x12e>
 8001dbe:	2b12      	cmp	r3, #18
 8001dc0:	d82a      	bhi.n	8001e18 <HAL_GPIO_Init+0xcc>
 8001dc2:	2b12      	cmp	r3, #18
 8001dc4:	d859      	bhi.n	8001e7a <HAL_GPIO_Init+0x12e>
 8001dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dcc <HAL_GPIO_Init+0x80>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08001e33 	.word	0x08001e33
 8001dd8:	08001e75 	.word	0x08001e75
 8001ddc:	08001e7b 	.word	0x08001e7b
 8001de0:	08001e7b 	.word	0x08001e7b
 8001de4:	08001e7b 	.word	0x08001e7b
 8001de8:	08001e7b 	.word	0x08001e7b
 8001dec:	08001e7b 	.word	0x08001e7b
 8001df0:	08001e7b 	.word	0x08001e7b
 8001df4:	08001e7b 	.word	0x08001e7b
 8001df8:	08001e7b 	.word	0x08001e7b
 8001dfc:	08001e7b 	.word	0x08001e7b
 8001e00:	08001e7b 	.word	0x08001e7b
 8001e04:	08001e7b 	.word	0x08001e7b
 8001e08:	08001e7b 	.word	0x08001e7b
 8001e0c:	08001e7b 	.word	0x08001e7b
 8001e10:	08001e29 	.word	0x08001e29
 8001e14:	08001e3d 	.word	0x08001e3d
 8001e18:	4a79      	ldr	r2, [pc, #484]	@ (8002000 <HAL_GPIO_Init+0x2b4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e1e:	e02c      	b.n	8001e7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	623b      	str	r3, [r7, #32]
          break;
 8001e26:	e029      	b.n	8001e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	623b      	str	r3, [r7, #32]
          break;
 8001e30:	e024      	b.n	8001e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	3308      	adds	r3, #8
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e01f      	b.n	8001e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	330c      	adds	r3, #12
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e01a      	b.n	8001e7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e013      	b.n	8001e7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	611a      	str	r2, [r3, #16]
          break;
 8001e66:	e009      	b.n	8001e7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e68:	2308      	movs	r3, #8
 8001e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	615a      	str	r2, [r3, #20]
          break;
 8001e72:	e003      	b.n	8001e7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e74:	2300      	movs	r3, #0
 8001e76:	623b      	str	r3, [r7, #32]
          break;
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x130>
          break;
 8001e7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2bff      	cmp	r3, #255	@ 0xff
 8001e80:	d801      	bhi.n	8001e86 <HAL_GPIO_Init+0x13a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_Init+0x13e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2bff      	cmp	r3, #255	@ 0xff
 8001e90:	d802      	bhi.n	8001e98 <HAL_GPIO_Init+0x14c>
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x152>
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	3b08      	subs	r3, #8
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	210f      	movs	r1, #15
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	6a39      	ldr	r1, [r7, #32]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80b1 	beq.w	800202e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8002004 <HAL_GPIO_Init+0x2b8>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a4c      	ldr	r2, [pc, #304]	@ (8002004 <HAL_GPIO_Init+0x2b8>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8002004 <HAL_GPIO_Init+0x2b8>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ee4:	4a48      	ldr	r2, [pc, #288]	@ (8002008 <HAL_GPIO_Init+0x2bc>)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a40      	ldr	r2, [pc, #256]	@ (800200c <HAL_GPIO_Init+0x2c0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_GPIO_Init+0x1ec>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3f      	ldr	r2, [pc, #252]	@ (8002010 <HAL_GPIO_Init+0x2c4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00d      	beq.n	8001f34 <HAL_GPIO_Init+0x1e8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8002014 <HAL_GPIO_Init+0x2c8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <HAL_GPIO_Init+0x1e4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3d      	ldr	r2, [pc, #244]	@ (8002018 <HAL_GPIO_Init+0x2cc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_GPIO_Init+0x1e0>
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e006      	b.n	8001f3a <HAL_GPIO_Init+0x1ee>
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	e004      	b.n	8001f3a <HAL_GPIO_Init+0x1ee>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e002      	b.n	8001f3a <HAL_GPIO_Init+0x1ee>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_GPIO_Init+0x1ee>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f3c:	f002 0203 	and.w	r2, r2, #3
 8001f40:	0092      	lsls	r2, r2, #2
 8001f42:	4093      	lsls	r3, r2
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f4a:	492f      	ldr	r1, [pc, #188]	@ (8002008 <HAL_GPIO_Init+0x2bc>)
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	492c      	ldr	r1, [pc, #176]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f72:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4928      	ldr	r1, [pc, #160]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f8c:	4b23      	ldr	r3, [pc, #140]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4922      	ldr	r1, [pc, #136]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f9a:	4b20      	ldr	r3, [pc, #128]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	491e      	ldr	r1, [pc, #120]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fb4:	4b19      	ldr	r3, [pc, #100]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4918      	ldr	r1, [pc, #96]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fc2:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4914      	ldr	r1, [pc, #80]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d021      	beq.n	8002020 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	490e      	ldr	r1, [pc, #56]	@ (800201c <HAL_GPIO_Init+0x2d0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e021      	b.n	800202e <HAL_GPIO_Init+0x2e2>
 8001fea:	bf00      	nop
 8001fec:	10320000 	.word	0x10320000
 8001ff0:	10310000 	.word	0x10310000
 8001ff4:	10220000 	.word	0x10220000
 8001ff8:	10210000 	.word	0x10210000
 8001ffc:	10120000 	.word	0x10120000
 8002000:	10110000 	.word	0x10110000
 8002004:	40021000 	.word	0x40021000
 8002008:	40010000 	.word	0x40010000
 800200c:	40010800 	.word	0x40010800
 8002010:	40010c00 	.word	0x40010c00
 8002014:	40011000 	.word	0x40011000
 8002018:	40011400 	.word	0x40011400
 800201c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	43db      	mvns	r3, r3
 8002028:	4909      	ldr	r1, [pc, #36]	@ (8002050 <HAL_GPIO_Init+0x304>)
 800202a:	4013      	ands	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	3301      	adds	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	f47f ae8e 	bne.w	8001d60 <HAL_GPIO_Init+0x14>
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	372c      	adds	r7, #44	@ 0x2c
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	611a      	str	r2, [r3, #16]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e272      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8087 	beq.w	80021b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a4:	4b92      	ldr	r3, [pc, #584]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d00c      	beq.n	80020ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b0:	4b8f      	ldr	r3, [pc, #572]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d112      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5e>
 80020bc:	4b8c      	ldr	r3, [pc, #560]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c8:	d10b      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ca:	4b89      	ldr	r3, [pc, #548]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d06c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x12c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d168      	bne.n	80021b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e24c      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x76>
 80020ec:	4b80      	ldr	r3, [pc, #512]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a7f      	ldr	r2, [pc, #508]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	e02e      	b.n	8002158 <HAL_RCC_OscConfig+0xd4>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x98>
 8002102:	4b7b      	ldr	r3, [pc, #492]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7a      	ldr	r2, [pc, #488]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b78      	ldr	r3, [pc, #480]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a77      	ldr	r2, [pc, #476]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002114:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e01d      	b.n	8002158 <HAL_RCC_OscConfig+0xd4>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0xbc>
 8002126:	4b72      	ldr	r3, [pc, #456]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a71      	ldr	r2, [pc, #452]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 800212c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b6f      	ldr	r3, [pc, #444]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6e      	ldr	r2, [pc, #440]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0xd4>
 8002140:	4b6b      	ldr	r3, [pc, #428]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a6a      	ldr	r2, [pc, #424]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b68      	ldr	r3, [pc, #416]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a67      	ldr	r2, [pc, #412]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fce2 	bl	8001b28 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fcde 	bl	8001b28 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	@ 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e200      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	4b5d      	ldr	r3, [pc, #372]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0xe4>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fcce 	bl	8001b28 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff fcca 	bl	8001b28 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1ec      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	4b53      	ldr	r3, [pc, #332]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x10c>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d063      	beq.n	8002286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021be:	4b4c      	ldr	r3, [pc, #304]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ca:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d11c      	bne.n	8002210 <HAL_RCC_OscConfig+0x18c>
 80021d6:	4b46      	ldr	r3, [pc, #280]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d116      	bne.n	8002210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e2:	4b43      	ldr	r3, [pc, #268]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x176>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e1c0      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fa:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4939      	ldr	r1, [pc, #228]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	e03a      	b.n	8002286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002218:	4b36      	ldr	r3, [pc, #216]	@ (80022f4 <HAL_RCC_OscConfig+0x270>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7ff fc83 	bl	8001b28 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002226:	f7ff fc7f 	bl	8001b28 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1a1      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002244:	4b2a      	ldr	r3, [pc, #168]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4927      	ldr	r1, [pc, #156]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	e015      	b.n	8002286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225a:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <HAL_RCC_OscConfig+0x270>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fc62 	bl	8001b28 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002268:	f7ff fc5e 	bl	8001b28 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e180      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d03a      	beq.n	8002308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d019      	beq.n	80022ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229a:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <HAL_RCC_OscConfig+0x274>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7ff fc42 	bl	8001b28 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a8:	f7ff fc3e 	bl	8001b28 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e160      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f000 face 	bl	8002868 <RCC_Delay>
 80022cc:	e01c      	b.n	8002308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_RCC_OscConfig+0x274>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7ff fc28 	bl	8001b28 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022da:	e00f      	b.n	80022fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff fc24 	bl	8001b28 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d908      	bls.n	80022fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e146      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	42420000 	.word	0x42420000
 80022f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	4b92      	ldr	r3, [pc, #584]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e9      	bne.n	80022dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a6 	beq.w	8002462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231a:	4b8b      	ldr	r3, [pc, #556]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10d      	bne.n	8002342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	4b88      	ldr	r3, [pc, #544]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4a87      	ldr	r2, [pc, #540]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	61d3      	str	r3, [r2, #28]
 8002332:	4b85      	ldr	r3, [pc, #532]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b82      	ldr	r3, [pc, #520]	@ (800254c <HAL_RCC_OscConfig+0x4c8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d118      	bne.n	8002380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b7f      	ldr	r3, [pc, #508]	@ (800254c <HAL_RCC_OscConfig+0x4c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a7e      	ldr	r2, [pc, #504]	@ (800254c <HAL_RCC_OscConfig+0x4c8>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7ff fbe5 	bl	8001b28 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7ff fbe1 	bl	8001b28 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b64      	cmp	r3, #100	@ 0x64
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e103      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	4b75      	ldr	r3, [pc, #468]	@ (800254c <HAL_RCC_OscConfig+0x4c8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x312>
 8002388:	4b6f      	ldr	r3, [pc, #444]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a6e      	ldr	r2, [pc, #440]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	e02d      	b.n	80023f2 <HAL_RCC_OscConfig+0x36e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x334>
 800239e:	4b6a      	ldr	r3, [pc, #424]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4a69      	ldr	r2, [pc, #420]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6213      	str	r3, [r2, #32]
 80023aa:	4b67      	ldr	r3, [pc, #412]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a66      	ldr	r2, [pc, #408]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f023 0304 	bic.w	r3, r3, #4
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	e01c      	b.n	80023f2 <HAL_RCC_OscConfig+0x36e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d10c      	bne.n	80023da <HAL_RCC_OscConfig+0x356>
 80023c0:	4b61      	ldr	r3, [pc, #388]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4a60      	ldr	r2, [pc, #384]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	f043 0304 	orr.w	r3, r3, #4
 80023ca:	6213      	str	r3, [r2, #32]
 80023cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	e00b      	b.n	80023f2 <HAL_RCC_OscConfig+0x36e>
 80023da:	4b5b      	ldr	r3, [pc, #364]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a5a      	ldr	r2, [pc, #360]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	4b58      	ldr	r3, [pc, #352]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a57      	ldr	r2, [pc, #348]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d015      	beq.n	8002426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fa:	f7ff fb95 	bl	8001b28 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7ff fb91 	bl	8001b28 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0b1      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	4b4b      	ldr	r3, [pc, #300]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ee      	beq.n	8002402 <HAL_RCC_OscConfig+0x37e>
 8002424:	e014      	b.n	8002450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7ff fb7f 	bl	8001b28 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7ff fb7b 	bl	8001b28 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e09b      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002444:	4b40      	ldr	r3, [pc, #256]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ee      	bne.n	800242e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4b3c      	ldr	r3, [pc, #240]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4a3b      	ldr	r2, [pc, #236]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8087 	beq.w	800257a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246c:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d061      	beq.n	800253c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d146      	bne.n	800250e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002480:	4b33      	ldr	r3, [pc, #204]	@ (8002550 <HAL_RCC_OscConfig+0x4cc>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7ff fb4f 	bl	8001b28 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248e:	f7ff fb4b 	bl	8001b28 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e06d      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a0:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b4:	d108      	bne.n	80024c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024b6:	4b24      	ldr	r3, [pc, #144]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4921      	ldr	r1, [pc, #132]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a19      	ldr	r1, [r3, #32]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	430b      	orrs	r3, r1
 80024da:	491b      	ldr	r1, [pc, #108]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <HAL_RCC_OscConfig+0x4cc>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7ff fb1f 	bl	8001b28 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ee:	f7ff fb1b 	bl	8001b28 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e03d      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002500:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x46a>
 800250c:	e035      	b.n	800257a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <HAL_RCC_OscConfig+0x4cc>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff fb08 	bl	8001b28 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251c:	f7ff fb04 	bl	8001b28 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e026      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x498>
 800253a:	e01e      	b.n	800257a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e019      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
 8002550:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_RCC_OscConfig+0x500>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	429a      	cmp	r2, r3
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000

08002588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0d0      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b6a      	ldr	r3, [pc, #424]	@ (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b67      	ldr	r3, [pc, #412]	@ (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	4965      	ldr	r1, [pc, #404]	@ (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b63      	ldr	r3, [pc, #396]	@ (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b8      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	4b59      	ldr	r3, [pc, #356]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a58      	ldr	r2, [pc, #352]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025fc:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a52      	ldr	r2, [pc, #328]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002606:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b50      	ldr	r3, [pc, #320]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	494d      	ldr	r1, [pc, #308]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d040      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d115      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e07f      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b41      	ldr	r3, [pc, #260]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e073      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e06b      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b39      	ldr	r3, [pc, #228]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4936      	ldr	r1, [pc, #216]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7ff fa56 	bl	8001b28 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7ff fa52 	bl	8001b28 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e053      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 020c 	and.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1eb      	bne.n	8002680 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b27      	ldr	r3, [pc, #156]	@ (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d210      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4922      	ldr	r1, [pc, #136]	@ (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e032      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b19      	ldr	r3, [pc, #100]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4916      	ldr	r1, [pc, #88]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002702:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	490e      	ldr	r1, [pc, #56]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002716:	f000 f821 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800271a:	4602      	mov	r2, r0
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	490a      	ldr	r1, [pc, #40]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	5ccb      	ldrb	r3, [r1, r3]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <HAL_RCC_ClockConfig+0x1cc>)
 8002730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_ClockConfig+0x1d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f9b4 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40022000 	.word	0x40022000
 800274c:	40021000 	.word	0x40021000
 8002750:	08007284 	.word	0x08007284
 8002754:	20000004 	.word	0x20000004
 8002758:	20000008 	.word	0x20000008

0800275c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002776:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b04      	cmp	r3, #4
 8002784:	d002      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x30>
 8002786:	2b08      	cmp	r3, #8
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x36>
 800278a:	e027      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800278e:	613b      	str	r3, [r7, #16]
      break;
 8002790:	e027      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	0c9b      	lsrs	r3, r3, #18
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	4a17      	ldr	r2, [pc, #92]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d010      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0c5b      	lsrs	r3, r3, #17
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	4a11      	ldr	r2, [pc, #68]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a0d      	ldr	r2, [pc, #52]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80027be:	fb03 f202 	mul.w	r2, r3, r2
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e004      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002800 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	613b      	str	r3, [r7, #16]
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80027de:	613b      	str	r3, [r7, #16]
      break;
 80027e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e2:	693b      	ldr	r3, [r7, #16]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	007a1200 	.word	0x007a1200
 80027f8:	0800729c 	.word	0x0800729c
 80027fc:	080072ac 	.word	0x080072ac
 8002800:	003d0900 	.word	0x003d0900

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b02      	ldr	r3, [pc, #8]	@ (8002814 <HAL_RCC_GetHCLKFreq+0x10>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	20000004 	.word	0x20000004

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800281c:	f7ff fff2 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4903      	ldr	r1, [pc, #12]	@ (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	08007294 	.word	0x08007294

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002844:	f7ff ffde 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	0adb      	lsrs	r3, r3, #11
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	@ (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	08007294 	.word	0x08007294

08002868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002870:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <RCC_Delay+0x34>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <RCC_Delay+0x38>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a5b      	lsrs	r3, r3, #9
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002884:	bf00      	nop
  }
  while (Delay --);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	60fa      	str	r2, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f9      	bne.n	8002884 <RCC_Delay+0x1c>
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000004 	.word	0x20000004
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e076      	b.n	80029a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028c6:	d009      	beq.n	80028dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
 80028ce:	e005      	b.n	80028dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe ff4c 	bl	8001794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002960:	ea42 0103 	orr.w	r1, r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	0c1a      	lsrs	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f002 0204 	and.w	r2, r2, #4
 8002982:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002992:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	@ 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029ba:	2301      	movs	r3, #1
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029be:	f7ff f8b3 	bl	8001b28 <HAL_GetTick>
 80029c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029d6:	7ffb      	ldrb	r3, [r7, #31]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d00c      	beq.n	80029f6 <HAL_SPI_TransmitReceive+0x4a>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029e2:	d106      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d102      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x46>
 80029ec:	7ffb      	ldrb	r3, [r7, #31]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d001      	beq.n	80029f6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
 80029f4:	e17f      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x5c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x5c>
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e174      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_SPI_TransmitReceive+0x6e>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e16d      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d003      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	887a      	ldrh	r2, [r7, #2]
 8002a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	887a      	ldrh	r2, [r7, #2]
 8002a5e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a76:	2b40      	cmp	r3, #64	@ 0x40
 8002a78:	d007      	beq.n	8002a8a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a92:	d17e      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_TransmitReceive+0xf6>
 8002a9c:	8afb      	ldrh	r3, [r7, #22]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d16c      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	1c9a      	adds	r2, r3, #2
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac6:	e059      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d11b      	bne.n	8002b0e <HAL_SPI_TransmitReceive+0x162>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d016      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x162>
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d113      	bne.n	8002b0e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	881a      	ldrh	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	1c9a      	adds	r2, r3, #2
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d119      	bne.n	8002b50 <HAL_SPI_TransmitReceive+0x1a4>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b30:	b292      	uxth	r2, r2
 8002b32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b38:	1c9a      	adds	r2, r3, #2
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b50:	f7fe ffea 	bl	8001b28 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d80d      	bhi.n	8002b7c <HAL_SPI_TransmitReceive+0x1d0>
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d009      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0bc      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1a0      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x11c>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d19b      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x11c>
 8002b90:	e082      	b.n	8002c98 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_TransmitReceive+0x1f4>
 8002b9a:	8afb      	ldrh	r3, [r7, #22]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d171      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bc6:	e05d      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d11c      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x264>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x264>
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d114      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d119      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x2a6>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d014      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c52:	f7fe ff69 	bl	8001b28 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d803      	bhi.n	8002c6a <HAL_SPI_TransmitReceive+0x2be>
 8002c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d102      	bne.n	8002c70 <HAL_SPI_TransmitReceive+0x2c4>
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e038      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d19c      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x21c>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d197      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f8b7 	bl	8002e10 <SPI_EndRxTxTransaction>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e01d      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3728      	adds	r7, #40	@ 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d10:	f7fe ff0a 	bl	8001b28 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d20:	f7fe ff02 	bl	8001b28 <HAL_GetTick>
 8002d24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d26:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	015b      	lsls	r3, r3, #5
 8002d2c:	0d1b      	lsrs	r3, r3, #20
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d36:	e054      	b.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d050      	beq.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d40:	f7fe fef2 	bl	8001b28 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d902      	bls.n	8002d56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d13d      	bne.n	8002dd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d6e:	d111      	bne.n	8002d94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d78:	d004      	beq.n	8002d84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d82:	d107      	bne.n	8002d94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d9c:	d10f      	bne.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e017      	b.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d19b      	bne.n	8002d38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000004 	.word	0x20000004

08002e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2201      	movs	r2, #1
 8002e24:	2102      	movs	r1, #2
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff ff6a 	bl	8002d00 <SPI_WaitFlagStateUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e013      	b.n	8002e6a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2180      	movs	r1, #128	@ 0x80
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff ff57 	bl	8002d00 <SPI_WaitFlagStateUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e000      	b.n	8002e6a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e042      	b.n	8002f0a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fe fcc5 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2224      	movs	r2, #36	@ 0x24
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f972 	bl	80031a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b08a      	sub	sp, #40	@ 0x28
 8002f16:	af02      	add	r7, sp, #8
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d175      	bne.n	800301e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_UART_Transmit+0x2c>
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06e      	b.n	8003020 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2221      	movs	r2, #33	@ 0x21
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fdea 	bl	8001b28 <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f6a:	d108      	bne.n	8002f7e <HAL_UART_Transmit+0x6c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	e003      	b.n	8002f86 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f86:	e02e      	b.n	8002fe6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2180      	movs	r1, #128	@ 0x80
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f848 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e03a      	b.n	8003020 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fbe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	e007      	b.n	8002fd8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	781a      	ldrb	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1cb      	bne.n	8002f88 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2140      	movs	r1, #64	@ 0x40
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f814 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e006      	b.n	8003020 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003038:	e03b      	b.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d037      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fe fd71 	bl	8001b28 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <UART_WaitOnFlagUntilTimeout+0x30>
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e03a      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d023      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b80      	cmp	r3, #128	@ 0x80
 800306e:	d020      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b40      	cmp	r3, #64	@ 0x40
 8003074:	d01d      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d116      	bne.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f81d 	bl	80030da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2208      	movs	r2, #8
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4013      	ands	r3, r2
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d0b4      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030da:	b480      	push	{r7}
 80030dc:	b095      	sub	sp, #84	@ 0x54
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	330c      	adds	r3, #12
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003102:	643a      	str	r2, [r7, #64]	@ 0x40
 8003104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e5      	bne.n	80030e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	61fb      	str	r3, [r7, #28]
   return(result);
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003138:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800313c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e5      	bne.n	8003116 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	2b01      	cmp	r3, #1
 8003150:	d119      	bne.n	8003186 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	60bb      	str	r3, [r7, #8]
   return(result);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	647b      	str	r3, [r7, #68]	@ 0x44
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003172:	61ba      	str	r2, [r7, #24]
 8003174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6979      	ldr	r1, [r7, #20]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	613b      	str	r3, [r7, #16]
   return(result);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e5      	bne.n	8003152 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003194:	bf00      	nop
 8003196:	3754      	adds	r7, #84	@ 0x54
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
	...

080031a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031da:	f023 030c 	bic.w	r3, r3, #12
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <UART_SetConfig+0x114>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d103      	bne.n	8003210 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff fb1a 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	e002      	b.n	8003216 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff fb02 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8003214:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <UART_SetConfig+0x118>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	0119      	lsls	r1, r3, #4
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fbb2 f2f3 	udiv	r2, r2, r3
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <UART_SetConfig+0x118>)
 800324e:	fba3 0302 	umull	r0, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2064      	movs	r0, #100	@ 0x64
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	3332      	adds	r3, #50	@ 0x32
 8003260:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <UART_SetConfig+0x118>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800326c:	4419      	add	r1, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fbb2 f2f3 	udiv	r2, r2, r3
 8003284:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <UART_SetConfig+0x118>)
 8003286:	fba3 0302 	umull	r0, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2064      	movs	r0, #100	@ 0x64
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	@ 0x32
 8003298:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <UART_SetConfig+0x118>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	440a      	add	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40013800 	.word	0x40013800
 80032b8:	51eb851f 	.word	0x51eb851f

080032bc <BCC_WakeUpPatternSpi>:
 * Function Name : BCC_WakeUpPatternSpi
 * Description   : This function does a transition of CSB from low to high.
 *
 *END**************************************************************************/
static inline void BCC_WakeUpPatternSpi(const bcc_drv_config_t* const drvConfig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    /* A transition of CSB from low to high. */
    /* CSB low for 80 us (65 us would be sufficient for MC33772C). */
    BCC_MCU_WriteCsbPin(drvConfig->drvInstance, 0);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 feb4 	bl	8005038 <BCC_MCU_WriteCsbPin>
    BCC_MCU_WaitUs(44);
 80032d0:	202c      	movs	r0, #44	@ 0x2c
 80032d2:	f001 fefa 	bl	80050ca <BCC_MCU_WaitUs>

    /* CSB high for 440 us. */
    BCC_MCU_WriteCsbPin(drvConfig->drvInstance, 1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 feab 	bl	8005038 <BCC_MCU_WriteCsbPin>
    BCC_MCU_WaitUs(44);
 80032e2:	202c      	movs	r0, #44	@ 0x2c
 80032e4:	f001 fef1 	bl	80050ca <BCC_MCU_WaitUs>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <BCC_WakeUpPatternTpl>:
 * Description   : This function does two consecutive transitions of CSB_TX from
 *                 low to high.
 *
 *END**************************************************************************/
static inline void BCC_WakeUpPatternTpl(const bcc_drv_config_t* const drvConfig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    /* CSB_TX low for 25 us. */
    BCC_MCU_WriteCsbPin(drvConfig->drvInstance, 0);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 fe9a 	bl	8005038 <BCC_MCU_WriteCsbPin>
    BCC_MCU_WaitUs(BCC_WAKE_PULSE_US);
 8003304:	2019      	movs	r0, #25
 8003306:	f001 fee0 	bl	80050ca <BCC_MCU_WaitUs>

    /* CSB_TX high for 600 us. */
    BCC_MCU_WriteCsbPin(drvConfig->drvInstance, 1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2101      	movs	r1, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f001 fe91 	bl	8005038 <BCC_MCU_WriteCsbPin>
    BCC_MCU_WaitUs(BCC_T_WAKE_DELAY_US);
 8003316:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800331a:	f001 fed6 	bl	80050ca <BCC_MCU_WaitUs>

    /* CSB_TX low for 25 us. */
    BCC_MCU_WriteCsbPin(drvConfig->drvInstance, 0);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fe87 	bl	8005038 <BCC_MCU_WriteCsbPin>
    BCC_MCU_WaitUs(BCC_WAKE_PULSE_US);
 800332a:	2019      	movs	r0, #25
 800332c:	f001 fecd 	bl	80050ca <BCC_MCU_WaitUs>

    /* CSB_TX high. */
    BCC_MCU_WriteCsbPin(drvConfig->drvInstance, 1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f001 fe7e 	bl	8005038 <BCC_MCU_WriteCsbPin>
    /* Time to switch Sleep mode to normal mode after TPL bus wake-up. */
    BCC_MCU_WaitUs(BCC_T_WU_WAIT_US * drvConfig->devicesCnt);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	789b      	ldrb	r3, [r3, #2]
 8003340:	461a      	mov	r2, r3
 8003342:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	4618      	mov	r0, r3
 800334c:	f001 febd 	bl	80050ca <BCC_MCU_WaitUs>
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <BCC_AssignCid>:
 *                 to zero.
 *
 *END**************************************************************************/
static bcc_status_t BCC_AssignCid(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
    /* Check if unassigned node replies. This is the first reading after device
     * reset. */
    /* Note: In SPI communication mode, the device responds with all bit filed
     * set to zero except message counter and the correct CRC to the very first
     * MCU <-> MC33771C/772C message. */
    status = BCC_Reg_Read(drvConfig, BCC_CID_UNASSIG, MC33771C_INIT_OFFSET, 1U, &readVal);
 8003364:	f107 030a 	add.w	r3, r7, #10
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2301      	movs	r3, #1
 800336c:	2201      	movs	r2, #1
 800336e:	2100      	movs	r1, #0
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f9e0 	bl	8003736 <BCC_Reg_Read>
 8003376:	4603      	mov	r3, r0
 8003378:	737b      	strb	r3, [r7, #13]
    if ((status != BCC_STATUS_SUCCESS) && (status != BCC_STATUS_COM_NULL))
 800337a:	7b7b      	ldrb	r3, [r7, #13]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <BCC_AssignCid+0x32>
 8003380:	7b7b      	ldrb	r3, [r7, #13]
 8003382:	2b07      	cmp	r3, #7
 8003384:	d001      	beq.n	800338a <BCC_AssignCid+0x32>
    {
        return status;
 8003386:	7b7b      	ldrb	r3, [r7, #13]
 8003388:	e099      	b.n	80034be <BCC_AssignCid+0x166>

    /* Assign CID;
     * Terminate RDTX_OUT of the last node in TPL setup without loop-back.
     * Stop forwarding only for MC33772C in TPL setup with one node and no
     * loop-back. RDTX_OUT should not be terminated in this case. */
    writeVal = MC33771C_INIT_CID(cid) |
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003392:	81fb      	strh	r3, [r7, #14]
               MC33771C_INIT_RDTX_IN(MC33771C_INIT_RDTX_IN_DISABLED_ENUM_VAL);
    if ((drvConfig->commMode == BCC_MODE_TPL) &&
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d117      	bne.n	80033cc <BCC_AssignCid+0x74>
        (drvConfig->devicesCnt == 1U) &&
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	789b      	ldrb	r3, [r3, #2]
    if ((drvConfig->commMode == BCC_MODE_TPL) &&
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d113      	bne.n	80033cc <BCC_AssignCid+0x74>
        (!drvConfig->loopBack) &&
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80033aa:	f083 0301 	eor.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
        (drvConfig->devicesCnt == 1U) &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <BCC_AssignCid+0x74>
        (drvConfig->device[(uint8_t)cid - 1] == BCC_DEVICE_MC33772C))
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	78db      	ldrb	r3, [r3, #3]
        (!drvConfig->loopBack) &&
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d104      	bne.n	80033cc <BCC_AssignCid+0x74>
    {
        writeVal |= MC33772C_INIT_TPL2_TX_TERM(MC33772C_INIT_TPL2_TX_TERM_DISABLED_ENUM_VAL) |
 80033c2:	89fb      	ldrh	r3, [r7, #14]
 80033c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c8:	81fb      	strh	r3, [r7, #14]
 80033ca:	e021      	b.n	8003410 <BCC_AssignCid+0xb8>
                    MC33772C_INIT_BUS_FW(MC33772C_INIT_BUS_FW_DISABLED_ENUM_VAL);
    }
    else if ((drvConfig->commMode == BCC_MODE_TPL) &&
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d117      	bne.n	8003404 <BCC_AssignCid+0xac>
             ((uint8_t)cid == drvConfig->devicesCnt) &&
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	789b      	ldrb	r3, [r3, #2]
    else if ((drvConfig->commMode == BCC_MODE_TPL) &&
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d112      	bne.n	8003404 <BCC_AssignCid+0xac>
             (!drvConfig->loopBack))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80033e4:	f083 0301 	eor.w	r3, r3, #1
 80033e8:	b2db      	uxtb	r3, r3
             ((uint8_t)cid == drvConfig->devicesCnt) &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <BCC_AssignCid+0xac>
    {
        writeVal |= MC33771C_INIT_RDTX_OUT(MC33771C_INIT_RDTX_OUT_ENABLED_ENUM_VAL);
 80033ee:	89fb      	ldrh	r3, [r7, #14]
 80033f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033f4:	81fb      	strh	r3, [r7, #14]

        if (drvConfig->device[(uint8_t)cid - 1] == BCC_DEVICE_MC33772C)
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	78db      	ldrb	r3, [r3, #3]
 8003400:	2b01      	cmp	r3, #1
 8003402:	e005      	b.n	8003410 <BCC_AssignCid+0xb8>
    }
    else
    {
        writeVal |= MC33771C_INIT_RDTX_OUT(MC33771C_INIT_RDTX_OUT_DISABLED_ENUM_VAL);

        if (drvConfig->device[(uint8_t)cid - 1] == BCC_DEVICE_MC33772C)
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	3b01      	subs	r3, #1
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4413      	add	r3, r2
 800340c:	78db      	ldrb	r3, [r3, #3]
 800340e:	2b01      	cmp	r3, #1
        {
            writeVal |= MC33772C_INIT_BUS_FW(MC33772C_INIT_BUS_FW_ENABLED_ENUM_VAL);
        }
    }

    status = BCC_Reg_Write(drvConfig, BCC_CID_UNASSIG, MC33771C_INIT_OFFSET, writeVal);
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	2201      	movs	r2, #1
 8003414:	2100      	movs	r1, #0
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f9ad 	bl	8003776 <BCC_Reg_Write>
 800341c:	4603      	mov	r3, r0
 800341e:	737b      	strb	r3, [r7, #13]
    if (status == BCC_STATUS_SUCCESS)
 8003420:	7b7b      	ldrb	r3, [r7, #13]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11c      	bne.n	8003460 <BCC_AssignCid+0x108>
        /* Store the last received message counter value from device with CID=0
         * into drvConfig for appropriate (newly assigned) CID.
         * Note: In TPL mode, a response is generated only for read commands,
         * i.e. message counter is incremented only by read commands. In SPI mode,
         * message counter was incremented also by the write command! */
        drvConfig->drvData.msgCntr[(uint8_t)cid] = drvConfig->drvData.msgCntr[0];
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	f892 1140 	ldrb.w	r1, [r2, #320]	@ 0x140
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	460a      	mov	r2, r1
 8003434:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140

        /* Check if assigned node replies. */
        status = BCC_Reg_Read(drvConfig, cid, MC33771C_INIT_OFFSET, 1U, &readVal);
 8003438:	78f9      	ldrb	r1, [r7, #3]
 800343a:	f107 030a 	add.w	r3, r7, #10
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2301      	movs	r3, #1
 8003442:	2201      	movs	r2, #1
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f976 	bl	8003736 <BCC_Reg_Read>
 800344a:	4603      	mov	r3, r0
 800344c:	737b      	strb	r3, [r7, #13]

        /* Check the written data. */
        if ((status == BCC_STATUS_SUCCESS) && (writeVal != readVal))
 800344e:	7b7b      	ldrb	r3, [r7, #13]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <BCC_AssignCid+0x108>
 8003454:	897b      	ldrh	r3, [r7, #10]
 8003456:	89fa      	ldrh	r2, [r7, #14]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <BCC_AssignCid+0x108>
        {
            status = BCC_STATUS_SPI_FAIL;
 800345c:	2302      	movs	r3, #2
 800345e:	737b      	strb	r3, [r7, #13]
        }
    }

    if (status != BCC_STATUS_SUCCESS)
 8003460:	7b7b      	ldrb	r3, [r7, #13]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02a      	beq.n	80034bc <BCC_AssignCid+0x164>
    {
        /* Wait and try to assign CID once again. */
        BCC_MCU_WaitUs(75U);
 8003466:	204b      	movs	r0, #75	@ 0x4b
 8003468:	f001 fe2f 	bl	80050ca <BCC_MCU_WaitUs>

        status = BCC_Reg_Write(drvConfig, BCC_CID_UNASSIG, MC33771C_INIT_OFFSET, writeVal);
 800346c:	89fb      	ldrh	r3, [r7, #14]
 800346e:	2201      	movs	r2, #1
 8003470:	2100      	movs	r1, #0
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f97f 	bl	8003776 <BCC_Reg_Write>
 8003478:	4603      	mov	r3, r0
 800347a:	737b      	strb	r3, [r7, #13]
        if (status == BCC_STATUS_SUCCESS)
 800347c:	7b7b      	ldrb	r3, [r7, #13]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11c      	bne.n	80034bc <BCC_AssignCid+0x164>
        {
            /* Store the last message counter value into drvConfig for appropriate CID.
             * Note: In TPL mode, a response is generated only for read commands. i.e. message
             * counter is incremented only by them. In SPI mode, message counter is
             * incremented by all types of commands! */
            drvConfig->drvData.msgCntr[(uint8_t)cid] = drvConfig->drvData.msgCntr[0];
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	f892 1140 	ldrb.w	r1, [r2, #320]	@ 0x140
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	460a      	mov	r2, r1
 8003490:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140

            status = BCC_Reg_Read(drvConfig, cid, MC33771C_INIT_OFFSET, 1U, &readVal);
 8003494:	78f9      	ldrb	r1, [r7, #3]
 8003496:	f107 030a 	add.w	r3, r7, #10
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2301      	movs	r3, #1
 800349e:	2201      	movs	r2, #1
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f948 	bl	8003736 <BCC_Reg_Read>
 80034a6:	4603      	mov	r3, r0
 80034a8:	737b      	strb	r3, [r7, #13]

            /* Check the written data. */
            if ((status == BCC_STATUS_SUCCESS) && (writeVal != readVal))
 80034aa:	7b7b      	ldrb	r3, [r7, #13]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <BCC_AssignCid+0x164>
 80034b0:	897b      	ldrh	r3, [r7, #10]
 80034b2:	89fa      	ldrh	r2, [r7, #14]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <BCC_AssignCid+0x164>
            {
                status = BCC_STATUS_SPI_FAIL;
 80034b8:	2302      	movs	r3, #2
 80034ba:	737b      	strb	r3, [r7, #13]
            }
        }
    }

    return status;
 80034bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <BCC_InitDevices>:
 * Description   : This function wakes device(s) up, resets them (if needed),
 *                 assigns CIDs and checks the communication.
 *
 *END**************************************************************************/
static bcc_status_t BCC_InitDevices(bcc_drv_config_t* const drvConfig)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
    bcc_status_t status;

    /* Wake-up all configured devices (in case they are in SLEEP mode) or
     * move the first device (device closest to MC33664) from IDLE mode to
     * NORMAL mode (in case devices are in IDLE mode). */
    BCC_WakeUp(drvConfig);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8f5 	bl	80036be <BCC_WakeUp>
    /* Reset all configured devices (in case they are already initialized).
     * If the devices are not initialized (CID is equal to 000000b), a write
     * command is sent via communication interface, but the software reset is
     * not performed as only INIT register of uninitialized devices can be
     * written by the pack controller. */
    (void)BCC_SoftwareReset(drvConfig, (drvConfig->commMode == BCC_MODE_TPL) ? BCC_CID_UNASSIG : BCC_CID_DEV1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f8fd 	bl	80036e4 <BCC_SoftwareReset>

    /* Wait for 5 ms - for the IC to be ready for initialization. */
    BCC_MCU_WaitMs(BCC_T_VPWR_READY_MS);
 80034ea:	2005      	movs	r0, #5
 80034ec:	f001 fde0 	bl	80050b0 <BCC_MCU_WaitMs>

    /* Assign CID to the first node and terminate its RDTX_OUT if only one
     * device is utilised and if loop-back is not required. */
    status = BCC_AssignCid(drvConfig, BCC_CID_DEV1);
 80034f0:	2101      	movs	r1, #1
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ff30 	bl	8003358 <BCC_AssignCid>
 80034f8:	4603      	mov	r3, r0
 80034fa:	73fb      	strb	r3, [r7, #15]
    if (status != BCC_STATUS_SUCCESS)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <BCC_InitDevices+0x40>
    {
        return status;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	e000      	b.n	8003508 <BCC_InitDevices+0x42>
//        {
//            return status;
//        }
//    }

    return status;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <BCC_Init>:
 * Description   : This function initializes the battery cell controller
 *                 device(s), assigns CID and initializes internal driver data.
 *
 *END**************************************************************************/
bcc_status_t BCC_Init(bcc_drv_config_t* const drvConfig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
//    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);

    /* Check the drvConfig structure and initialize driver variables. */
    if ((drvConfig->commMode != BCC_MODE_SPI) &&
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <BCC_Init+0x1c>
        (drvConfig->commMode != BCC_MODE_TPL))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	785b      	ldrb	r3, [r3, #1]
    if ((drvConfig->commMode != BCC_MODE_SPI) &&
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <BCC_Init+0x1c>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003528:	2301      	movs	r3, #1
 800352a:	e08a      	b.n	8003642 <BCC_Init+0x132>
    }

    if ((drvConfig->devicesCnt == 0) ||
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	789b      	ldrb	r3, [r3, #2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <BCC_Init+0x3c>
        (drvConfig->devicesCnt > ((drvConfig->commMode == BCC_MODE_SPI) ?
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	789b      	ldrb	r3, [r3, #2]
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	785b      	ldrb	r3, [r3, #1]
                BCC_DEVICE_CNT_MAX_SPI : BCC_DEVICE_CNT_MAX_TPL)))
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <BCC_Init+0x36>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <BCC_Init+0x38>
 8003546:	233f      	movs	r3, #63	@ 0x3f
    if ((drvConfig->devicesCnt == 0) ||
 8003548:	4293      	cmp	r3, r2
 800354a:	d201      	bcs.n	8003550 <BCC_Init+0x40>
    {
        return BCC_STATUS_PARAM_RANGE;
 800354c:	2301      	movs	r3, #1
 800354e:	e078      	b.n	8003642 <BCC_Init+0x132>
    }

    for (dev = 0; dev < drvConfig->devicesCnt; dev++)
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]
 8003554:	e05e      	b.n	8003614 <BCC_Init+0x104>
    {
        drvConfig->drvData.msgCntr[dev] = 0U;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
        if (drvConfig->device[dev] == BCC_DEVICE_MC33771C)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	78db      	ldrb	r3, [r3, #3]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d123      	bne.n	80035b6 <BCC_Init+0xa6>
        {
            if (!BCC_IS_IN_RANGE(drvConfig->cellCnt[dev], MC33771C_MIN_CELLS, MC33771C_MAX_CELLS))
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	3320      	adds	r3, #32
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	885b      	ldrh	r3, [r3, #2]
 800357a:	2b06      	cmp	r3, #6
 800357c:	d907      	bls.n	800358e <BCC_Init+0x7e>
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	3320      	adds	r3, #32
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	885b      	ldrh	r3, [r3, #2]
 800358a:	2b0e      	cmp	r3, #14
 800358c:	d901      	bls.n	8003592 <BCC_Init+0x82>
            {
                return BCC_STATUS_PARAM_RANGE;
 800358e:	2301      	movs	r3, #1
 8003590:	e057      	b.n	8003642 <BCC_Init+0x132>
            }
            drvConfig->drvData.cellMap[dev] = s_cellMap33771c[drvConfig->cellCnt[dev]];
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	3320      	adds	r3, #32
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	885b      	ldrh	r3, [r3, #2]
 800359e:	4619      	mov	r1, r3
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	4a2a      	ldr	r2, [pc, #168]	@ (800364c <BCC_Init+0x13c>)
 80035a4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	3360      	adds	r3, #96	@ 0x60
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	460a      	mov	r2, r1
 80035b2:	805a      	strh	r2, [r3, #2]
 80035b4:	e02b      	b.n	800360e <BCC_Init+0xfe>
        }
        else if (drvConfig->device[dev] == BCC_DEVICE_MC33772C)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	78db      	ldrb	r3, [r3, #3]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d123      	bne.n	800360a <BCC_Init+0xfa>
        {
            if (!BCC_IS_IN_RANGE(drvConfig->cellCnt[dev], MC33772C_MIN_CELLS, MC33772C_MAX_CELLS))
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	3320      	adds	r3, #32
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	885b      	ldrh	r3, [r3, #2]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d907      	bls.n	80035e2 <BCC_Init+0xd2>
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	3320      	adds	r3, #32
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	885b      	ldrh	r3, [r3, #2]
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d901      	bls.n	80035e6 <BCC_Init+0xd6>
            {
                return BCC_STATUS_PARAM_RANGE;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e02d      	b.n	8003642 <BCC_Init+0x132>
            }
            drvConfig->drvData.cellMap[dev] = s_cellMap33772c[drvConfig->cellCnt[dev]];
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	3320      	adds	r3, #32
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	885b      	ldrh	r3, [r3, #2]
 80035f2:	4619      	mov	r1, r3
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	4a16      	ldr	r2, [pc, #88]	@ (8003650 <BCC_Init+0x140>)
 80035f8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	3360      	adds	r3, #96	@ 0x60
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	460a      	mov	r2, r1
 8003606:	805a      	strh	r2, [r3, #2]
 8003608:	e001      	b.n	800360e <BCC_Init+0xfe>
        }
        else
        {
            return BCC_STATUS_PARAM_RANGE;
 800360a:	2301      	movs	r3, #1
 800360c:	e019      	b.n	8003642 <BCC_Init+0x132>
    for (dev = 0; dev < drvConfig->devicesCnt; dev++)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	3301      	adds	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	789b      	ldrb	r3, [r3, #2]
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	429a      	cmp	r2, r3
 800361c:	d39b      	bcc.n	8003556 <BCC_Init+0x46>
        }
    }
    drvConfig->drvData.msgCntr[drvConfig->devicesCnt] = 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	789b      	ldrb	r3, [r3, #2]
 8003622:	461a      	mov	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140

    /* Set RESET pin inactive (RESET -> 0). */
    BCC_MCU_WriteRstPin(drvConfig->drvInstance, 0);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fceb 	bl	8005010 <BCC_MCU_WriteRstPin>
//        }
//    }

    /* Wake-up BCCs (in case of idle/sleep mode), reset them, assign CID and
     * check communication with configured devices. */
    return BCC_InitDevices(drvConfig);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ff43 	bl	80034c6 <BCC_InitDevices>
 8003640:	4603      	mov	r3, r0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	080072b0 	.word	0x080072b0
 8003650:	080072d0 	.word	0x080072d0

08003654 <BCC_SendNop>:
 * Function Name : BCC_SendNop
 * Description   : This function sends No Operation command the to BCC device.
 *
 *END**************************************************************************/
bcc_status_t BCC_SendNop(bcc_drv_config_t* const drvConfig, const bcc_cid_t cid)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
//    BCC_MCU_Assert(drvConfig != NULL);

    if (drvConfig->commMode == BCC_MODE_SPI)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <BCC_SendNop+0x22>
    {
        return BCC_SendNopSpi(drvConfig, cid);
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 ff00 	bl	8004472 <BCC_SendNopSpi>
 8003672:	4603      	mov	r3, r0
 8003674:	e005      	b.n	8003682 <BCC_SendNop+0x2e>
    }
    else
    {
        return BCC_SendNopTpl(drvConfig, cid);
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fecd 	bl	800441a <BCC_SendNopTpl>
 8003680:	4603      	mov	r3, r0
    }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <BCC_Sleep>:
 * Description   : This function sets sleep mode to all battery cell controller
 *                 devices.
 *
 *END**************************************************************************/
bcc_status_t BCC_Sleep(bcc_drv_config_t* const drvConfig)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
//    BCC_MCU_Assert(drvConfig != NULL);

    if (drvConfig->commMode == BCC_MODE_SPI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	785b      	ldrb	r3, [r3, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <BCC_Sleep+0x20>
    {
        return BCC_Reg_Write(drvConfig, BCC_CID_DEV1, MC33771C_SYS_CFG_GLOBAL_OFFSET,
 800369a:	2301      	movs	r3, #1
 800369c:	2202      	movs	r2, #2
 800369e:	2101      	movs	r1, #1
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f868 	bl	8003776 <BCC_Reg_Write>
 80036a6:	4603      	mov	r3, r0
 80036a8:	e005      	b.n	80036b6 <BCC_Sleep+0x2c>
                MC33771C_SYS_CFG_GLOBAL_GO2SLEEP(MC33772C_SYS_CFG_GLOBAL_GO2SLEEP_ENABLED_ENUM_VAL));
    }
    else
    {
        return BCC_Reg_WriteGlobal(drvConfig, MC33771C_SYS_CFG_GLOBAL_OFFSET,
 80036aa:	2201      	movs	r2, #1
 80036ac:	2102      	movs	r1, #2
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f87e 	bl	80037b0 <BCC_Reg_WriteGlobal>
 80036b4:	4603      	mov	r3, r0
                MC33771C_SYS_CFG_GLOBAL_GO2SLEEP(MC33771C_SYS_CFG_GLOBAL_GO2SLEEP_ENABLED_ENUM_VAL));
    }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <BCC_WakeUp>:
 * Description   : This function sets normal mode to all battery cell controller
 *                 devices.
 *
 *END**************************************************************************/
void BCC_WakeUp(const bcc_drv_config_t* const drvConfig)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
    //BCC_MCU_Assert(drvConfig != NULL);

    if (drvConfig->commMode == BCC_MODE_SPI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <BCC_WakeUp+0x18>
    {
        BCC_WakeUpPatternSpi(drvConfig);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fdf4 	bl	80032bc <BCC_WakeUpPatternSpi>
    }
    else
    {
        BCC_WakeUpPatternTpl(drvConfig);
    }
}
 80036d4:	e002      	b.n	80036dc <BCC_WakeUp+0x1e>
        BCC_WakeUpPatternTpl(drvConfig);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fe0a 	bl	80032f0 <BCC_WakeUpPatternTpl>
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <BCC_SoftwareReset>:
 *                 enters reset via SPI or TPL interface.
 *
 *END**************************************************************************/
bcc_status_t BCC_SoftwareReset(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
    //BCC_MCU_Assert(drvConfig != NULL);

    if ((((uint8_t)cid) > drvConfig->devicesCnt) ||
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	789b      	ldrb	r3, [r3, #2]
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d806      	bhi.n	8003708 <BCC_SoftwareReset+0x24>
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <BCC_SoftwareReset+0x28>
            ((cid == BCC_CID_UNASSIG) && (drvConfig->commMode == BCC_MODE_SPI)))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <BCC_SoftwareReset+0x28>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003708:	2301      	movs	r3, #1
 800370a:	e010      	b.n	800372e <BCC_SoftwareReset+0x4a>
    }

    /* Note: it is not necessary to read content of SYS_CFG1 register and to
     * change the SOFT_RST bit only, because SYS_CFG1 will be set to POR value
     * after the reset anyway. */
    if (cid == BCC_CID_UNASSIG)
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <BCC_SoftwareReset+0x3c>
    {
        /* TPL Global reset command. */
        return BCC_Reg_WriteGlobal(drvConfig, MC33771C_SYS_CFG1_OFFSET,
 8003712:	2210      	movs	r2, #16
 8003714:	2103      	movs	r1, #3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f84a 	bl	80037b0 <BCC_Reg_WriteGlobal>
 800371c:	4603      	mov	r3, r0
 800371e:	e006      	b.n	800372e <BCC_SoftwareReset+0x4a>
                                   MC33771C_SYS_CFG1_SOFT_RST(MC33771C_SYS_CFG1_SOFT_RST_ACTIVE_ENUM_VAL));
    }
    else
    {
        return BCC_Reg_Write(drvConfig, cid, MC33771C_SYS_CFG1_OFFSET,
 8003720:	78f9      	ldrb	r1, [r7, #3]
 8003722:	2310      	movs	r3, #16
 8003724:	2203      	movs	r2, #3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f825 	bl	8003776 <BCC_Reg_Write>
 800372c:	4603      	mov	r3, r0
                             MC33771C_SYS_CFG1_SOFT_RST(MC33771C_SYS_CFG1_SOFT_RST_ACTIVE_ENUM_VAL));
    }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <BCC_Reg_Read>:
 *
 *END**************************************************************************/
bcc_status_t BCC_Reg_Read(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const uint8_t regAddr, const uint8_t regCnt,
    uint16_t* regVal)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af02      	add	r7, sp, #8
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	4608      	mov	r0, r1
 8003740:	4611      	mov	r1, r2
 8003742:	461a      	mov	r2, r3
 8003744:	4603      	mov	r3, r0
 8003746:	70fb      	strb	r3, [r7, #3]
 8003748:	460b      	mov	r3, r1
 800374a:	70bb      	strb	r3, [r7, #2]
 800374c:	4613      	mov	r3, r2
 800374e:	707b      	strb	r3, [r7, #1]
    //BCC_MCU_Assert(drvConfig != NULL);

    if (drvConfig->commMode == BCC_MODE_SPI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <BCC_Reg_Read+0x38>
    {
        return BCC_Reg_ReadSpi(drvConfig, cid, regAddr, regCnt, regVal);
 8003758:	7878      	ldrb	r0, [r7, #1]
 800375a:	78ba      	ldrb	r2, [r7, #2]
 800375c:	78f9      	ldrb	r1, [r7, #3]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	4603      	mov	r3, r0
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fd0b 	bl	8004180 <BCC_Reg_ReadSpi>
 800376a:	4603      	mov	r3, r0
 800376c:	e7ff      	b.n	800376e <BCC_Reg_Read+0x38>
    }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <BCC_Reg_Write>:
 *                 selected battery cell controller device.
 *
 *END**************************************************************************/
bcc_status_t BCC_Reg_Write(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const uint8_t regAddr, const uint16_t regVal)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	4608      	mov	r0, r1
 8003780:	4611      	mov	r1, r2
 8003782:	461a      	mov	r2, r3
 8003784:	4603      	mov	r3, r0
 8003786:	70fb      	strb	r3, [r7, #3]
 8003788:	460b      	mov	r3, r1
 800378a:	70bb      	strb	r3, [r7, #2]
 800378c:	4613      	mov	r3, r2
 800378e:	803b      	strh	r3, [r7, #0]
    //BCC_MCU_Assert(drvConfig != NULL);

    if (drvConfig->commMode == BCC_MODE_SPI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <BCC_Reg_Write+0x32>
    {
        return BCC_Reg_WriteSpi(drvConfig, cid, regAddr, regVal);
 8003798:	883b      	ldrh	r3, [r7, #0]
 800379a:	78ba      	ldrb	r2, [r7, #2]
 800379c:	78f9      	ldrb	r1, [r7, #3]
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fdd8 	bl	8004354 <BCC_Reg_WriteSpi>
 80037a4:	4603      	mov	r3, r0
 80037a6:	e7ff      	b.n	80037a8 <BCC_Reg_Write+0x32>
    }
//    else
//    {
//        return BCC_Reg_WriteTpl(drvConfig, cid, regAddr, regVal);
//    }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <BCC_Reg_WriteGlobal>:
 *                 configured BCC devices. Intended for TPL mode only.
 *
 *END**************************************************************************/
bcc_status_t BCC_Reg_WriteGlobal(bcc_drv_config_t* const drvConfig,
     const uint8_t regAddr, const uint16_t regVal)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
 80037bc:	4613      	mov	r3, r2
 80037be:	803b      	strh	r3, [r7, #0]
   // BCC_MCU_Assert(drvConfig != NULL);
    //BCC_MCU_Assert(drvConfig->commMode == BCC_MODE_TPL);

//    return BCC_Reg_WriteGlobalTpl(drvConfig, regAddr, regVal);
}
 80037c0:	bf00      	nop
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <BCC_Reg_Update>:
 *
 *END**************************************************************************/
bcc_status_t BCC_Reg_Update(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const uint8_t regAddr, const uint16_t regMask,
    const uint16_t regVal)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	70fb      	strb	r3, [r7, #3]
 80037de:	460b      	mov	r3, r1
 80037e0:	70bb      	strb	r3, [r7, #2]
 80037e2:	4613      	mov	r3, r2
 80037e4:	803b      	strh	r3, [r7, #0]
    uint16_t regValTemp;
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);

    if (((uint8_t)cid) > drvConfig->devicesCnt)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	789b      	ldrb	r3, [r3, #2]
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d901      	bls.n	80037f4 <BCC_Reg_Update+0x28>
    {
        return BCC_STATUS_PARAM_RANGE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e028      	b.n	8003846 <BCC_Reg_Update+0x7a>
    }

    status = BCC_Reg_Read(drvConfig, cid, regAddr, 1U, &regValTemp);
 80037f4:	78ba      	ldrb	r2, [r7, #2]
 80037f6:	78f9      	ldrb	r1, [r7, #3]
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2301      	movs	r3, #1
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff98 	bl	8003736 <BCC_Reg_Read>
 8003806:	4603      	mov	r3, r0
 8003808:	73fb      	strb	r3, [r7, #15]
    if (status != BCC_STATUS_SUCCESS)
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <BCC_Reg_Update+0x48>
    {
        return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	e018      	b.n	8003846 <BCC_Reg_Update+0x7a>
    }

    /* Update register value. */
    regValTemp = regValTemp & ~(regMask);
 8003814:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003818:	43db      	mvns	r3, r3
 800381a:	b21a      	sxth	r2, r3
 800381c:	89bb      	ldrh	r3, [r7, #12]
 800381e:	b21b      	sxth	r3, r3
 8003820:	4013      	ands	r3, r2
 8003822:	b21b      	sxth	r3, r3
 8003824:	b29b      	uxth	r3, r3
 8003826:	81bb      	strh	r3, [r7, #12]
    regValTemp = regValTemp | (regVal & regMask);
 8003828:	8b3a      	ldrh	r2, [r7, #24]
 800382a:	883b      	ldrh	r3, [r7, #0]
 800382c:	4013      	ands	r3, r2
 800382e:	b29a      	uxth	r2, r3
 8003830:	89bb      	ldrh	r3, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	81bb      	strh	r3, [r7, #12]

    return BCC_Reg_Write(drvConfig, cid, regAddr, regValTemp);
 8003838:	89bb      	ldrh	r3, [r7, #12]
 800383a:	78ba      	ldrb	r2, [r7, #2]
 800383c:	78f9      	ldrb	r1, [r7, #3]
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ff99 	bl	8003776 <BCC_Reg_Write>
 8003844:	4603      	mov	r3, r0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <BCC_Meas_StartConversion>:
 *                 Conversion bit in ADC_CFG register.
 *
 *END**************************************************************************/
bcc_status_t BCC_Meas_StartConversion(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const bcc_avg_t avg)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af02      	add	r7, sp, #8
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	70fb      	strb	r3, [r7, #3]
 800385a:	4613      	mov	r3, r2
 800385c:	70bb      	strb	r3, [r7, #2]
//    BCC_MCU_Assert(drvConfig != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt) ||
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <BCC_Meas_StartConversion+0x26>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	429a      	cmp	r2, r3
 800386c:	d802      	bhi.n	8003874 <BCC_Meas_StartConversion+0x26>
 800386e:	78bb      	ldrb	r3, [r7, #2]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d901      	bls.n	8003878 <BCC_Meas_StartConversion+0x2a>
            (avg > BCC_AVG_256))
    {
        return BCC_STATUS_PARAM_RANGE;
 8003874:	2301      	movs	r3, #1
 8003876:	e00f      	b.n	8003898 <BCC_Meas_StartConversion+0x4a>
    }

    return BCC_Reg_Update(drvConfig, cid, MC33771C_ADC_CFG_OFFSET,
                          MC33771C_ADC_CFG_SOC_MASK | MC33771C_ADC_CFG_AVG_MASK,
                          MC33771C_ADC_CFG_SOC(MC33771C_ADC_CFG_SOC_ENABLED_ENUM_VAL) |
                          MC33771C_ADC_CFG_AVG(avg));
 8003878:	78bb      	ldrb	r3, [r7, #2]
 800387a:	b29b      	uxth	r3, r3
 800387c:	031b      	lsls	r3, r3, #12
 800387e:	b29b      	uxth	r3, r3
    return BCC_Reg_Update(drvConfig, cid, MC33771C_ADC_CFG_OFFSET,
 8003880:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003884:	b29b      	uxth	r3, r3
 8003886:	78f9      	ldrb	r1, [r7, #3]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800388e:	2206      	movs	r2, #6
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff9b 	bl	80037cc <BCC_Reg_Update>
 8003896:	4603      	mov	r3, r0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <BCC_Meas_IsConverting>:
 *                 Conversion bit in ADC_CFG register.
 *
 *END**************************************************************************/
bcc_status_t BCC_Meas_IsConverting(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, bool* const completed)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	460b      	mov	r3, r1
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	72fb      	strb	r3, [r7, #11]
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(completed != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt))
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <BCC_Meas_IsConverting+0x1e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	789b      	ldrb	r3, [r3, #2]
 80038b8:	7afa      	ldrb	r2, [r7, #11]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d901      	bls.n	80038c2 <BCC_Meas_IsConverting+0x22>
    {
        return BCC_STATUS_PARAM_RANGE;
 80038be:	2301      	movs	r3, #1
 80038c0:	e015      	b.n	80038ee <BCC_Meas_IsConverting+0x4e>
    }

    status = BCC_Reg_Read(drvConfig, cid, MC33771C_ADC_CFG_OFFSET, 1U, &adcCfgVal);
 80038c2:	7af9      	ldrb	r1, [r7, #11]
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	2301      	movs	r3, #1
 80038cc:	2206      	movs	r2, #6
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff ff31 	bl	8003736 <BCC_Reg_Read>
 80038d4:	4603      	mov	r3, r0
 80038d6:	75fb      	strb	r3, [r7, #23]

    *(completed) = ((adcCfgVal & MC33771C_ADC_CFG_EOC_N_MASK) ==
 80038d8:	8abb      	ldrh	r3, [r7, #20]
 80038da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	701a      	strb	r2, [r3, #0]
            MC33771C_ADC_CFG_EOC_N(MC33771C_ADC_CFG_EOC_N_COMPLETED_ENUM_VAL));

    return status;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <BCC_Meas_StartAndWait>:
 *                 device and waits for completion.
 *
 *END**************************************************************************/
bcc_status_t BCC_Meas_StartAndWait(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const bcc_avg_t avg)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
 8003902:	4613      	mov	r3, r2
 8003904:	70bb      	strb	r3, [r7, #2]
    bool complete;           /* Conversion complete flag. */
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt) ||
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <BCC_Meas_StartAndWait+0x26>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	789b      	ldrb	r3, [r3, #2]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	429a      	cmp	r2, r3
 8003914:	d802      	bhi.n	800391c <BCC_Meas_StartAndWait+0x26>
 8003916:	78bb      	ldrb	r3, [r7, #2]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d901      	bls.n	8003920 <BCC_Meas_StartAndWait+0x2a>
            (avg > BCC_AVG_256))
    {
        return BCC_STATUS_PARAM_RANGE;
 800391c:	2301      	movs	r3, #1
 800391e:	e056      	b.n	80039ce <BCC_Meas_StartAndWait+0xd8>
    }

    status = BCC_Meas_StartConversion(drvConfig, cid, avg);
 8003920:	78ba      	ldrb	r2, [r7, #2]
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff91 	bl	800384e <BCC_Meas_StartConversion>
 800392c:	4603      	mov	r3, r0
 800392e:	73fb      	strb	r3, [r7, #15]
    if (status != BCC_STATUS_SUCCESS)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <BCC_Meas_StartAndWait+0x44>
    {
        return status;
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	e049      	b.n	80039ce <BCC_Meas_StartAndWait+0xd8>
    }

    /* Wait for at least 520 us (16-bit conversion) before polling bit EOC_N
     * to avoid any traffic on the communication bus during conversion. */
    BCC_MCU_WaitUs(((uint32_t)BCC_T_EOC_TYP_US) << ((uint8_t)avg));
 800393a:	78bb      	ldrb	r3, [r7, #2]
 800393c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fbc0 	bl	80050ca <BCC_MCU_WaitUs>

    status = BCC_MCU_StartTimeout(
            (((uint32_t)BCC_T_EOC_TIMEOUT_US) << ((uint8_t)avg)) -
 800394a:	78bb      	ldrb	r3, [r7, #2]
 800394c:	f240 228a 	movw	r2, #650	@ 0x28a
 8003950:	409a      	lsls	r2, r3
            (((uint32_t)BCC_T_EOC_TYP_US) << ((uint8_t)avg)));
 8003952:	78bb      	ldrb	r3, [r7, #2]
 8003954:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
    status = BCC_MCU_StartTimeout(
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fb4c 	bl	8004ffc <BCC_MCU_StartTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]
    if (status != BCC_STATUS_SUCCESS)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <BCC_Meas_StartAndWait+0x7c>
    {
        return status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	e02d      	b.n	80039ce <BCC_Meas_StartAndWait+0xd8>
    }

    do
    {
        status = BCC_Meas_IsConverting(drvConfig, cid, &complete);
 8003972:	f107 020e 	add.w	r2, r7, #14
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff90 	bl	80038a0 <BCC_Meas_IsConverting>
 8003980:	4603      	mov	r3, r0
 8003982:	73fb      	strb	r3, [r7, #15]
        if (status != BCC_STATUS_SUCCESS)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <BCC_Meas_StartAndWait+0x98>
        {
            return status;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	e01f      	b.n	80039ce <BCC_Meas_StartAndWait+0xd8>
        }
    } while (!complete );
 800398e:	7bbb      	ldrb	r3, [r7, #14]
 8003990:	f083 0301 	eor.w	r3, r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1eb      	bne.n	8003972 <BCC_Meas_StartAndWait+0x7c>

    /* Check once more after timeout expiration because the read command takes
     * several tens/hundreds of microseconds (depends on user code efficiency)
     * and the last read command could be done relatively long before the
     * timeout expiration. */
    if (!complete)
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	f083 0301 	eor.w	r3, r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <BCC_Meas_StartAndWait+0xcc>
    {
        status = BCC_Meas_IsConverting(drvConfig, cid, &complete);
 80039a6:	f107 020e 	add.w	r2, r7, #14
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ff76 	bl	80038a0 <BCC_Meas_IsConverting>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
        if (status != BCC_STATUS_SUCCESS)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <BCC_Meas_StartAndWait+0xcc>
        {
            return status;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	e005      	b.n	80039ce <BCC_Meas_StartAndWait+0xd8>
        }
    }

    return (complete) ? BCC_STATUS_SUCCESS : BCC_STATUS_COM_TIMEOUT;
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <BCC_Meas_StartAndWait+0xd6>
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <BCC_Meas_StartAndWait+0xd8>
 80039cc:	2303      	movs	r3, #3
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <BCC_Meas_GetRawValues>:
 *                 values.
 *
 *END**************************************************************************/
bcc_status_t BCC_Meas_GetRawValues(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, uint16_t* const measurements)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b088      	sub	sp, #32
 80039da:	af02      	add	r7, sp, #8
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	460b      	mov	r3, r1
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	72fb      	strb	r3, [r7, #11]
    uint8_t i;

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(measurements != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt))
 80039e4:	7afb      	ldrb	r3, [r7, #11]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <BCC_Meas_GetRawValues+0x1e>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	789b      	ldrb	r3, [r3, #2]
 80039ee:	7afa      	ldrb	r2, [r7, #11]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d901      	bls.n	80039f8 <BCC_Meas_GetRawValues+0x22>
    {
        return BCC_STATUS_PARAM_RANGE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e074      	b.n	8003ae2 <BCC_Meas_GetRawValues+0x10c>
    }

    /* Read all the measurement registers.
     * Note: the order and number of registers conforms to the order of measured
     * values in Measurements array, see enumeration bcc_measurements_t. */
    if (drvConfig->device[(uint8_t)cid - 1] == BCC_DEVICE_MC33771C)
 80039f8:	7afb      	ldrb	r3, [r7, #11]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	78db      	ldrb	r3, [r3, #3]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <BCC_Meas_GetRawValues+0x46>
    {
        status = BCC_Reg_Read(drvConfig, cid, MC33771C_CC_NB_SAMPLES_OFFSET,
 8003a06:	7af9      	ldrb	r1, [r7, #11]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	231e      	movs	r3, #30
 8003a0e:	222d      	movs	r2, #45	@ 0x2d
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff fe90 	bl	8003736 <BCC_Reg_Read>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]
 8003a1a:	e039      	b.n	8003a90 <BCC_Meas_GetRawValues+0xba>
                             BCC_MEAS_CNT, measurements);
    }
    else
    {
        status = BCC_Reg_Read(drvConfig, cid, MC33772C_CC_NB_SAMPLES_OFFSET,
 8003a1c:	7af9      	ldrb	r1, [r7, #11]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2306      	movs	r3, #6
 8003a24:	222d      	movs	r2, #45	@ 0x2d
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff fe85 	bl	8003736 <BCC_Reg_Read>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	75fb      	strb	r3, [r7, #23]
                             (MC33772C_MEAS_STACK_OFFSET - MC33772C_CC_NB_SAMPLES_OFFSET) + 1, measurements);
        if (status != BCC_STATUS_SUCCESS)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <BCC_Meas_GetRawValues+0x64>
        {
            return status;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	e053      	b.n	8003ae2 <BCC_Meas_GetRawValues+0x10c>
        }

        /* Skip the reserved registers to speed-up this function. */
        measurements[BCC_MSR_CELL_VOLT14] = 0x0000;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	2200      	movs	r2, #0
 8003a40:	801a      	strh	r2, [r3, #0]
        measurements[BCC_MSR_CELL_VOLT13] = 0x0000;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	330e      	adds	r3, #14
 8003a46:	2200      	movs	r2, #0
 8003a48:	801a      	strh	r2, [r3, #0]
        measurements[BCC_MSR_CELL_VOLT12] = 0x0000;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3310      	adds	r3, #16
 8003a4e:	2200      	movs	r2, #0
 8003a50:	801a      	strh	r2, [r3, #0]
        measurements[BCC_MSR_CELL_VOLT11] = 0x0000;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3312      	adds	r3, #18
 8003a56:	2200      	movs	r2, #0
 8003a58:	801a      	strh	r2, [r3, #0]
        measurements[BCC_MSR_CELL_VOLT10] = 0x0000;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3314      	adds	r3, #20
 8003a5e:	2200      	movs	r2, #0
 8003a60:	801a      	strh	r2, [r3, #0]
        measurements[BCC_MSR_CELL_VOLT9] = 0x0000;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3316      	adds	r3, #22
 8003a66:	2200      	movs	r2, #0
 8003a68:	801a      	strh	r2, [r3, #0]
        measurements[BCC_MSR_CELL_VOLT8] = 0x0000;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3318      	adds	r3, #24
 8003a6e:	2200      	movs	r2, #0
 8003a70:	801a      	strh	r2, [r3, #0]
        measurements[BCC_MSR_CELL_VOLT7] = 0x0000;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	331a      	adds	r3, #26
 8003a76:	2200      	movs	r2, #0
 8003a78:	801a      	strh	r2, [r3, #0]

        status = BCC_Reg_Read(drvConfig, cid, MC33772C_MEAS_CELL6_OFFSET,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	331c      	adds	r3, #28
 8003a7e:	7af9      	ldrb	r1, [r7, #11]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2310      	movs	r3, #16
 8003a84:	223b      	movs	r2, #59	@ 0x3b
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff fe55 	bl	8003736 <BCC_Reg_Read>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	75fb      	strb	r3, [r7, #23]
    }

    /* Mask the read registers.
     * Note: Nothing to mask in CC_NB_SAMPLES, COULOMB_CNT1 and COULOMB_CNT2
     * registers. */
    measurements[BCC_MSR_ISENSE1] &= MC33771C_MEAS_ISENSE1_MEAS_I_MSB_MASK;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3306      	adds	r3, #6
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3306      	adds	r3, #6
 8003a9a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	801a      	strh	r2, [r3, #0]
    measurements[BCC_MSR_ISENSE2] &= MC33771C_MEAS_ISENSE2_MEAS_I_LSB_MASK;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3308      	adds	r3, #8
 8003aac:	f002 020f 	and.w	r2, r2, #15
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	801a      	strh	r2, [r3, #0]

    for (i = (uint8_t)BCC_MSR_STACK_VOLT; i < BCC_MEAS_CNT; i++)
 8003ab4:	2305      	movs	r3, #5
 8003ab6:	75bb      	strb	r3, [r7, #22]
 8003ab8:	e00f      	b.n	8003ada <BCC_Meas_GetRawValues+0x104>
    {
        measurements[i] &= MC33771C_MEAS_STACK_MEAS_STACK_MASK;
 8003aba:	7dbb      	ldrb	r3, [r7, #22]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	7dbb      	ldrb	r3, [r7, #22]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	440b      	add	r3, r1
 8003acc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	801a      	strh	r2, [r3, #0]
    for (i = (uint8_t)BCC_MSR_STACK_VOLT; i < BCC_MEAS_CNT; i++)
 8003ad4:	7dbb      	ldrb	r3, [r7, #22]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	75bb      	strb	r3, [r7, #22]
 8003ada:	7dbb      	ldrb	r3, [r7, #22]
 8003adc:	2b1d      	cmp	r3, #29
 8003ade:	d9ec      	bls.n	8003aba <BCC_Meas_GetRawValues+0xe4>
    }

    return status;
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <BCC_Meas_GetIsenseVoltage>:
 *                 [uV].
 *
 *END**************************************************************************/
bcc_status_t BCC_Meas_GetIsenseVoltage(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, int32_t* const isenseVolt)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	460b      	mov	r3, r1
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	72fb      	strb	r3, [r7, #11]
    uint16_t readVal[2];

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(isenseVolt != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt))
 8003afa:	7afb      	ldrb	r3, [r7, #11]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <BCC_Meas_GetIsenseVoltage+0x1e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	789b      	ldrb	r3, [r3, #2]
 8003b04:	7afa      	ldrb	r2, [r7, #11]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d901      	bls.n	8003b0e <BCC_Meas_GetIsenseVoltage+0x22>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e052      	b.n	8003bb4 <BCC_Meas_GetIsenseVoltage+0xc8>
    }

    status = BCC_Reg_Read(drvConfig, cid, MC33771C_MEAS_ISENSE1_OFFSET, 2U, readVal);
 8003b0e:	7af9      	ldrb	r1, [r7, #11]
 8003b10:	f107 0310 	add.w	r3, r7, #16
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2302      	movs	r3, #2
 8003b18:	2230      	movs	r2, #48	@ 0x30
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff fe0b 	bl	8003736 <BCC_Reg_Read>
 8003b20:	4603      	mov	r3, r0
 8003b22:	75fb      	strb	r3, [r7, #23]
    if (status != BCC_STATUS_SUCCESS)
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <BCC_Meas_GetIsenseVoltage+0x42>
    {
        return status;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	e042      	b.n	8003bb4 <BCC_Meas_GetIsenseVoltage+0xc8>
    }

    if ((readVal[0] & readVal[1] & MC33771C_MEAS_ISENSE1_DATA_RDY_MASK) == 0U)
 8003b2e:	8a3a      	ldrh	r2, [r7, #16]
 8003b30:	8a7b      	ldrh	r3, [r7, #18]
 8003b32:	4013      	ands	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	b21b      	sxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	db01      	blt.n	8003b40 <BCC_Meas_GetIsenseVoltage+0x54>
    {
        return BCC_STATUS_DATA_RDY;
 8003b3c:	230b      	movs	r3, #11
 8003b3e:	e039      	b.n	8003bb4 <BCC_Meas_GetIsenseVoltage+0xc8>
    }

    *isenseVolt = BCC_GET_ISENSE_VOLT(readVal[0], readVal[1]);
 8003b40:	8a3b      	ldrh	r3, [r7, #16]
 8003b42:	011a      	lsls	r2, r3, #4
 8003b44:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <BCC_Meas_GetIsenseVoltage+0xd0>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	8a7a      	ldrh	r2, [r7, #18]
 8003b4a:	f002 020f 	and.w	r2, r2, #15
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d017      	beq.n	8003b88 <BCC_Meas_GetIsenseVoltage+0x9c>
 8003b58:	8a3b      	ldrh	r3, [r7, #16]
 8003b5a:	011a      	lsls	r2, r3, #4
 8003b5c:	4b17      	ldr	r3, [pc, #92]	@ (8003bbc <BCC_Meas_GetIsenseVoltage+0xd0>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	8a7a      	ldrh	r2, [r7, #18]
 8003b62:	f002 020f 	and.w	r2, r2, #15
 8003b66:	4313      	orrs	r3, r2
 8003b68:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8003b6c:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8003b70:	461a      	mov	r2, r3
 8003b72:	4613      	mov	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4413      	add	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4a11      	ldr	r2, [pc, #68]	@ (8003bc0 <BCC_Meas_GetIsenseVoltage+0xd4>)
 8003b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b80:	1092      	asrs	r2, r2, #2
 8003b82:	17db      	asrs	r3, r3, #31
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	e012      	b.n	8003bae <BCC_Meas_GetIsenseVoltage+0xc2>
 8003b88:	8a3b      	ldrh	r3, [r7, #16]
 8003b8a:	011a      	lsls	r2, r3, #4
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <BCC_Meas_GetIsenseVoltage+0xd0>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	8a7a      	ldrh	r2, [r7, #18]
 8003b92:	f002 020f 	and.w	r2, r2, #15
 8003b96:	4313      	orrs	r3, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4a07      	ldr	r2, [pc, #28]	@ (8003bc0 <BCC_Meas_GetIsenseVoltage+0xd4>)
 8003ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ba8:	1092      	asrs	r2, r2, #2
 8003baa:	17db      	asrs	r3, r3, #31
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6013      	str	r3, [r2, #0]

    return BCC_STATUS_SUCCESS;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	0007fff0 	.word	0x0007fff0
 8003bc0:	66666667 	.word	0x66666667

08003bc4 <BCC_Meas_GetStackVoltage>:
 *                 [uV].
 *
 *END**************************************************************************/
bcc_status_t BCC_Meas_GetStackVoltage(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, uint32_t* const stackVolt)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	72fb      	strb	r3, [r7, #11]
    uint16_t readVal;

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(stackVolt != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt))
 8003bd2:	7afb      	ldrb	r3, [r7, #11]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <BCC_Meas_GetStackVoltage+0x1e>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	789b      	ldrb	r3, [r3, #2]
 8003bdc:	7afa      	ldrb	r2, [r7, #11]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d901      	bls.n	8003be6 <BCC_Meas_GetStackVoltage+0x22>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e023      	b.n	8003c2e <BCC_Meas_GetStackVoltage+0x6a>
    }

    status = BCC_Reg_Read(drvConfig, cid, MC33771C_MEAS_STACK_OFFSET, 1U, &readVal);
 8003be6:	7af9      	ldrb	r1, [r7, #11]
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	2232      	movs	r2, #50	@ 0x32
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f7ff fd9f 	bl	8003736 <BCC_Reg_Read>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75fb      	strb	r3, [r7, #23]
    if (status != BCC_STATUS_SUCCESS)
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <BCC_Meas_GetStackVoltage+0x42>
    {
        return status;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	e013      	b.n	8003c2e <BCC_Meas_GetStackVoltage+0x6a>
    }

    if ((readVal & MC33771C_MEAS_STACK_DATA_RDY_MASK) == 0U)
 8003c06:	8abb      	ldrh	r3, [r7, #20]
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db01      	blt.n	8003c12 <BCC_Meas_GetStackVoltage+0x4e>
    {
        return BCC_STATUS_DATA_RDY;
 8003c0e:	230b      	movs	r3, #11
 8003c10:	e00d      	b.n	8003c2e <BCC_Meas_GetStackVoltage+0x6a>
    }

    *stackVolt = BCC_GET_STACK_VOLT(readVal);
 8003c12:	8abb      	ldrh	r3, [r7, #20]
 8003c14:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c18:	f645 725e 	movw	r2, #24414	@ 0x5f5e
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	4a05      	ldr	r2, [pc, #20]	@ (8003c38 <BCC_Meas_GetStackVoltage+0x74>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	08da      	lsrs	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	601a      	str	r2, [r3, #0]

    return BCC_STATUS_SUCCESS;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	cccccccd 	.word	0xcccccccd

08003c3c <BCC_Meas_GetCellVoltage>:
 *                 cell and converts it to [uV].
 *
 *END**************************************************************************/
bcc_status_t BCC_Meas_GetCellVoltage(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, uint8_t cellIndex, uint32_t* const cellVolt)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	72fb      	strb	r3, [r7, #11]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	72bb      	strb	r3, [r7, #10]
    uint16_t readVal;

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(cellVolt != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt) ||
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d011      	beq.n	8003c78 <BCC_Meas_GetCellVoltage+0x3c>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	789b      	ldrb	r3, [r3, #2]
 8003c58:	7afa      	ldrb	r2, [r7, #11]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d80c      	bhi.n	8003c78 <BCC_Meas_GetCellVoltage+0x3c>
        (cellIndex >= BCC_MAX_CELLS_DEV(drvConfig->device[(uint8_t)cid - 1])))
 8003c5e:	7abb      	ldrb	r3, [r7, #10]
 8003c60:	7afa      	ldrb	r2, [r7, #11]
 8003c62:	3a01      	subs	r2, #1
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	440a      	add	r2, r1
 8003c68:	78d2      	ldrb	r2, [r2, #3]
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	d101      	bne.n	8003c72 <BCC_Meas_GetCellVoltage+0x36>
 8003c6e:	220e      	movs	r2, #14
 8003c70:	e000      	b.n	8003c74 <BCC_Meas_GetCellVoltage+0x38>
 8003c72:	2206      	movs	r2, #6
    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d801      	bhi.n	8003c7c <BCC_Meas_GetCellVoltage+0x40>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e022      	b.n	8003cc2 <BCC_Meas_GetCellVoltage+0x86>
    }

    status = BCC_Reg_Read(drvConfig, cid, MC33771C_MEAS_CELL1_OFFSET - cellIndex, 1U, &readVal);
 8003c7c:	7abb      	ldrb	r3, [r7, #10]
 8003c7e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	7af9      	ldrb	r1, [r7, #11]
 8003c86:	f107 0314 	add.w	r3, r7, #20
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fd51 	bl	8003736 <BCC_Reg_Read>
 8003c94:	4603      	mov	r3, r0
 8003c96:	75fb      	strb	r3, [r7, #23]
    if (status != BCC_STATUS_SUCCESS)
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <BCC_Meas_GetCellVoltage+0x66>
    {
        return status;
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	e00f      	b.n	8003cc2 <BCC_Meas_GetCellVoltage+0x86>
    }

    if ((readVal & MC33771C_MEAS_CELL1_DATA_RDY_MASK) == 0U)
 8003ca2:	8abb      	ldrh	r3, [r7, #20]
 8003ca4:	b21b      	sxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db01      	blt.n	8003cae <BCC_Meas_GetCellVoltage+0x72>
    {
        return BCC_STATUS_DATA_RDY;
 8003caa:	230b      	movs	r3, #11
 8003cac:	e009      	b.n	8003cc2 <BCC_Meas_GetCellVoltage+0x86>
    }

    *cellVolt = BCC_GET_VOLT(readVal);
 8003cae:	8abb      	ldrh	r3, [r7, #20]
 8003cb0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003cb4:	4a05      	ldr	r2, [pc, #20]	@ (8003ccc <BCC_Meas_GetCellVoltage+0x90>)
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	0a5a      	lsrs	r2, r3, #9
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	601a      	str	r2, [r3, #0]

    return BCC_STATUS_SUCCESS;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	0001312d 	.word	0x0001312d

08003cd0 <BCC_Fault_GetStatus>:
 *                 device.
 *
 *END**************************************************************************/
bcc_status_t BCC_Fault_GetStatus(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, uint16_t* const fltStatus)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	72fb      	strb	r3, [r7, #11]
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(fltStatus != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt))
 8003cde:	7afb      	ldrb	r3, [r7, #11]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <BCC_Fault_GetStatus+0x1e>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	789b      	ldrb	r3, [r3, #2]
 8003ce8:	7afa      	ldrb	r2, [r7, #11]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d901      	bls.n	8003cf2 <BCC_Fault_GetStatus+0x22>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e038      	b.n	8003d64 <BCC_Fault_GetStatus+0x94>
    }

    /* Read CELL_OV_FLT and CELL_UV_FLT. */
    status = BCC_Reg_Read(drvConfig, cid, MC33771C_CELL_OV_FLT_OFFSET, 2U, &fltStatus[BCC_FS_CELL_OV]);
 8003cf2:	7af9      	ldrb	r1, [r7, #11]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	2209      	movs	r2, #9
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff fd1a 	bl	8003736 <BCC_Reg_Read>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]
    if (status != BCC_STATUS_SUCCESS)
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <BCC_Fault_GetStatus+0x40>
    {
        return status;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	e029      	b.n	8003d64 <BCC_Fault_GetStatus+0x94>
    }

    /* Read CB_OPEN_FLT, CB_SHORT_FLT. */
    status = BCC_Reg_Read(drvConfig, cid, MC33771C_CB_OPEN_FLT_OFFSET, 2U, &fltStatus[BCC_FS_CB_OPEN]);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	7af9      	ldrb	r1, [r7, #11]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2302      	movs	r3, #2
 8003d1a:	221a      	movs	r2, #26
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff fd0a 	bl	8003736 <BCC_Reg_Read>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]
    if (status != BCC_STATUS_SUCCESS)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <BCC_Fault_GetStatus+0x60>
    {
        return status;
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	e019      	b.n	8003d64 <BCC_Fault_GetStatus+0x94>
    }

    /* Read GPIO_STS, AN_OT_UT_FLT, GPIO_SHORT_Anx_OPEN_STS. */
    status = BCC_Reg_Read(drvConfig, cid, MC33771C_GPIO_STS_OFFSET, 3U, &fltStatus[BCC_FS_GPIO_STATUS]);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3308      	adds	r3, #8
 8003d34:	7af9      	ldrb	r1, [r7, #11]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2303      	movs	r3, #3
 8003d3a:	221f      	movs	r2, #31
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff fcfa 	bl	8003736 <BCC_Reg_Read>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75fb      	strb	r3, [r7, #23]
    if (status != BCC_STATUS_SUCCESS)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <BCC_Fault_GetStatus+0x80>
    {
        return status;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	e009      	b.n	8003d64 <BCC_Fault_GetStatus+0x94>
    }

    /* Read COM_STATUS, FAULT1_STATUS, FAULT2_STATUS and FAULT3_STATUS. */
    return BCC_Reg_Read(drvConfig, cid, MC33771C_COM_STATUS_OFFSET, 4U, &fltStatus[BCC_FS_COMM]);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	330e      	adds	r3, #14
 8003d54:	7af9      	ldrb	r1, [r7, #11]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2304      	movs	r3, #4
 8003d5a:	2223      	movs	r2, #35	@ 0x23
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff fcea 	bl	8003736 <BCC_Reg_Read>
 8003d62:	4603      	mov	r3, r0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <BCC_Fault_ClearStatus>:
 * Description   : This function clears selected fault status register.
 *
 *END**************************************************************************/
bcc_status_t BCC_Fault_ClearStatus(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const bcc_fault_status_t statSel)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	70bb      	strb	r3, [r7, #2]
    /* This array is intended for conversion of bcc_fault_status_t value to
     * a BCC register address. */
    const uint8_t regAddrMap[BCC_STAT_CNT] = {
 8003d7c:	4a12      	ldr	r2, [pc, #72]	@ (8003dc8 <BCC_Fault_ClearStatus+0x5c>)
 8003d7e:	f107 030c 	add.w	r3, r7, #12
 8003d82:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d84:	c303      	stmia	r3!, {r0, r1}
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	3302      	adds	r3, #2
 8003d8a:	0c12      	lsrs	r2, r2, #16
 8003d8c:	701a      	strb	r2, [r3, #0]
        MC33771C_FAULT3_STATUS_OFFSET
    };

    //BCC_MCU_Assert(drvConfig != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt) ||
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <BCC_Fault_ClearStatus+0x38>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	789b      	ldrb	r3, [r3, #2]
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d802      	bhi.n	8003da4 <BCC_Fault_ClearStatus+0x38>
 8003d9e:	78bb      	ldrb	r3, [r7, #2]
 8003da0:	2b0a      	cmp	r3, #10
 8003da2:	d901      	bls.n	8003da8 <BCC_Fault_ClearStatus+0x3c>
            ((uint32_t)statSel >= BCC_STAT_CNT))
    {
        return BCC_STATUS_PARAM_RANGE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e00a      	b.n	8003dbe <BCC_Fault_ClearStatus+0x52>
    }

    return BCC_Reg_Write(drvConfig, cid, regAddrMap[statSel], 0x0000U);
 8003da8:	78bb      	ldrb	r3, [r7, #2]
 8003daa:	3318      	adds	r3, #24
 8003dac:	443b      	add	r3, r7
 8003dae:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8003db2:	78f9      	ldrb	r1, [r7, #3]
 8003db4:	2300      	movs	r3, #0
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fcdd 	bl	8003776 <BCC_Reg_Write>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08006b64 	.word	0x08006b64

08003dcc <BCC_FuseMirror_Read>:
 *                 device.
 *
 *END**************************************************************************/
bcc_status_t BCC_FuseMirror_Read(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const uint8_t fuseAddr, uint16_t* const value)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	72fb      	strb	r3, [r7, #11]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	72bb      	strb	r3, [r7, #10]
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(value != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt))
 8003dde:	7afb      	ldrb	r3, [r7, #11]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <BCC_FuseMirror_Read+0x22>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	789b      	ldrb	r3, [r3, #2]
 8003de8:	7afa      	ldrb	r2, [r7, #11]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d901      	bls.n	8003df2 <BCC_FuseMirror_Read+0x26>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e02a      	b.n	8003e48 <BCC_FuseMirror_Read+0x7c>
    }

    if (fuseAddr > ((drvConfig->device[(uint8_t)cid - 1U] == BCC_DEVICE_MC33771C) ?
 8003df2:	7abb      	ldrb	r3, [r7, #10]
 8003df4:	7afa      	ldrb	r2, [r7, #11]
 8003df6:	3a01      	subs	r2, #1
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	78d2      	ldrb	r2, [r2, #3]
            MC33771C_MAX_FUSE_READ_ADDR : MC33772C_MAX_FUSE_READ_ADDR))
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	d101      	bne.n	8003e06 <BCC_FuseMirror_Read+0x3a>
 8003e02:	221a      	movs	r2, #26
 8003e04:	e000      	b.n	8003e08 <BCC_FuseMirror_Read+0x3c>
 8003e06:	2212      	movs	r2, #18
    if (fuseAddr > ((drvConfig->device[(uint8_t)cid - 1U] == BCC_DEVICE_MC33771C) ?
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d201      	bcs.n	8003e10 <BCC_FuseMirror_Read+0x44>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e01b      	b.n	8003e48 <BCC_FuseMirror_Read+0x7c>
    }

    status = BCC_Reg_Write(drvConfig, cid, MC33771C_FUSE_MIRROR_CNTL_OFFSET,
            MC33771C_FUSE_MIRROR_CNTL_FMR_ADDR(fuseAddr) |
 8003e10:	7abb      	ldrb	r3, [r7, #10]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	b29b      	uxth	r3, r3
    status = BCC_Reg_Write(drvConfig, cid, MC33771C_FUSE_MIRROR_CNTL_OFFSET,
 8003e18:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	7af9      	ldrb	r1, [r7, #11]
 8003e20:	2270      	movs	r2, #112	@ 0x70
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff fca7 	bl	8003776 <BCC_Reg_Write>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]
            MC33771C_FUSE_MIRROR_CNTL_FSTM(MC33771C_FUSE_MIRROR_CNTL_FSTM_LOCKED_ENUM_VAL) |
            MC33771C_FUSE_MIRROR_CNTL_FST(MC33771C_FUSE_MIRROR_CNTL_FST_SPI_WRITE_ENABLE_ENUM_VAL));
    if (status != BCC_STATUS_SUCCESS)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <BCC_FuseMirror_Read+0x6a>
    {
        return status;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	e008      	b.n	8003e48 <BCC_FuseMirror_Read+0x7c>
    }

    return BCC_Reg_Read(drvConfig, cid, MC33771C_FUSE_MIRROR_DATA_OFFSET, 1U, value);
 8003e36:	7af9      	ldrb	r1, [r7, #11]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	226f      	movs	r2, #111	@ 0x6f
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff fc78 	bl	8003736 <BCC_Reg_Read>
 8003e46:	4603      	mov	r3, r0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <BCC_GUID_Read>:
 *                 from the content of mirror registers.
 *
 *END**************************************************************************/
bcc_status_t BCC_GUID_Read(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, uint64_t* const guid)
{
 8003e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e54:	b092      	sub	sp, #72	@ 0x48
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const uint8_t addr771c[3] = {
 8003e62:	4b49      	ldr	r3, [pc, #292]	@ (8003f88 <BCC_GUID_Read+0x138>)
 8003e64:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	8013      	strh	r3, [r2, #0]
 8003e6e:	3202      	adds	r2, #2
 8003e70:	0c0b      	lsrs	r3, r1, #16
 8003e72:	7013      	strb	r3, [r2, #0]
            MC33771C_FUSE_TR_0_OFFSET,
            MC33771C_FUSE_TR_1_OFFSET,
            MC33771C_FUSE_TR_2_OFFSET
    };
    const uint8_t addr772c[3] = {
 8003e74:	4b45      	ldr	r3, [pc, #276]	@ (8003f8c <BCC_GUID_Read+0x13c>)
 8003e76:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003e7a:	6819      	ldr	r1, [r3, #0]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	8013      	strh	r3, [r2, #0]
 8003e80:	3202      	adds	r2, #2
 8003e82:	0c0b      	lsrs	r3, r1, #16
 8003e84:	7013      	strb	r3, [r2, #0]
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(guid != NULL);

    if ((cid == BCC_CID_UNASSIG) || (((uint8_t)cid) > drvConfig->devicesCnt))
 8003e86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <BCC_GUID_Read+0x4a>
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	789a      	ldrb	r2, [r3, #2]
 8003e92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <BCC_GUID_Read+0x4e>
    {
        return BCC_STATUS_PARAM_RANGE;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e06e      	b.n	8003f7c <BCC_GUID_Read+0x12c>
    }

    readAddr = (drvConfig->device[(uint8_t)cid - 1] == BCC_DEVICE_MC33771C) ? addr771c : addr772c;
 8003e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ea2:	1e5a      	subs	r2, r3, #1
 8003ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea6:	4413      	add	r3, r2
 8003ea8:	78db      	ldrb	r3, [r3, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <BCC_GUID_Read+0x64>
 8003eae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003eb2:	e001      	b.n	8003eb8 <BCC_GUID_Read+0x68>
 8003eb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003eb8:	643b      	str	r3, [r7, #64]	@ 0x40

    for (i = 0; i < 3; i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003ec0:	e01f      	b.n	8003f02 <BCC_GUID_Read+0xb2>
    {
        status = BCC_FuseMirror_Read(drvConfig, cid, readAddr[i], &(readData[i]));
 8003ec2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec8:	4413      	add	r3, r2
 8003eca:	7818      	ldrb	r0, [r3, #0]
 8003ecc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ed0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003edc:	4602      	mov	r2, r0
 8003ede:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ee0:	f7ff ff74 	bl	8003dcc <BCC_FuseMirror_Read>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (status != BCC_STATUS_SUCCESS)
 8003eea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <BCC_GUID_Read+0xa8>
        {
            return status;
 8003ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ef6:	e041      	b.n	8003f7c <BCC_GUID_Read+0x12c>
    for (i = 0; i < 3; i++)
 8003ef8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003efc:	3301      	adds	r3, #1
 8003efe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003f02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d9db      	bls.n	8003ec2 <BCC_GUID_Read+0x72>
        }
    }

    *guid = (((uint64_t)(readData[0] & BCC_FUSE_TR_0_MASK)) << 21) |
 8003f0a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2200      	movs	r2, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	617a      	str	r2, [r7, #20]
 8003f14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	ea4f 29d1 	mov.w	r9, r1, lsr #11
 8003f1e:	4613      	mov	r3, r2
 8003f20:	ea4f 5843 	mov.w	r8, r3, lsl #21
            (((uint64_t)(readData[1] & BCC_FUSE_TR_1_MASK)) << 5) |
 8003f24:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2200      	movs	r2, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	61fa      	str	r2, [r7, #28]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	69f9      	ldr	r1, [r7, #28]
 8003f38:	014b      	lsls	r3, r1, #5
 8003f3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f3e:	4684      	mov	ip, r0
 8003f40:	ea43 63dc 	orr.w	r3, r3, ip, lsr #27
 8003f44:	4601      	mov	r1, r0
 8003f46:	014a      	lsls	r2, r1, #5
    *guid = (((uint64_t)(readData[0] & BCC_FUSE_TR_0_MASK)) << 21) |
 8003f48:	ea48 0402 	orr.w	r4, r8, r2
 8003f4c:	ea49 0503 	orr.w	r5, r9, r3
            ((uint64_t)(readData[2] & BCC_FUSE_TR_2_MASK));
 8003f50:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	60fa      	str	r2, [r7, #12]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f003 0a1f 	and.w	sl, r3, #31
 8003f60:	f04f 0b00 	mov.w	fp, #0
            (((uint64_t)(readData[1] & BCC_FUSE_TR_1_MASK)) << 5) |
 8003f64:	ea44 030a 	orr.w	r3, r4, sl
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	ea45 030b 	orr.w	r3, r5, fp
 8003f6e:	607b      	str	r3, [r7, #4]
    *guid = (((uint64_t)(readData[0] & BCC_FUSE_TR_0_MASK)) << 21) |
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f76:	e9c3 1200 	strd	r1, r2, [r3]

    return BCC_STATUS_SUCCESS;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3748      	adds	r7, #72	@ 0x48
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	08006b70 	.word	0x08006b70
 8003f8c:	08006b74 	.word	0x08006b74

08003f90 <BCC_CalcCRC>:
 * Function Name : BCC_CalcCRC
 * Description   : This function calculates CRC value of passed data array.
 *
 *END**************************************************************************/
static inline uint8_t BCC_CalcCRC(const uint8_t* const data)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
    uint8_t tableIdx; /* Index to the CRC table. */

//    BCC_MCU_Assert(data != NULL);

    /* Expanding value. */
    crc = 0x42U;
 8003f98:	2342      	movs	r3, #66	@ 0x42
 8003f9a:	73fb      	strb	r3, [r7, #15]

    tableIdx = crc ^ data[BCC_MSG_IDX_DATA_H];
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	4053      	eors	r3, r2
 8003fa4:	73bb      	strb	r3, [r7, #14]
    crc = s_crcTable[tableIdx];
 8003fa6:	7bbb      	ldrb	r3, [r7, #14]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	@ (800400c <BCC_CalcCRC+0x7c>)
 8003faa:	5cd3      	ldrb	r3, [r2, r3]
 8003fac:	73fb      	strb	r3, [r7, #15]
    tableIdx = crc ^ data[BCC_MSG_IDX_DATA_L];
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	4053      	eors	r3, r2
 8003fb8:	73bb      	strb	r3, [r7, #14]
    crc = s_crcTable[tableIdx];
 8003fba:	7bbb      	ldrb	r3, [r7, #14]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	@ (800400c <BCC_CalcCRC+0x7c>)
 8003fbe:	5cd3      	ldrb	r3, [r2, r3]
 8003fc0:	73fb      	strb	r3, [r7, #15]
    tableIdx = crc ^ data[BCC_MSG_IDX_ADDR];
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	4053      	eors	r3, r2
 8003fcc:	73bb      	strb	r3, [r7, #14]
    crc = s_crcTable[tableIdx];
 8003fce:	7bbb      	ldrb	r3, [r7, #14]
 8003fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800400c <BCC_CalcCRC+0x7c>)
 8003fd2:	5cd3      	ldrb	r3, [r2, r3]
 8003fd4:	73fb      	strb	r3, [r7, #15]
    tableIdx = crc ^ data[BCC_MSG_IDX_CID];
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3303      	adds	r3, #3
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	4053      	eors	r3, r2
 8003fe0:	73bb      	strb	r3, [r7, #14]
    crc = s_crcTable[tableIdx];
 8003fe2:	7bbb      	ldrb	r3, [r7, #14]
 8003fe4:	4a09      	ldr	r2, [pc, #36]	@ (800400c <BCC_CalcCRC+0x7c>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	73fb      	strb	r3, [r7, #15]
    tableIdx = crc ^ data[BCC_MSG_IDX_CNT_CMD];
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	781a      	ldrb	r2, [r3, #0]
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	4053      	eors	r3, r2
 8003ff4:	73bb      	strb	r3, [r7, #14]
    crc = s_crcTable[tableIdx];
 8003ff6:	7bbb      	ldrb	r3, [r7, #14]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	@ (800400c <BCC_CalcCRC+0x7c>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	73fb      	strb	r3, [r7, #15]

    return crc;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	080072e0 	.word	0x080072e0

08004010 <BCC_CheckCRC>:
 * Description   : This function calculates CRC of a received frame and compares
 *                 it with CRC field of the frame.
 *
 *END**************************************************************************/
static bcc_status_t BCC_CheckCRC(const uint8_t* const resp)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    uint8_t frameCrc;  /* CRC value from the response frame. */
    uint8_t compCrc;   /* Computed (expected) CRC value. */

//    BCC_MCU_Assert(resp != NULL);

    frameCrc = resp[BCC_MSG_IDX_CRC];
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3305      	adds	r3, #5
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	73fb      	strb	r3, [r7, #15]
    compCrc = BCC_CalcCRC(resp);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ffb5 	bl	8003f90 <BCC_CalcCRC>
 8004026:	4603      	mov	r3, r0
 8004028:	73bb      	strb	r3, [r7, #14]

    return (compCrc != frameCrc) ? BCC_STATUS_COM_CRC : BCC_STATUS_SUCCESS;
 800402a:	7bba      	ldrb	r2, [r7, #14]
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	429a      	cmp	r2, r3
 8004030:	d001      	beq.n	8004036 <BCC_CheckCRC+0x26>
 8004032:	2305      	movs	r3, #5
 8004034:	e000      	b.n	8004038 <BCC_CheckCRC+0x28>
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <BCC_CheckMsgCntr>:
 *                 a frame.
 *
 *END**************************************************************************/
static bcc_status_t BCC_CheckMsgCntr(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const uint8_t* const resp)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	460b      	mov	r3, r1
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	72fb      	strb	r3, [r7, #11]
    uint8_t msgCntRcv;   /* Currently received message counter value. */

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(resp != NULL);

    msgCntPrev = drvConfig->drvData.msgCntr[(uint8_t)cid];
 800404e:	7afb      	ldrb	r3, [r7, #11]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8004058:	75fb      	strb	r3, [r7, #23]
    msgCntRcv = (resp[BCC_MSG_IDX_CNT_CMD] & BCC_MSG_MSG_CNT_MASK) >> BCC_MSG_MSG_CNT_SHIFT;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	75bb      	strb	r3, [r7, #22]

    /* Store the Message counter value. */
    drvConfig->drvData.msgCntr[(uint8_t)cid] = msgCntRcv;
 8004064:	7afb      	ldrb	r3, [r7, #11]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4413      	add	r3, r2
 800406a:	7dba      	ldrb	r2, [r7, #22]
 800406c:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140

    /* Check the Message counter value.
     * Note: Do not perform a check for CID=0. */
    if ((cid != BCC_CID_UNASSIG) && (msgCntRcv != BCC_INC_MSG_CNTR(msgCntPrev)))
 8004070:	7afb      	ldrb	r3, [r7, #11]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <BCC_CheckMsgCntr+0x48>
 8004076:	7dba      	ldrb	r2, [r7, #22]
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	3301      	adds	r3, #1
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <BCC_CheckMsgCntr+0x48>
    {
        return BCC_STATUS_COM_MSG_CNT;
 8004084:	2306      	movs	r3, #6
 8004086:	e000      	b.n	800408a <BCC_CheckMsgCntr+0x4a>
    }

    return BCC_STATUS_SUCCESS;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <BCC_CheckEchoFrame>:
 * Description   : This function checks content of the echo frame.
 *
 *END**************************************************************************/
static bcc_status_t BCC_CheckEchoFrame(const uint8_t* const txBuf,
    const uint8_t* const resp)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
//    BCC_MCU_Assert(resp != NULL);
//    BCC_MCU_Assert(txBuf != NULL);

    if ((txBuf[BCC_MSG_IDX_DATA_H] == resp[BCC_MSG_IDX_DATA_H]) &&
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d129      	bne.n	80040fe <BCC_CheckEchoFrame+0x6a>
        (txBuf[BCC_MSG_IDX_DATA_L] == resp[BCC_MSG_IDX_DATA_L]) &&
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3301      	adds	r3, #1
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	781b      	ldrb	r3, [r3, #0]
    if ((txBuf[BCC_MSG_IDX_DATA_H] == resp[BCC_MSG_IDX_DATA_H]) &&
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d121      	bne.n	80040fe <BCC_CheckEchoFrame+0x6a>
        (txBuf[BCC_MSG_IDX_ADDR] == resp[BCC_MSG_IDX_ADDR]) &&
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3302      	adds	r3, #2
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	3302      	adds	r3, #2
 80040c4:	781b      	ldrb	r3, [r3, #0]
        (txBuf[BCC_MSG_IDX_DATA_L] == resp[BCC_MSG_IDX_DATA_L]) &&
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d119      	bne.n	80040fe <BCC_CheckEchoFrame+0x6a>
        (txBuf[BCC_MSG_IDX_CID] == resp[BCC_MSG_IDX_CID]) &&
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3303      	adds	r3, #3
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	3303      	adds	r3, #3
 80040d4:	781b      	ldrb	r3, [r3, #0]
        (txBuf[BCC_MSG_IDX_ADDR] == resp[BCC_MSG_IDX_ADDR]) &&
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d111      	bne.n	80040fe <BCC_CheckEchoFrame+0x6a>
        (txBuf[BCC_MSG_IDX_CNT_CMD] == resp[BCC_MSG_IDX_CNT_CMD]) &&
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	3304      	adds	r3, #4
 80040e4:	781b      	ldrb	r3, [r3, #0]
        (txBuf[BCC_MSG_IDX_CID] == resp[BCC_MSG_IDX_CID]) &&
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d109      	bne.n	80040fe <BCC_CheckEchoFrame+0x6a>
        (txBuf[BCC_MSG_IDX_CRC] == resp[BCC_MSG_IDX_CRC]))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3305      	adds	r3, #5
 80040ee:	781a      	ldrb	r2, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	3305      	adds	r3, #5
 80040f4:	781b      	ldrb	r3, [r3, #0]
        (txBuf[BCC_MSG_IDX_CNT_CMD] == resp[BCC_MSG_IDX_CNT_CMD]) &&
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d101      	bne.n	80040fe <BCC_CheckEchoFrame+0x6a>
    {
        return BCC_STATUS_SUCCESS;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e000      	b.n	8004100 <BCC_CheckEchoFrame+0x6c>
    }
    else
    {
        return BCC_STATUS_COM_ECHO;
 80040fe:	2304      	movs	r3, #4
    }
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <BCC_PackFrame>:
 *                 to the BCC frame format (see BCC datasheet).
 *
 *END**************************************************************************/
static void BCC_PackFrame(const uint16_t data, const uint8_t addr,
    const bcc_cid_t cid, const uint8_t cmdCnt, uint8_t* const frame)
{
 800410a:	b590      	push	{r4, r7, lr}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	4604      	mov	r4, r0
 8004112:	4608      	mov	r0, r1
 8004114:	4611      	mov	r1, r2
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	80fb      	strh	r3, [r7, #6]
 800411c:	4603      	mov	r3, r0
 800411e:	717b      	strb	r3, [r7, #5]
 8004120:	460b      	mov	r3, r1
 8004122:	713b      	strb	r3, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	70fb      	strb	r3, [r7, #3]
//    BCC_MCU_Assert(frame != NULL);

    /* Register Data field. */
    frame[BCC_MSG_IDX_DATA_H] = (uint8_t)(data >> 8U);
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2da      	uxtb	r2, r3
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	701a      	strb	r2, [r3, #0]
    frame[BCC_MSG_IDX_DATA_L] = (uint8_t)(data & 0xFFU);
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	3301      	adds	r3, #1
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]

    /* Register Address field. Master/Slave field is always 0 for sending. */
    frame[BCC_MSG_IDX_ADDR] = (addr & BCC_MSG_ADDR_MASK);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	3302      	adds	r3, #2
 8004142:	797a      	ldrb	r2, [r7, #5]
 8004144:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

    /* Device address (Cluster ID) field. */
    frame[BCC_MSG_IDX_CID] = ((uint8_t)cid & 0x3FU);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	3303      	adds	r3, #3
 8004150:	793a      	ldrb	r2, [r7, #4]
 8004152:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Message counter and Command fields. */
    frame[BCC_MSG_IDX_CNT_CMD] = (cmdCnt & 0xF3U);
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	3304      	adds	r3, #4
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	f022 020c 	bic.w	r2, r2, #12
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]

    /* CRC field. */
    frame[BCC_MSG_IDX_CRC] = BCC_CalcCRC(frame);
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	1d5c      	adds	r4, r3, #5
 800416c:	69b8      	ldr	r0, [r7, #24]
 800416e:	f7ff ff0f 	bl	8003f90 <BCC_CalcCRC>
 8004172:	4603      	mov	r3, r0
 8004174:	7023      	strb	r3, [r4, #0]
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bd90      	pop	{r4, r7, pc}
	...

08004180 <BCC_Reg_ReadSpi>:
 *
 *END**************************************************************************/
bcc_status_t BCC_Reg_ReadSpi(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, uint8_t regAddr, const uint8_t regCnt,
    uint16_t* regVal)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	70fb      	strb	r3, [r7, #3]
 8004192:	460b      	mov	r3, r1
 8004194:	70bb      	strb	r3, [r7, #2]
 8004196:	4613      	mov	r3, r2
 8004198:	707b      	strb	r3, [r7, #1]
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);
//    BCC_MCU_Assert(regVal != NULL);

    if (((uint8_t)cid > drvConfig->devicesCnt) || (regAddr > BCC_MAX_REG_ADDR) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	789b      	ldrb	r3, [r3, #2]
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d80c      	bhi.n	80041be <BCC_Reg_ReadSpi+0x3e>
 80041a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	db08      	blt.n	80041be <BCC_Reg_ReadSpi+0x3e>
 80041ac:	787b      	ldrb	r3, [r7, #1]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <BCC_Reg_ReadSpi+0x3e>
        (regCnt == 0U) || ((regAddr + regCnt - 1U) > BCC_MAX_REG_ADDR))
 80041b2:	78ba      	ldrb	r2, [r7, #2]
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	4413      	add	r3, r2
 80041b8:	3b01      	subs	r3, #1
 80041ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80041bc:	d901      	bls.n	80041c2 <BCC_Reg_ReadSpi+0x42>
    {
        return BCC_STATUS_PARAM_RANGE;
 80041be:	2301      	movs	r3, #1
 80041c0:	e0be      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
    }

    /* Create frame for request. */
    BCC_PackFrame(0x0001U, regAddr, cid, BCC_CMD_READ, txBuf);
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	78b9      	ldrb	r1, [r7, #2]
 80041c6:	4b60      	ldr	r3, [pc, #384]	@ (8004348 <BCC_Reg_ReadSpi+0x1c8>)
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2301      	movs	r3, #1
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7ff ff9c 	bl	800410a <BCC_PackFrame>

    /* Send request for data. Required data are returned with the following transfer. */
    status = BCC_MCU_TransferSpi(drvConfig->drvInstance, txBuf, rxBuf);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	4a5d      	ldr	r2, [pc, #372]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 80041d8:	495b      	ldr	r1, [pc, #364]	@ (8004348 <BCC_Reg_ReadSpi+0x1c8>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff40 	bl	8005060 <BCC_MCU_TransferSpi>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]
    if (status != BCC_STATUS_SUCCESS)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <BCC_Reg_ReadSpi+0x6e>
    {
        return status;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	e0a8      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
    }

    /* Check CRC, message counter, a null response (all field except CRC and
     * message counter are zero) and discard the response. */
    if ((status = BCC_CheckCRC(rxBuf)) != BCC_STATUS_SUCCESS)
 80041ee:	4857      	ldr	r0, [pc, #348]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 80041f0:	f7ff ff0e 	bl	8004010 <BCC_CheckCRC>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <BCC_Reg_ReadSpi+0x82>
    {
        return status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	e09e      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
    }

    if ((status = BCC_CheckMsgCntr(drvConfig, cid, rxBuf)) != BCC_STATUS_SUCCESS)
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	4a51      	ldr	r2, [pc, #324]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 8004206:	4619      	mov	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff19 	bl	8004040 <BCC_CheckMsgCntr>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <BCC_Reg_ReadSpi+0x9c>
    {
        return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	e091      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
    }

    if (BCC_IS_NULL_RESP(rxBuf))
 800421c:	4b4b      	ldr	r3, [pc, #300]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d117      	bne.n	8004256 <BCC_Reg_ReadSpi+0xd6>
 8004226:	4b49      	ldr	r3, [pc, #292]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d112      	bne.n	8004256 <BCC_Reg_ReadSpi+0xd6>
 8004230:	4b46      	ldr	r3, [pc, #280]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 8004232:	789b      	ldrb	r3, [r3, #2]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <BCC_Reg_ReadSpi+0xd6>
 800423a:	4b44      	ldr	r3, [pc, #272]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 800423c:	78db      	ldrb	r3, [r3, #3]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d108      	bne.n	8004256 <BCC_Reg_ReadSpi+0xd6>
 8004244:	4b41      	ldr	r3, [pc, #260]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 8004246:	791b      	ldrb	r3, [r3, #4]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <BCC_Reg_ReadSpi+0xd6>
    {
        return BCC_STATUS_COM_NULL;
 8004252:	2307      	movs	r3, #7
 8004254:	e074      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
    }

    /* Read required data. */
    for (regIdx = 0U; regIdx < regCnt; regIdx++)
 8004256:	4b3e      	ldr	r3, [pc, #248]	@ (8004350 <BCC_Reg_ReadSpi+0x1d0>)
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e069      	b.n	8004332 <BCC_Reg_ReadSpi+0x1b2>
    {
        /* Increment address of the register to be read. */
        regAddr++;
 800425e:	78bb      	ldrb	r3, [r7, #2]
 8004260:	3301      	adds	r3, #1
 8004262:	70bb      	strb	r3, [r7, #2]
        if (regAddr > 0x7FU)
 8004264:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004268:	2b00      	cmp	r3, #0
 800426a:	da01      	bge.n	8004270 <BCC_Reg_ReadSpi+0xf0>
        {
            regAddr = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	70bb      	strb	r3, [r7, #2]
        }

        BCC_PackFrame(0x0001U, regAddr, cid, BCC_CMD_READ, txBuf);
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	78b9      	ldrb	r1, [r7, #2]
 8004274:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <BCC_Reg_ReadSpi+0x1c8>)
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2301      	movs	r3, #1
 800427a:	2001      	movs	r0, #1
 800427c:	f7ff ff45 	bl	800410a <BCC_PackFrame>

        /* Send request for data. Required data are returned with the following transfer. */
        status = BCC_MCU_TransferSpi(drvConfig->drvInstance, txBuf, rxBuf);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	4a31      	ldr	r2, [pc, #196]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 8004286:	4930      	ldr	r1, [pc, #192]	@ (8004348 <BCC_Reg_ReadSpi+0x1c8>)
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fee9 	bl	8005060 <BCC_MCU_TransferSpi>
 800428e:	4603      	mov	r3, r0
 8004290:	73fb      	strb	r3, [r7, #15]
        if (status != BCC_STATUS_SUCCESS)
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <BCC_Reg_ReadSpi+0x11c>
        {
            return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	e051      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
        }

        /* Check CRC. */
        if ((status = BCC_CheckCRC(rxBuf)) != BCC_STATUS_SUCCESS)
 800429c:	482b      	ldr	r0, [pc, #172]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 800429e:	f7ff feb7 	bl	8004010 <BCC_CheckCRC>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <BCC_Reg_ReadSpi+0x130>
        {
            return status;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	e047      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
        }

        /* Check the Message counter value. */
        if ((status = BCC_CheckMsgCntr(drvConfig, cid, rxBuf)) != BCC_STATUS_SUCCESS)
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	4a26      	ldr	r2, [pc, #152]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff fec2 	bl	8004040 <BCC_CheckMsgCntr>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <BCC_Reg_ReadSpi+0x14a>
        {
            return status;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	e03a      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
        }

        if (BCC_IS_NULL_RESP(rxBuf))
 80042ca:	4b20      	ldr	r3, [pc, #128]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d117      	bne.n	8004304 <BCC_Reg_ReadSpi+0x184>
 80042d4:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d112      	bne.n	8004304 <BCC_Reg_ReadSpi+0x184>
 80042de:	4b1b      	ldr	r3, [pc, #108]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 80042e0:	789b      	ldrb	r3, [r3, #2]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10d      	bne.n	8004304 <BCC_Reg_ReadSpi+0x184>
 80042e8:	4b18      	ldr	r3, [pc, #96]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 80042ea:	78db      	ldrb	r3, [r3, #3]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <BCC_Reg_ReadSpi+0x184>
 80042f2:	4b16      	ldr	r3, [pc, #88]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 80042f4:	791b      	ldrb	r3, [r3, #4]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <BCC_Reg_ReadSpi+0x184>
        {
            return BCC_STATUS_COM_NULL;
 8004300:	2307      	movs	r3, #7
 8004302:	e01d      	b.n	8004340 <BCC_Reg_ReadSpi+0x1c0>
        }

        /* Store data. */
        *regVal++ = BCC_GET_MSG_DATA(rxBuf);
 8004304:	4b11      	ldr	r3, [pc, #68]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	b21a      	sxth	r2, r3
 800430e:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <BCC_Reg_ReadSpi+0x1cc>)
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	b21b      	sxth	r3, r3
 8004316:	4313      	orrs	r3, r2
 8004318:	b219      	sxth	r1, r3
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	1c9a      	adds	r2, r3, #2
 800431e:	61ba      	str	r2, [r7, #24]
 8004320:	b28a      	uxth	r2, r1
 8004322:	801a      	strh	r2, [r3, #0]
    for (regIdx = 0U; regIdx < regCnt; regIdx++)
 8004324:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <BCC_Reg_ReadSpi+0x1d0>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	3301      	adds	r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b08      	ldr	r3, [pc, #32]	@ (8004350 <BCC_Reg_ReadSpi+0x1d0>)
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <BCC_Reg_ReadSpi+0x1d0>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	787a      	ldrb	r2, [r7, #1]
 800433a:	429a      	cmp	r2, r3
 800433c:	d88f      	bhi.n	800425e <BCC_Reg_ReadSpi+0xde>
    }

    return BCC_STATUS_SUCCESS;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200005b0 	.word	0x200005b0
 800434c:	200005b8 	.word	0x200005b8
 8004350:	200005be 	.word	0x200005be

08004354 <BCC_Reg_WriteSpi>:
 *                 BCC device. Intended for SPI mode only.
 *
 *END**************************************************************************/
bcc_status_t BCC_Reg_WriteSpi(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid, const uint8_t regAddr, const uint16_t regVal)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	4608      	mov	r0, r1
 800435e:	4611      	mov	r1, r2
 8004360:	461a      	mov	r2, r3
 8004362:	4603      	mov	r3, r0
 8004364:	70fb      	strb	r3, [r7, #3]
 8004366:	460b      	mov	r3, r1
 8004368:	70bb      	strb	r3, [r7, #2]
 800436a:	4613      	mov	r3, r2
 800436c:	803b      	strh	r3, [r7, #0]
    uint8_t rxBuf[BCC_MSG_SIZE]; /* Buffer for receiving. */
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);

    if (((uint8_t)cid > drvConfig->devicesCnt) || (regAddr > BCC_MAX_REG_ADDR))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	789b      	ldrb	r3, [r3, #2]
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	429a      	cmp	r2, r3
 8004376:	d803      	bhi.n	8004380 <BCC_Reg_WriteSpi+0x2c>
 8004378:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800437c:	2b00      	cmp	r3, #0
 800437e:	da01      	bge.n	8004384 <BCC_Reg_WriteSpi+0x30>
    {
        return BCC_STATUS_PARAM_RANGE;
 8004380:	2301      	movs	r3, #1
 8004382:	e046      	b.n	8004412 <BCC_Reg_WriteSpi+0xbe>
    }

    /* Create frame for writing. */
    BCC_PackFrame(regVal, regAddr, cid, BCC_CMD_WRITE, txBuf);
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	78b9      	ldrb	r1, [r7, #2]
 8004388:	8838      	ldrh	r0, [r7, #0]
 800438a:	f107 0310 	add.w	r3, r7, #16
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	2302      	movs	r3, #2
 8004392:	f7ff feba 	bl	800410a <BCC_PackFrame>

    status = BCC_MCU_TransferSpi(drvConfig->drvInstance, txBuf, rxBuf);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f107 0208 	add.w	r2, r7, #8
 800439e:	f107 0110 	add.w	r1, r7, #16
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fe5c 	bl	8005060 <BCC_MCU_TransferSpi>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]
    if (status != BCC_STATUS_SUCCESS)
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <BCC_Reg_WriteSpi+0x62>
    {
        return status;
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	e02d      	b.n	8004412 <BCC_Reg_WriteSpi+0xbe>
    }

    /* Check CRC. */
    if ((status = BCC_CheckCRC(rxBuf)) != BCC_STATUS_SUCCESS)
 80043b6:	f107 0308 	add.w	r3, r7, #8
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fe28 	bl	8004010 <BCC_CheckCRC>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <BCC_Reg_WriteSpi+0x7a>
    {
        return status;
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	e021      	b.n	8004412 <BCC_Reg_WriteSpi+0xbe>
    }

    /* Check message counter. */
    if ((status = BCC_CheckMsgCntr(drvConfig, cid, rxBuf)) != BCC_STATUS_SUCCESS)
 80043ce:	f107 0208 	add.w	r2, r7, #8
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fe32 	bl	8004040 <BCC_CheckMsgCntr>
 80043dc:	4603      	mov	r3, r0
 80043de:	75fb      	strb	r3, [r7, #23]
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <BCC_Reg_WriteSpi+0x96>
    {
        return status;
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	e013      	b.n	8004412 <BCC_Reg_WriteSpi+0xbe>
    }

    /* Check whether all field except CRC and message counter are zero. */
    if (BCC_IS_NULL_RESP(rxBuf))
 80043ea:	7a3b      	ldrb	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10f      	bne.n	8004410 <BCC_Reg_WriteSpi+0xbc>
 80043f0:	7a7b      	ldrb	r3, [r7, #9]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10c      	bne.n	8004410 <BCC_Reg_WriteSpi+0xbc>
 80043f6:	7abb      	ldrb	r3, [r7, #10]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <BCC_Reg_WriteSpi+0xbc>
 80043fc:	7afb      	ldrb	r3, [r7, #11]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <BCC_Reg_WriteSpi+0xbc>
 8004402:	7b3b      	ldrb	r3, [r7, #12]
 8004404:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <BCC_Reg_WriteSpi+0xbc>
    {
        return BCC_STATUS_COM_NULL;
 800440c:	2307      	movs	r3, #7
 800440e:	e000      	b.n	8004412 <BCC_Reg_WriteSpi+0xbe>
    }

    return BCC_STATUS_SUCCESS;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <BCC_SendNopTpl>:
#endif


bcc_status_t BCC_SendNopTpl(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af02      	add	r7, sp, #8
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	70fb      	strb	r3, [r7, #3]
    uint8_t txBuf[BCC_MSG_SIZE]; /* Transmission buffer. */
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);

    if ((cid == BCC_CID_UNASSIG) || ((uint8_t)cid > drvConfig->devicesCnt))
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <BCC_SendNopTpl+0x1c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	789b      	ldrb	r3, [r3, #2]
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	429a      	cmp	r2, r3
 8004434:	d901      	bls.n	800443a <BCC_SendNopTpl+0x20>
    {
        return BCC_STATUS_PARAM_RANGE;
 8004436:	2301      	movs	r3, #1
 8004438:	e017      	b.n	800446a <BCC_SendNopTpl+0x50>
    }

    /* Create frame for writing.
    * Note: Register Data, Register Address and Message counter fields can
    * contain any value. */
    BCC_PackFrame(0x0000U, 0x00U, cid, BCC_CMD_NOOP, txBuf);
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	2100      	movs	r1, #0
 8004446:	2000      	movs	r0, #0
 8004448:	f7ff fe5f 	bl	800410a <BCC_PackFrame>

//    status = BCC_MCU_TransferTpl(drvConfig->drvInstance, txBuf, drvConfig->drvData.rxBuf, 1);
    if (status != BCC_STATUS_SUCCESS)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <BCC_SendNopTpl+0x3c>
    {
        return status;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	e009      	b.n	800446a <BCC_SendNopTpl+0x50>
    }

    /* Check the echo frame. */
    return BCC_CheckEchoFrame(txBuf, drvConfig->drvData.rxBuf);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fe16 	bl	8004094 <BCC_CheckEchoFrame>
 8004468:	4603      	mov	r3, r0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <BCC_SendNopSpi>:
 *                 BCC device. Intended for SPI mode only.
 *
 *END**************************************************************************/
bcc_status_t BCC_SendNopSpi(bcc_drv_config_t* const drvConfig,
    const bcc_cid_t cid)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b088      	sub	sp, #32
 8004476:	af02      	add	r7, sp, #8
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	70fb      	strb	r3, [r7, #3]
    uint8_t rxBuf[BCC_MSG_SIZE]; /* Buffer for receiving. */
    bcc_status_t status;

//    BCC_MCU_Assert(drvConfig != NULL);

    if ((cid == BCC_CID_UNASSIG) || ((uint8_t)cid > drvConfig->devicesCnt))
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <BCC_SendNopSpi+0x1c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	789b      	ldrb	r3, [r3, #2]
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	429a      	cmp	r2, r3
 800448c:	d901      	bls.n	8004492 <BCC_SendNopSpi+0x20>
    {
        return BCC_STATUS_PARAM_RANGE;
 800448e:	2301      	movs	r3, #1
 8004490:	e046      	b.n	8004520 <BCC_SendNopSpi+0xae>
    }

    /* Create frame for writing.
    * Note: Register Data, Register Address and Message counter fields can
    * contain any value. */
    BCC_PackFrame(0x0000U, 0x00U, cid, BCC_CMD_NOOP, txBuf);
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	f107 0310 	add.w	r3, r7, #16
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	2300      	movs	r3, #0
 800449c:	2100      	movs	r1, #0
 800449e:	2000      	movs	r0, #0
 80044a0:	f7ff fe33 	bl	800410a <BCC_PackFrame>

    status = BCC_MCU_TransferSpi(drvConfig->drvInstance, txBuf, rxBuf);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	f107 0208 	add.w	r2, r7, #8
 80044ac:	f107 0110 	add.w	r1, r7, #16
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fdd5 	bl	8005060 <BCC_MCU_TransferSpi>
 80044b6:	4603      	mov	r3, r0
 80044b8:	75fb      	strb	r3, [r7, #23]
    if (status != BCC_STATUS_SUCCESS)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <BCC_SendNopSpi+0x52>
    {
        return status;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	e02d      	b.n	8004520 <BCC_SendNopSpi+0xae>
    }

    /* Check CRC. */
    if ((status = BCC_CheckCRC(rxBuf)) != BCC_STATUS_SUCCESS)
 80044c4:	f107 0308 	add.w	r3, r7, #8
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fda1 	bl	8004010 <BCC_CheckCRC>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <BCC_SendNopSpi+0x6a>
    {
        return status;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	e021      	b.n	8004520 <BCC_SendNopSpi+0xae>
    }

    /* Check message counter. */
    if ((status = BCC_CheckMsgCntr(drvConfig, cid, rxBuf)) != BCC_STATUS_SUCCESS)
 80044dc:	f107 0208 	add.w	r2, r7, #8
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fdab 	bl	8004040 <BCC_CheckMsgCntr>
 80044ea:	4603      	mov	r3, r0
 80044ec:	75fb      	strb	r3, [r7, #23]
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <BCC_SendNopSpi+0x86>
    {
        return status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	e013      	b.n	8004520 <BCC_SendNopSpi+0xae>
    }

    /* Check whether all field except CRC and message counter are zero. */
    if (BCC_IS_NULL_RESP(rxBuf))
 80044f8:	7a3b      	ldrb	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <BCC_SendNopSpi+0xac>
 80044fe:	7a7b      	ldrb	r3, [r7, #9]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10c      	bne.n	800451e <BCC_SendNopSpi+0xac>
 8004504:	7abb      	ldrb	r3, [r7, #10]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <BCC_SendNopSpi+0xac>
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <BCC_SendNopSpi+0xac>
 8004510:	7b3b      	ldrb	r3, [r7, #12]
 8004512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <BCC_SendNopSpi+0xac>
    {
        return BCC_STATUS_COM_NULL;
 800451a:	2307      	movs	r3, #7
 800451c:	e000      	b.n	8004520 <BCC_SendNopSpi+0xae>
    }

    return BCC_STATUS_SUCCESS;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <getNtcCelsius>:
 * Description   : This function calculates temperature from raw value of
 *                 MEAS_ANx register.
 *
 *END**************************************************************************/
static int16_t getNtcCelsius(uint16_t regVal)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	80fb      	strh	r3, [r7, #6]
    int16_t left = 0;    /* Pointer (index) to the left border of interval
 8004532:	2300      	movs	r3, #0
 8004534:	81fb      	strh	r3, [r7, #14]
                            (NTC table). */
    int16_t right = NTC_TABLE_SIZE - 1; /* Pointer (index) to the right border
 8004536:	23a0      	movs	r3, #160	@ 0xa0
 8004538:	81bb      	strh	r3, [r7, #12]
    int16_t middle;      /* Pointer (index) to the middle of interval
                            (NTC table). */
    int8_t degTenths;    /* Fractional part of temperature value. */

    /* Check range of NTC table. */
    if (g_ntcTable[NTC_TABLE_SIZE - 1] > regVal)
 800453a:	4b31      	ldr	r3, [pc, #196]	@ (8004600 <getNtcCelsius+0xd8>)
 800453c:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	429a      	cmp	r2, r3
 8004544:	d202      	bcs.n	800454c <getNtcCelsius+0x24>
    {
        return NTC_COMP_TEMP(NTC_TABLE_SIZE - 1, 0);
 8004546:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800454a:	e053      	b.n	80045f4 <getNtcCelsius+0xcc>
    }
    if (g_ntcTable[0] < regVal)
 800454c:	4b2c      	ldr	r3, [pc, #176]	@ (8004600 <getNtcCelsius+0xd8>)
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	429a      	cmp	r2, r3
 8004554:	d901      	bls.n	800455a <getNtcCelsius+0x32>
    {
        return NTC_COMP_TEMP(0, 0);
 8004556:	4b2b      	ldr	r3, [pc, #172]	@ (8004604 <getNtcCelsius+0xdc>)
 8004558:	e04c      	b.n	80045f4 <getNtcCelsius+0xcc>
    }

    regVal &= BCC_GET_MEAS_RAW(regVal);
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004560:	80fb      	strh	r3, [r7, #6]

    /* Search for an array item which is close to the register value provided
    * by user (regVal). Used method is binary search in sorted array. */
    while ((left + 1) != right)
 8004562:	e013      	b.n	800458c <getNtcCelsius+0x64>
    {
        /* Split interval into halves. */
        middle = (left + right) >> 1U;
 8004564:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004568:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	105b      	asrs	r3, r3, #1
 8004570:	813b      	strh	r3, [r7, #8]
        if (g_ntcTable[middle] <= regVal)
 8004572:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004576:	4a22      	ldr	r2, [pc, #136]	@ (8004600 <getNtcCelsius+0xd8>)
 8004578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800457c:	88fa      	ldrh	r2, [r7, #6]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <getNtcCelsius+0x60>
        {
            /* Select right half (array items are in descending order). */
            right = middle;
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	81bb      	strh	r3, [r7, #12]
 8004586:	e001      	b.n	800458c <getNtcCelsius+0x64>
        }
        else
        {
            /* Select left half. */
            left = middle;
 8004588:	893b      	ldrh	r3, [r7, #8]
 800458a:	81fb      	strh	r3, [r7, #14]
    while ((left + 1) != right)
 800458c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	d1e4      	bne.n	8004564 <getNtcCelsius+0x3c>
    /* Notes: found table item (left) is less than the following item in the
    * table (left + 1).
    * The last item cannot be found (algorithm property). */

    /* Calculate fractional part of temperature. */
    degTenths = (g_ntcTable[left] - regVal) /
 800459a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800459e:	4a18      	ldr	r2, [pc, #96]	@ (8004600 <getNtcCelsius+0xd8>)
 80045a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045a4:	461a      	mov	r2, r3
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	1ad2      	subs	r2, r2, r3
            ((g_ntcTable[left] - g_ntcTable[left + 1]) / 10);
 80045aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045ae:	4914      	ldr	r1, [pc, #80]	@ (8004600 <getNtcCelsius+0xd8>)
 80045b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045ba:	3301      	adds	r3, #1
 80045bc:	4910      	ldr	r1, [pc, #64]	@ (8004600 <getNtcCelsius+0xd8>)
 80045be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80045c2:	1ac3      	subs	r3, r0, r3
 80045c4:	4910      	ldr	r1, [pc, #64]	@ (8004608 <getNtcCelsius+0xe0>)
 80045c6:	fb81 0103 	smull	r0, r1, r1, r3
 80045ca:	1089      	asrs	r1, r1, #2
 80045cc:	17db      	asrs	r3, r3, #31
 80045ce:	1acb      	subs	r3, r1, r3
    degTenths = (g_ntcTable[left] - regVal) /
 80045d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80045d4:	72fb      	strb	r3, [r7, #11]
    return NTC_COMP_TEMP(left, degTenths);
 80045d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045da:	3b28      	subs	r3, #40	@ 0x28
 80045dc:	b29b      	uxth	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	0092      	lsls	r2, r2, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	b21b      	sxth	r3, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	200005c0 	.word	0x200005c0
 8004604:	fffffe70 	.word	0xfffffe70
 8004608:	66666667 	.word	0x66666667

0800460c <getMeasurements>:
 * Description   : This function starts on-demand conversion and reads measured
 *                 values.
 *
 *END**************************************************************************/
static bcc_status_t getMeasurements(uint8_t cid, uint16_t measurements[])
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	71fb      	strb	r3, [r7, #7]
    bcc_status_t error;

    /* Start conversion and wait for the conversion time. */
    error = BCC_Meas_StartAndWait(&g_bccData.drvConfig, cid, BCC_AVG_1);
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2200      	movs	r2, #0
 800461c:	4619      	mov	r1, r3
 800461e:	480a      	ldr	r0, [pc, #40]	@ (8004648 <getMeasurements+0x3c>)
 8004620:	f7ff f969 	bl	80038f6 <BCC_Meas_StartAndWait>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
    if (error != BCC_STATUS_SUCCESS)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <getMeasurements+0x26>
    {
        return error;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	e006      	b.n	8004640 <getMeasurements+0x34>
    }

    /* Read measured values. */
    return BCC_Meas_GetRawValues(&g_bccData.drvConfig, cid, measurements);
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	4619      	mov	r1, r3
 8004638:	4803      	ldr	r0, [pc, #12]	@ (8004648 <getMeasurements+0x3c>)
 800463a:	f7ff f9cc 	bl	80039d6 <BCC_Meas_GetRawValues>
 800463e:	4603      	mov	r3, r0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000128 	.word	0x20000128

0800464c <printMeas>:
 *                 output.
 *
 *END**************************************************************************/
static void printMeas(const char *regName, uint16_t rawVal, uint32_t resVal,
    const char *unit)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	460b      	mov	r3, r1
 800465a:	817b      	strh	r3, [r7, #10]
    printf("  | %s\t| %d %s  \t| 0x%04x\t|\r\n", regName, resVal, unit, rawVal);
 800465c:	897b      	ldrh	r3, [r7, #10]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	4803      	ldr	r0, [pc, #12]	@ (8004674 <printMeas+0x28>)
 8004668:	f000 fdfc 	bl	8005264 <iprintf>
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	08006b78 	.word	0x08006b78

08004678 <printANxTemp>:
 * Description   : This function converts raw value of ANx register to
 *                 temperature. Result is printed to serial console output.
 *
 *END**************************************************************************/
static void printANxTemp(const char *regName, uint16_t regVal)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af02      	add	r7, sp, #8
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
    int16_t resVal;
    int16_t degC;

    resVal = getNtcCelsius(regVal);
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff4e 	bl	8004528 <getNtcCelsius>
 800468c:	4603      	mov	r3, r0
 800468e:	81fb      	strh	r3, [r7, #14]
    degC = resVal / 10;
 8004690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004694:	4a15      	ldr	r2, [pc, #84]	@ (80046ec <printANxTemp+0x74>)
 8004696:	fb82 1203 	smull	r1, r2, r2, r3
 800469a:	1092      	asrs	r2, r2, #2
 800469c:	17db      	asrs	r3, r3, #31
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	81bb      	strh	r3, [r7, #12]

    printf("  | %s\t| %d.%d degC\t| 0x%04x\t|\r\n", regName, degC,
 80046a2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80046a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	dd09      	ble.n	80046c2 <printANxTemp+0x4a>
            (resVal > 0) ? resVal - degC * 10 : degC * 10 - resVal, regVal);
 80046ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80046b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046b6:	f06f 0009 	mvn.w	r0, #9
 80046ba:	fb00 f303 	mul.w	r3, r0, r3
    printf("  | %s\t| %d.%d degC\t| 0x%04x\t|\r\n", regName, degC,
 80046be:	4413      	add	r3, r2
 80046c0:	e009      	b.n	80046d6 <printANxTemp+0x5e>
            (resVal > 0) ? resVal - degC * 10 : degC * 10 - resVal, regVal);
 80046c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	461a      	mov	r2, r3
 80046d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    printf("  | %s\t| %d.%d degC\t| 0x%04x\t|\r\n", regName, degC,
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	9200      	str	r2, [sp, #0]
 80046da:	460a      	mov	r2, r1
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4804      	ldr	r0, [pc, #16]	@ (80046f0 <printANxTemp+0x78>)
 80046e0:	f000 fdc0 	bl	8005264 <iprintf>
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	66666667 	.word	0x66666667
 80046f0:	08006b98 	.word	0x08006b98

080046f4 <printANxTempCustom>:


static void printANxTempCustom(const char *regName, uint16_t regVal)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	807b      	strh	r3, [r7, #2]
    int16_t resVal;
    int16_t degC;

    resVal = getNtcCelsius(regVal);
 8004700:	887b      	ldrh	r3, [r7, #2]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff10 	bl	8004528 <getNtcCelsius>
 8004708:	4603      	mov	r3, r0
 800470a:	81fb      	strh	r3, [r7, #14]
    degC = resVal / 10;
 800470c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004710:	4a14      	ldr	r2, [pc, #80]	@ (8004764 <printANxTempCustom+0x70>)
 8004712:	fb82 1203 	smull	r1, r2, r2, r3
 8004716:	1092      	asrs	r2, r2, #2
 8004718:	17db      	asrs	r3, r3, #31
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	81bb      	strh	r3, [r7, #12]

    printf("%s: %d.%d degC \r\n", regName, degC,
 800471e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004726:	2b00      	cmp	r3, #0
 8004728:	dd09      	ble.n	800473e <printANxTempCustom+0x4a>
            (resVal > 0) ? resVal - degC * 10 : degC * 10 - resVal);
 800472a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800472e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004732:	f06f 0009 	mvn.w	r0, #9
 8004736:	fb00 f303 	mul.w	r3, r0, r3
    printf("%s: %d.%d degC \r\n", regName, degC,
 800473a:	4413      	add	r3, r2
 800473c:	e009      	b.n	8004752 <printANxTempCustom+0x5e>
            (resVal > 0) ? resVal - degC * 10 : degC * 10 - resVal);
 800473e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	461a      	mov	r2, r3
 800474c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    printf("%s: %d.%d degC \r\n", regName, degC,
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	460a      	mov	r2, r1
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4804      	ldr	r0, [pc, #16]	@ (8004768 <printANxTempCustom+0x74>)
 8004758:	f000 fd84 	bl	8005264 <iprintf>
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	66666667 	.word	0x66666667
 8004768:	08006bbc 	.word	0x08006bbc

0800476c <printMeasResults>:
 * Description   : This function prints content of the measurement registers
 *                 to serial console output.
 *
 *END**************************************************************************/
static void printMeasResults(uint16_t measurements[], uint8_t cid)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	70fb      	strb	r3, [r7, #3]
    uint32_t rawVal;   /* Raw value read from registers. */
    int32_t resVal;    /* Converted value. */

    printf("###############################################\r\n");
 8004778:	4862      	ldr	r0, [pc, #392]	@ (8004904 <printMeasResults+0x198>)
 800477a:	f000 fddb 	bl	8005334 <puts>
    printf("# CID %d (MC3377%sC): Measurements\r\n", cid,
 800477e:	78f9      	ldrb	r1, [r7, #3]
            (g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C) ?
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	3b01      	subs	r3, #1
 8004784:	4a60      	ldr	r2, [pc, #384]	@ (8004908 <printMeasResults+0x19c>)
 8004786:	4413      	add	r3, r2
 8004788:	78db      	ldrb	r3, [r3, #3]
    printf("# CID %d (MC3377%sC): Measurements\r\n", cid,
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <printMeasResults+0x26>
 800478e:	4b5f      	ldr	r3, [pc, #380]	@ (800490c <printMeasResults+0x1a0>)
 8004790:	e000      	b.n	8004794 <printMeasResults+0x28>
 8004792:	4b5f      	ldr	r3, [pc, #380]	@ (8004910 <printMeasResults+0x1a4>)
 8004794:	461a      	mov	r2, r3
 8004796:	485f      	ldr	r0, [pc, #380]	@ (8004914 <printMeasResults+0x1a8>)
 8004798:	f000 fd64 	bl	8005264 <iprintf>
                    "1" : "2");
    printf("###############################################\r\n\r\n");
 800479c:	485e      	ldr	r0, [pc, #376]	@ (8004918 <printMeasResults+0x1ac>)
 800479e:	f000 fdc9 	bl	8005334 <puts>

    printf("  -----------------------------------------------\r\n");
 80047a2:	485e      	ldr	r0, [pc, #376]	@ (800491c <printMeasResults+0x1b0>)
 80047a4:	f000 fdc6 	bl	8005334 <puts>
    printf("  | Measurement | Value    \t| Raw value\t|\r\n");
 80047a8:	485d      	ldr	r0, [pc, #372]	@ (8004920 <printMeasResults+0x1b4>)
 80047aa:	f000 fdc3 	bl	8005334 <puts>
    printf("  -----------------------------------------------\r\n");
 80047ae:	485b      	ldr	r0, [pc, #364]	@ (800491c <printMeasResults+0x1b0>)
 80047b0:	f000 fdc0 	bl	8005334 <puts>


    /* MC33771C TPL EVB does not support current measurement. */
    if ((g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33772C) ||
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	4a53      	ldr	r2, [pc, #332]	@ (8004908 <printMeasResults+0x19c>)
 80047ba:	4413      	add	r3, r2
 80047bc:	78db      	ldrb	r3, [r3, #3]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d004      	beq.n	80047cc <printMeasResults+0x60>
        (g_bccData.drvConfig.commMode == BCC_MODE_SPI))
 80047c2:	4b51      	ldr	r3, [pc, #324]	@ (8004908 <printMeasResults+0x19c>)
 80047c4:	785b      	ldrb	r3, [r3, #1]
    if ((g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33772C) ||
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 80d7 	bne.w	800497a <printMeasResults+0x20e>
    {
        /* Content of CC registers (raw values only).
         * CC registers resets on read. */
        resVal = BCC_GET_COULOMB_CNT(measurements[BCC_MSR_COULOMB_CNT1],
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3302      	adds	r3, #2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	3204      	adds	r2, #4
 80047d8:	8812      	ldrh	r2, [r2, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
                measurements[BCC_MSR_COULOMB_CNT2]);
        rawVal = (uint32_t)resVal;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	60bb      	str	r3, [r7, #8]
        printf("  | C CNT\t| %d  \t| 0x%08x\t|\r\n",  resVal, rawVal);
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	68f9      	ldr	r1, [r7, #12]
 80047e6:	484f      	ldr	r0, [pc, #316]	@ (8004924 <printMeasResults+0x1b8>)
 80047e8:	f000 fd3c 	bl	8005264 <iprintf>
        printMeas("CC SAMPLES", measurements[BCC_MSR_CC_NB_SAMPLES],
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8819      	ldrh	r1, [r3, #0]
                measurements[BCC_MSR_CC_NB_SAMPLES], " ");
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	881b      	ldrh	r3, [r3, #0]
        printMeas("CC SAMPLES", measurements[BCC_MSR_CC_NB_SAMPLES],
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004928 <printMeasResults+0x1bc>)
 80047f8:	484c      	ldr	r0, [pc, #304]	@ (800492c <printMeasResults+0x1c0>)
 80047fa:	f7ff ff27 	bl	800464c <printMeas>

        /* ISENSE value in uV. */
        rawVal = BCC_GET_ISENSE_RAW(measurements[BCC_MSR_ISENSE1],
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3306      	adds	r3, #6
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	011a      	lsls	r2, r3, #4
 8004806:	4b4a      	ldr	r3, [pc, #296]	@ (8004930 <printMeasResults+0x1c4>)
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	3208      	adds	r2, #8
 800480e:	8812      	ldrh	r2, [r2, #0]
 8004810:	f002 020f 	and.w	r2, r2, #15
 8004814:	4313      	orrs	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
                measurements[BCC_MSR_ISENSE2]);
        resVal = BCC_GET_ISENSE_VOLT(measurements[BCC_MSR_ISENSE1],
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3306      	adds	r3, #6
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	011a      	lsls	r2, r3, #4
 8004820:	4b43      	ldr	r3, [pc, #268]	@ (8004930 <printMeasResults+0x1c4>)
 8004822:	4013      	ands	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	3208      	adds	r2, #8
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	f002 020f 	and.w	r2, r2, #15
 800482e:	4313      	orrs	r3, r2
 8004830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01b      	beq.n	8004870 <printMeasResults+0x104>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3306      	adds	r3, #6
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	011a      	lsls	r2, r3, #4
 8004840:	4b3b      	ldr	r3, [pc, #236]	@ (8004930 <printMeasResults+0x1c4>)
 8004842:	4013      	ands	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	3208      	adds	r2, #8
 8004848:	8812      	ldrh	r2, [r2, #0]
 800484a:	f002 020f 	and.w	r2, r2, #15
 800484e:	4313      	orrs	r3, r2
 8004850:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8004854:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8004858:	461a      	mov	r2, r3
 800485a:	4613      	mov	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4413      	add	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4a34      	ldr	r2, [pc, #208]	@ (8004934 <printMeasResults+0x1c8>)
 8004864:	fb82 1203 	smull	r1, r2, r2, r3
 8004868:	1092      	asrs	r2, r2, #2
 800486a:	17db      	asrs	r3, r3, #31
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	e016      	b.n	800489e <printMeasResults+0x132>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3306      	adds	r3, #6
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	011a      	lsls	r2, r3, #4
 8004878:	4b2d      	ldr	r3, [pc, #180]	@ (8004930 <printMeasResults+0x1c4>)
 800487a:	4013      	ands	r3, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	3208      	adds	r2, #8
 8004880:	8812      	ldrh	r2, [r2, #0]
 8004882:	f002 020f 	and.w	r2, r2, #15
 8004886:	4313      	orrs	r3, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4613      	mov	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4a28      	ldr	r2, [pc, #160]	@ (8004934 <printMeasResults+0x1c8>)
 8004894:	fb82 1203 	smull	r1, r2, r2, r3
 8004898:	1092      	asrs	r2, r2, #2
 800489a:	17db      	asrs	r3, r3, #31
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	60fb      	str	r3, [r7, #12]
                measurements[BCC_MSR_ISENSE2]);
        printf("  | ISENSE\t| %d uV \t| 0x%08x\t|\r\n", resVal, rawVal);
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	4824      	ldr	r0, [pc, #144]	@ (8004938 <printMeasResults+0x1cc>)
 80048a6:	f000 fcdd 	bl	8005264 <iprintf>

        /* ISENSE value in mA. */
        resVal = BCC_GET_ISENSE_AMP(DEMO_RSHUNT, measurements[BCC_MSR_ISENSE1],
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3306      	adds	r3, #6
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	011a      	lsls	r2, r3, #4
 80048b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004930 <printMeasResults+0x1c4>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	3208      	adds	r2, #8
 80048ba:	8812      	ldrh	r2, [r2, #0]
 80048bc:	f002 020f 	and.w	r2, r2, #15
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d03a      	beq.n	8004940 <printMeasResults+0x1d4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3306      	adds	r3, #6
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	011a      	lsls	r2, r3, #4
 80048d2:	4b17      	ldr	r3, [pc, #92]	@ (8004930 <printMeasResults+0x1c4>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	3208      	adds	r2, #8
 80048da:	8812      	ldrh	r2, [r2, #0]
 80048dc:	f002 020f 	and.w	r2, r2, #15
 80048e0:	4313      	orrs	r3, r2
 80048e2:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 80048e6:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 80048ea:	461a      	mov	r2, r3
 80048ec:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	4a11      	ldr	r2, [pc, #68]	@ (800493c <printMeasResults+0x1d0>)
 80048f6:	fb82 1203 	smull	r1, r2, r2, r3
 80048fa:	1592      	asrs	r2, r2, #22
 80048fc:	17db      	asrs	r3, r3, #31
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	e035      	b.n	800496e <printMeasResults+0x202>
 8004902:	bf00      	nop
 8004904:	08006bd0 	.word	0x08006bd0
 8004908:	20000128 	.word	0x20000128
 800490c:	08006c04 	.word	0x08006c04
 8004910:	08006c08 	.word	0x08006c08
 8004914:	08006c0c 	.word	0x08006c0c
 8004918:	08006c34 	.word	0x08006c34
 800491c:	08006c68 	.word	0x08006c68
 8004920:	08006c9c 	.word	0x08006c9c
 8004924:	08006cc8 	.word	0x08006cc8
 8004928:	08006ce8 	.word	0x08006ce8
 800492c:	08006cec 	.word	0x08006cec
 8004930:	0007fff0 	.word	0x0007fff0
 8004934:	66666667 	.word	0x66666667
 8004938:	08006cf8 	.word	0x08006cf8
 800493c:	6b5fca6b 	.word	0x6b5fca6b
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3306      	adds	r3, #6
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	4bb6      	ldr	r3, [pc, #728]	@ (8004c24 <printMeasResults+0x4b8>)
 800494a:	4013      	ands	r3, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	3208      	adds	r2, #8
 8004950:	8812      	ldrh	r2, [r2, #0]
 8004952:	f002 020f 	and.w	r2, r2, #15
 8004956:	4313      	orrs	r3, r2
 8004958:	461a      	mov	r2, r3
 800495a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	4ab1      	ldr	r2, [pc, #708]	@ (8004c28 <printMeasResults+0x4bc>)
 8004964:	fb82 1203 	smull	r1, r2, r2, r3
 8004968:	1592      	asrs	r2, r2, #22
 800496a:	17db      	asrs	r3, r3, #31
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	60fb      	str	r3, [r7, #12]
                measurements[BCC_MSR_ISENSE2]);
        printf("  | ISENSE\t| %d mA \t| 0x%08x\t|\r\n", resVal, rawVal);
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	48ad      	ldr	r0, [pc, #692]	@ (8004c2c <printMeasResults+0x4c0>)
 8004976:	f000 fc75 	bl	8005264 <iprintf>
    }

    /* Stack voltage. */
    printMeas("STACK", measurements[BCC_MSR_STACK_VOLT],
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	330a      	adds	r3, #10
 800497e:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_STACK_VOLT(measurements[BCC_MSR_STACK_VOLT]) / 1000U, "mV");
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	330a      	adds	r3, #10
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800498a:	f645 725e 	movw	r2, #24414	@ 0x5f5e
 800498e:	fb02 f303 	mul.w	r3, r2, r3
    printMeas("STACK", measurements[BCC_MSR_STACK_VOLT],
 8004992:	4aa7      	ldr	r2, [pc, #668]	@ (8004c30 <printMeasResults+0x4c4>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	0b5a      	lsrs	r2, r3, #13
 800499a:	4ba6      	ldr	r3, [pc, #664]	@ (8004c34 <printMeasResults+0x4c8>)
 800499c:	48a6      	ldr	r0, [pc, #664]	@ (8004c38 <printMeasResults+0x4cc>)
 800499e:	f7ff fe55 	bl	800464c <printMeas>

    /* Cells voltage. */
    printMeas("CELL 1", measurements[BCC_MSR_CELL_VOLT1],
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3326      	adds	r3, #38	@ 0x26
 80049a6:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT1]) / 1000U, "mV");
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3326      	adds	r3, #38	@ 0x26
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80049b2:	4aa2      	ldr	r2, [pc, #648]	@ (8004c3c <printMeasResults+0x4d0>)
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	0a5b      	lsrs	r3, r3, #9
    printMeas("CELL 1", measurements[BCC_MSR_CELL_VOLT1],
 80049ba:	4aa1      	ldr	r2, [pc, #644]	@ (8004c40 <printMeasResults+0x4d4>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	099a      	lsrs	r2, r3, #6
 80049c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c34 <printMeasResults+0x4c8>)
 80049c4:	489f      	ldr	r0, [pc, #636]	@ (8004c44 <printMeasResults+0x4d8>)
 80049c6:	f7ff fe41 	bl	800464c <printMeas>
    printMeas("CELL 2", measurements[BCC_MSR_CELL_VOLT2],
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3324      	adds	r3, #36	@ 0x24
 80049ce:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT2]) / 1000U, "mV");
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3324      	adds	r3, #36	@ 0x24
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80049da:	4a98      	ldr	r2, [pc, #608]	@ (8004c3c <printMeasResults+0x4d0>)
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	0a5b      	lsrs	r3, r3, #9
    printMeas("CELL 2", measurements[BCC_MSR_CELL_VOLT2],
 80049e2:	4a97      	ldr	r2, [pc, #604]	@ (8004c40 <printMeasResults+0x4d4>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	099a      	lsrs	r2, r3, #6
 80049ea:	4b92      	ldr	r3, [pc, #584]	@ (8004c34 <printMeasResults+0x4c8>)
 80049ec:	4896      	ldr	r0, [pc, #600]	@ (8004c48 <printMeasResults+0x4dc>)
 80049ee:	f7ff fe2d 	bl	800464c <printMeas>
    printMeas("CELL 3", measurements[BCC_MSR_CELL_VOLT3],
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3322      	adds	r3, #34	@ 0x22
 80049f6:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT3]) / 1000U, "mV");
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3322      	adds	r3, #34	@ 0x22
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a02:	4a8e      	ldr	r2, [pc, #568]	@ (8004c3c <printMeasResults+0x4d0>)
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	0a5b      	lsrs	r3, r3, #9
    printMeas("CELL 3", measurements[BCC_MSR_CELL_VOLT3],
 8004a0a:	4a8d      	ldr	r2, [pc, #564]	@ (8004c40 <printMeasResults+0x4d4>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	099a      	lsrs	r2, r3, #6
 8004a12:	4b88      	ldr	r3, [pc, #544]	@ (8004c34 <printMeasResults+0x4c8>)
 8004a14:	488d      	ldr	r0, [pc, #564]	@ (8004c4c <printMeasResults+0x4e0>)
 8004a16:	f7ff fe19 	bl	800464c <printMeas>
    printMeas("CELL 4", measurements[BCC_MSR_CELL_VOLT4],
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3320      	adds	r3, #32
 8004a1e:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT4]) / 1000U, "mV");
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3320      	adds	r3, #32
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a2a:	4a84      	ldr	r2, [pc, #528]	@ (8004c3c <printMeasResults+0x4d0>)
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	0a5b      	lsrs	r3, r3, #9
    printMeas("CELL 4", measurements[BCC_MSR_CELL_VOLT4],
 8004a32:	4a83      	ldr	r2, [pc, #524]	@ (8004c40 <printMeasResults+0x4d4>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	099a      	lsrs	r2, r3, #6
 8004a3a:	4b7e      	ldr	r3, [pc, #504]	@ (8004c34 <printMeasResults+0x4c8>)
 8004a3c:	4884      	ldr	r0, [pc, #528]	@ (8004c50 <printMeasResults+0x4e4>)
 8004a3e:	f7ff fe05 	bl	800464c <printMeas>
    printMeas("CELL 5", measurements[BCC_MSR_CELL_VOLT5],
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	331e      	adds	r3, #30
 8004a46:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT5]) / 1000U, "mV");
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	331e      	adds	r3, #30
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a52:	4a7a      	ldr	r2, [pc, #488]	@ (8004c3c <printMeasResults+0x4d0>)
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	0a5b      	lsrs	r3, r3, #9
    printMeas("CELL 5", measurements[BCC_MSR_CELL_VOLT5],
 8004a5a:	4a79      	ldr	r2, [pc, #484]	@ (8004c40 <printMeasResults+0x4d4>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	099a      	lsrs	r2, r3, #6
 8004a62:	4b74      	ldr	r3, [pc, #464]	@ (8004c34 <printMeasResults+0x4c8>)
 8004a64:	487b      	ldr	r0, [pc, #492]	@ (8004c54 <printMeasResults+0x4e8>)
 8004a66:	f7ff fdf1 	bl	800464c <printMeas>
    printMeas("CELL 6", measurements[BCC_MSR_CELL_VOLT6],
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	331c      	adds	r3, #28
 8004a6e:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT6]) / 1000U, "mV");
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	331c      	adds	r3, #28
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a7a:	4a70      	ldr	r2, [pc, #448]	@ (8004c3c <printMeasResults+0x4d0>)
 8004a7c:	fb02 f303 	mul.w	r3, r2, r3
 8004a80:	0a5b      	lsrs	r3, r3, #9
    printMeas("CELL 6", measurements[BCC_MSR_CELL_VOLT6],
 8004a82:	4a6f      	ldr	r2, [pc, #444]	@ (8004c40 <printMeasResults+0x4d4>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	099a      	lsrs	r2, r3, #6
 8004a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c34 <printMeasResults+0x4c8>)
 8004a8c:	4872      	ldr	r0, [pc, #456]	@ (8004c58 <printMeasResults+0x4ec>)
 8004a8e:	f7ff fddd 	bl	800464c <printMeas>

    /* Send NOP command to all nodes in order to prevent communication timeout. */
    sendNops();
 8004a92:	f7fb fffb 	bl	8000a8c <sendNops>

    if (g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C)
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	4a70      	ldr	r2, [pc, #448]	@ (8004c5c <printMeasResults+0x4f0>)
 8004a9c:	4413      	add	r3, r2
 8004a9e:	78db      	ldrb	r3, [r3, #3]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 80a0 	bne.w	8004be6 <printMeasResults+0x47a>
    {
        printMeas("CELL 7", measurements[BCC_MSR_CELL_VOLT7],
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	331a      	adds	r3, #26
 8004aaa:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT7]) / 1000U, "mV");
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	331a      	adds	r3, #26
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ab6:	4a61      	ldr	r2, [pc, #388]	@ (8004c3c <printMeasResults+0x4d0>)
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	0a5b      	lsrs	r3, r3, #9
        printMeas("CELL 7", measurements[BCC_MSR_CELL_VOLT7],
 8004abe:	4a60      	ldr	r2, [pc, #384]	@ (8004c40 <printMeasResults+0x4d4>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	099a      	lsrs	r2, r3, #6
 8004ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c34 <printMeasResults+0x4c8>)
 8004ac8:	4865      	ldr	r0, [pc, #404]	@ (8004c60 <printMeasResults+0x4f4>)
 8004aca:	f7ff fdbf 	bl	800464c <printMeas>
        printMeas("CELL 8", measurements[BCC_MSR_CELL_VOLT8],
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3318      	adds	r3, #24
 8004ad2:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT8]) / 1000U, "mV");
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3318      	adds	r3, #24
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ade:	4a57      	ldr	r2, [pc, #348]	@ (8004c3c <printMeasResults+0x4d0>)
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	0a5b      	lsrs	r3, r3, #9
        printMeas("CELL 8", measurements[BCC_MSR_CELL_VOLT8],
 8004ae6:	4a56      	ldr	r2, [pc, #344]	@ (8004c40 <printMeasResults+0x4d4>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	099a      	lsrs	r2, r3, #6
 8004aee:	4b51      	ldr	r3, [pc, #324]	@ (8004c34 <printMeasResults+0x4c8>)
 8004af0:	485c      	ldr	r0, [pc, #368]	@ (8004c64 <printMeasResults+0x4f8>)
 8004af2:	f7ff fdab 	bl	800464c <printMeas>
        printMeas("CELL 9", measurements[BCC_MSR_CELL_VOLT9],
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3316      	adds	r3, #22
 8004afa:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT9]) / 1000U, "mV");
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3316      	adds	r3, #22
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b06:	4a4d      	ldr	r2, [pc, #308]	@ (8004c3c <printMeasResults+0x4d0>)
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	0a5b      	lsrs	r3, r3, #9
        printMeas("CELL 9", measurements[BCC_MSR_CELL_VOLT9],
 8004b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8004c40 <printMeasResults+0x4d4>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	099a      	lsrs	r2, r3, #6
 8004b16:	4b47      	ldr	r3, [pc, #284]	@ (8004c34 <printMeasResults+0x4c8>)
 8004b18:	4853      	ldr	r0, [pc, #332]	@ (8004c68 <printMeasResults+0x4fc>)
 8004b1a:	f7ff fd97 	bl	800464c <printMeas>
        printMeas("CELL 10", measurements[BCC_MSR_CELL_VOLT10],
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3314      	adds	r3, #20
 8004b22:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT10]) / 1000U, "mV");
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3314      	adds	r3, #20
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b2e:	4a43      	ldr	r2, [pc, #268]	@ (8004c3c <printMeasResults+0x4d0>)
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	0a5b      	lsrs	r3, r3, #9
        printMeas("CELL 10", measurements[BCC_MSR_CELL_VOLT10],
 8004b36:	4a42      	ldr	r2, [pc, #264]	@ (8004c40 <printMeasResults+0x4d4>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	099a      	lsrs	r2, r3, #6
 8004b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c34 <printMeasResults+0x4c8>)
 8004b40:	484a      	ldr	r0, [pc, #296]	@ (8004c6c <printMeasResults+0x500>)
 8004b42:	f7ff fd83 	bl	800464c <printMeas>
        printMeas("CELL 11", measurements[BCC_MSR_CELL_VOLT11],
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3312      	adds	r3, #18
 8004b4a:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT11]) / 1000U, "mV");
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3312      	adds	r3, #18
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b56:	4a39      	ldr	r2, [pc, #228]	@ (8004c3c <printMeasResults+0x4d0>)
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
 8004b5c:	0a5b      	lsrs	r3, r3, #9
        printMeas("CELL 11", measurements[BCC_MSR_CELL_VOLT11],
 8004b5e:	4a38      	ldr	r2, [pc, #224]	@ (8004c40 <printMeasResults+0x4d4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	099a      	lsrs	r2, r3, #6
 8004b66:	4b33      	ldr	r3, [pc, #204]	@ (8004c34 <printMeasResults+0x4c8>)
 8004b68:	4841      	ldr	r0, [pc, #260]	@ (8004c70 <printMeasResults+0x504>)
 8004b6a:	f7ff fd6f 	bl	800464c <printMeas>
        printMeas("CELL 12", measurements[BCC_MSR_CELL_VOLT12],
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3310      	adds	r3, #16
 8004b72:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT12]) / 1000U, "mV");
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3310      	adds	r3, #16
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c3c <printMeasResults+0x4d0>)
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	0a5b      	lsrs	r3, r3, #9
        printMeas("CELL 12", measurements[BCC_MSR_CELL_VOLT12],
 8004b86:	4a2e      	ldr	r2, [pc, #184]	@ (8004c40 <printMeasResults+0x4d4>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	099a      	lsrs	r2, r3, #6
 8004b8e:	4b29      	ldr	r3, [pc, #164]	@ (8004c34 <printMeasResults+0x4c8>)
 8004b90:	4838      	ldr	r0, [pc, #224]	@ (8004c74 <printMeasResults+0x508>)
 8004b92:	f7ff fd5b 	bl	800464c <printMeas>
        printMeas("CELL 13", measurements[BCC_MSR_CELL_VOLT13],
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	330e      	adds	r3, #14
 8004b9a:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT13]) / 1000U, "mV");
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	330e      	adds	r3, #14
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ba6:	4a25      	ldr	r2, [pc, #148]	@ (8004c3c <printMeasResults+0x4d0>)
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	0a5b      	lsrs	r3, r3, #9
        printMeas("CELL 13", measurements[BCC_MSR_CELL_VOLT13],
 8004bae:	4a24      	ldr	r2, [pc, #144]	@ (8004c40 <printMeasResults+0x4d4>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	099a      	lsrs	r2, r3, #6
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c34 <printMeasResults+0x4c8>)
 8004bb8:	482f      	ldr	r0, [pc, #188]	@ (8004c78 <printMeasResults+0x50c>)
 8004bba:	f7ff fd47 	bl	800464c <printMeas>
        printMeas("CELL 14", measurements[BCC_MSR_CELL_VOLT14],
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_CELL_VOLT14]) / 1000U, "mV");
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004bce:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <printMeasResults+0x4d0>)
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	0a5b      	lsrs	r3, r3, #9
        printMeas("CELL 14", measurements[BCC_MSR_CELL_VOLT14],
 8004bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c40 <printMeasResults+0x4d4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	099a      	lsrs	r2, r3, #6
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <printMeasResults+0x4c8>)
 8004be0:	4826      	ldr	r0, [pc, #152]	@ (8004c7c <printMeasResults+0x510>)
 8004be2:	f7ff fd33 	bl	800464c <printMeas>
     *               Voltage measurement at GPIO5 and GPIO6.
     * MC33772C SPI: Temperature measurements at GPIO1, GPIO3, GPIO4 pins and
     *               Voltage measurement at GPIO5 and GPIO6. */
#ifdef TPL
#endif
    printANxTemp("AN 0", measurements[BCC_MSR_AN0]);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3334      	adds	r3, #52	@ 0x34
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	4619      	mov	r1, r3
 8004bee:	4824      	ldr	r0, [pc, #144]	@ (8004c80 <printMeasResults+0x514>)
 8004bf0:	f7ff fd42 	bl	8004678 <printANxTemp>
    printANxTemp("AN 1", measurements[BCC_MSR_AN1]);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3332      	adds	r3, #50	@ 0x32
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4821      	ldr	r0, [pc, #132]	@ (8004c84 <printMeasResults+0x518>)
 8004bfe:	f7ff fd3b 	bl	8004678 <printANxTemp>
#ifdef TPL
    printANxTemp("AN 2", measurements[BCC_MSR_AN2]);
#endif
    printANxTemp("AN 3", measurements[BCC_MSR_AN3]);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	332e      	adds	r3, #46	@ 0x2e
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	481f      	ldr	r0, [pc, #124]	@ (8004c88 <printMeasResults+0x51c>)
 8004c0c:	f7ff fd34 	bl	8004678 <printANxTemp>
    printANxTemp("AN 4", measurements[BCC_MSR_AN4]);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	332c      	adds	r3, #44	@ 0x2c
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	4619      	mov	r1, r3
 8004c18:	481c      	ldr	r0, [pc, #112]	@ (8004c8c <printMeasResults+0x520>)
 8004c1a:	f7ff fd2d 	bl	8004678 <printANxTemp>

    if (g_bccData.drvConfig.device[cid - 1] == BCC_DEVICE_MC33771C)
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	e036      	b.n	8004c90 <printMeasResults+0x524>
 8004c22:	bf00      	nop
 8004c24:	0007fff0 	.word	0x0007fff0
 8004c28:	6b5fca6b 	.word	0x6b5fca6b
 8004c2c:	08006d1c 	.word	0x08006d1c
 8004c30:	d1b71759 	.word	0xd1b71759
 8004c34:	08006d40 	.word	0x08006d40
 8004c38:	08006d44 	.word	0x08006d44
 8004c3c:	0001312d 	.word	0x0001312d
 8004c40:	10624dd3 	.word	0x10624dd3
 8004c44:	08006d4c 	.word	0x08006d4c
 8004c48:	08006d54 	.word	0x08006d54
 8004c4c:	08006d5c 	.word	0x08006d5c
 8004c50:	08006d64 	.word	0x08006d64
 8004c54:	08006d6c 	.word	0x08006d6c
 8004c58:	08006d74 	.word	0x08006d74
 8004c5c:	20000128 	.word	0x20000128
 8004c60:	08006d7c 	.word	0x08006d7c
 8004c64:	08006d84 	.word	0x08006d84
 8004c68:	08006d8c 	.word	0x08006d8c
 8004c6c:	08006d94 	.word	0x08006d94
 8004c70:	08006d9c 	.word	0x08006d9c
 8004c74:	08006da4 	.word	0x08006da4
 8004c78:	08006dac 	.word	0x08006dac
 8004c7c:	08006db4 	.word	0x08006db4
 8004c80:	08006dbc 	.word	0x08006dbc
 8004c84:	08006dc4 	.word	0x08006dc4
 8004c88:	08006dcc 	.word	0x08006dcc
 8004c8c:	08006dd4 	.word	0x08006dd4
 8004c90:	3b01      	subs	r3, #1
 8004c92:	4a55      	ldr	r2, [pc, #340]	@ (8004de8 <printMeasResults+0x67c>)
 8004c94:	4413      	add	r3, r2
 8004c96:	78db      	ldrb	r3, [r3, #3]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10e      	bne.n	8004cba <printMeasResults+0x54e>
    {
        printANxTemp("AN 5", measurements[BCC_MSR_AN5]);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	332a      	adds	r3, #42	@ 0x2a
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4851      	ldr	r0, [pc, #324]	@ (8004dec <printMeasResults+0x680>)
 8004ca6:	f7ff fce7 	bl	8004678 <printANxTemp>
        printANxTemp("AN 6", measurements[BCC_MSR_AN6]);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3328      	adds	r3, #40	@ 0x28
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	484f      	ldr	r0, [pc, #316]	@ (8004df0 <printMeasResults+0x684>)
 8004cb4:	f7ff fce0 	bl	8004678 <printANxTemp>
 8004cb8:	e027      	b.n	8004d0a <printMeasResults+0x59e>
    }
    else
    {
        printMeas("AN 5", measurements[BCC_MSR_AN5],
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	332a      	adds	r3, #42	@ 0x2a
 8004cbe:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_AN5]) / 1000U, "mV");
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	332a      	adds	r3, #42	@ 0x2a
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004cca:	4a4a      	ldr	r2, [pc, #296]	@ (8004df4 <printMeasResults+0x688>)
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	0a5b      	lsrs	r3, r3, #9
        printMeas("AN 5", measurements[BCC_MSR_AN5],
 8004cd2:	4a49      	ldr	r2, [pc, #292]	@ (8004df8 <printMeasResults+0x68c>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	099a      	lsrs	r2, r3, #6
 8004cda:	4b48      	ldr	r3, [pc, #288]	@ (8004dfc <printMeasResults+0x690>)
 8004cdc:	4843      	ldr	r0, [pc, #268]	@ (8004dec <printMeasResults+0x680>)
 8004cde:	f7ff fcb5 	bl	800464c <printMeas>
        printMeas("AN 6", measurements[BCC_MSR_AN6],
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3328      	adds	r3, #40	@ 0x28
 8004ce6:	8819      	ldrh	r1, [r3, #0]
                BCC_GET_VOLT(measurements[BCC_MSR_AN6]) / 1000U, "mV");
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3328      	adds	r3, #40	@ 0x28
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004cf2:	4a40      	ldr	r2, [pc, #256]	@ (8004df4 <printMeasResults+0x688>)
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	0a5b      	lsrs	r3, r3, #9
        printMeas("AN 6", measurements[BCC_MSR_AN6],
 8004cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8004df8 <printMeasResults+0x68c>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	099a      	lsrs	r2, r3, #6
 8004d02:	4b3e      	ldr	r3, [pc, #248]	@ (8004dfc <printMeasResults+0x690>)
 8004d04:	483a      	ldr	r0, [pc, #232]	@ (8004df0 <printMeasResults+0x684>)
 8004d06:	f7ff fca1 	bl	800464c <printMeas>
    }

    /* IC temperature measurement. */
    resVal = BCC_GET_IC_TEMP_C(measurements[BCC_MSR_ICTEMP]);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3336      	adds	r3, #54	@ 0x36
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004d14:	015b      	lsls	r3, r3, #5
 8004d16:	f5a3 2385 	sub.w	r3, r3, #272384	@ 0x42800
 8004d1a:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8004d1e:	4a38      	ldr	r2, [pc, #224]	@ (8004e00 <printMeasResults+0x694>)
 8004d20:	fb82 1203 	smull	r1, r2, r2, r3
 8004d24:	1152      	asrs	r2, r2, #5
 8004d26:	17db      	asrs	r3, r3, #31
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	b21b      	sxth	r3, r3
 8004d2c:	60fb      	str	r3, [r7, #12]
    printf("  | IC TEMP\t| %d.%d degC\t| 0x%04x\t|\r\n", resVal/10,
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a34      	ldr	r2, [pc, #208]	@ (8004e04 <printMeasResults+0x698>)
 8004d32:	fb82 1203 	smull	r1, r2, r2, r3
 8004d36:	1092      	asrs	r2, r2, #2
 8004d38:	17db      	asrs	r3, r3, #31
 8004d3a:	1ad0      	subs	r0, r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	dd0c      	ble.n	8004d5c <printMeasResults+0x5f0>
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	4b2f      	ldr	r3, [pc, #188]	@ (8004e04 <printMeasResults+0x698>)
 8004d46:	fb83 2301 	smull	r2, r3, r3, r1
 8004d4a:	109a      	asrs	r2, r3, #2
 8004d4c:	17cb      	asrs	r3, r1, #31
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	1aca      	subs	r2, r1, r3
 8004d5a:	e00c      	b.n	8004d76 <printMeasResults+0x60a>
            (resVal > 0) ? resVal % 10 : (-resVal) % 10,
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4259      	negs	r1, r3
    printf("  | IC TEMP\t| %d.%d degC\t| 0x%04x\t|\r\n", resVal/10,
 8004d60:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <printMeasResults+0x698>)
 8004d62:	fb83 2301 	smull	r2, r3, r3, r1
 8004d66:	109a      	asrs	r2, r3, #2
 8004d68:	17cb      	asrs	r3, r1, #31
 8004d6a:	1ad2      	subs	r2, r2, r3
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	1aca      	subs	r2, r1, r3
            measurements[BCC_MSR_ICTEMP]);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3336      	adds	r3, #54	@ 0x36
 8004d7a:	881b      	ldrh	r3, [r3, #0]
    printf("  | IC TEMP\t| %d.%d degC\t| 0x%04x\t|\r\n", resVal/10,
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	4822      	ldr	r0, [pc, #136]	@ (8004e08 <printMeasResults+0x69c>)
 8004d80:	f000 fa70 	bl	8005264 <iprintf>


    /* ADCIA and ADCIB Band Gap Reference measurements. */
    printMeas("VBG ADC1A", measurements[BCC_MSR_VBGADC1A],
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3338      	adds	r3, #56	@ 0x38
 8004d88:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_VOLT(measurements[BCC_MSR_VBGADC1A]) / 1000U, "mV");
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3338      	adds	r3, #56	@ 0x38
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004d94:	4a17      	ldr	r2, [pc, #92]	@ (8004df4 <printMeasResults+0x688>)
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	0a5b      	lsrs	r3, r3, #9
    printMeas("VBG ADC1A", measurements[BCC_MSR_VBGADC1A],
 8004d9c:	4a16      	ldr	r2, [pc, #88]	@ (8004df8 <printMeasResults+0x68c>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	099a      	lsrs	r2, r3, #6
 8004da4:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <printMeasResults+0x690>)
 8004da6:	4819      	ldr	r0, [pc, #100]	@ (8004e0c <printMeasResults+0x6a0>)
 8004da8:	f7ff fc50 	bl	800464c <printMeas>
    printMeas("VBG ADC1B", measurements[BCC_MSR_VBGADC1B],
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	333a      	adds	r3, #58	@ 0x3a
 8004db0:	8819      	ldrh	r1, [r3, #0]
            BCC_GET_VOLT(measurements[BCC_MSR_VBGADC1B]) / 1000U, "mV");
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	333a      	adds	r3, #58	@ 0x3a
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8004df4 <printMeasResults+0x688>)
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	0a5b      	lsrs	r3, r3, #9
    printMeas("VBG ADC1B", measurements[BCC_MSR_VBGADC1B],
 8004dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8004df8 <printMeasResults+0x68c>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	099a      	lsrs	r2, r3, #6
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <printMeasResults+0x690>)
 8004dce:	4810      	ldr	r0, [pc, #64]	@ (8004e10 <printMeasResults+0x6a4>)
 8004dd0:	f7ff fc3c 	bl	800464c <printMeas>

    printf("  -----------------------------------------------\r\n");
 8004dd4:	480f      	ldr	r0, [pc, #60]	@ (8004e14 <printMeasResults+0x6a8>)
 8004dd6:	f000 faad 	bl	8005334 <puts>
    printf("\r\n");
 8004dda:	480f      	ldr	r0, [pc, #60]	@ (8004e18 <printMeasResults+0x6ac>)
 8004ddc:	f000 faaa 	bl	8005334 <puts>
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000128 	.word	0x20000128
 8004dec:	08006ddc 	.word	0x08006ddc
 8004df0:	08006de4 	.word	0x08006de4
 8004df4:	0001312d 	.word	0x0001312d
 8004df8:	10624dd3 	.word	0x10624dd3
 8004dfc:	08006d40 	.word	0x08006d40
 8004e00:	51eb851f 	.word	0x51eb851f
 8004e04:	66666667 	.word	0x66666667
 8004e08:	08006dec 	.word	0x08006dec
 8004e0c:	08006e14 	.word	0x08006e14
 8004e10:	08006e20 	.word	0x08006e20
 8004e14:	08006c68 	.word	0x08006c68
 8004e18:	08006e2c 	.word	0x08006e2c
 8004e1c:	00000000 	.word	0x00000000

08004e20 <fillNtcTable>:
 * Function Name : BCC_FillNtcTable
 * Description   : This function fills the NTC look up table.
 *
 *END**************************************************************************/
void fillNtcTable(const ntc_config_t* const ntcConfig)
{
 8004e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e24:	b088      	sub	sp, #32
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
    double ntcVal, expArg;
    uint16_t i = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	83fb      	strh	r3, [r7, #30]
    int32_t temp;

    for (temp = NTC_MINTEMP; temp <= NTC_MAXTEMP; temp++)
 8004e2e:	f06f 0327 	mvn.w	r3, #39	@ 0x27
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e07f      	b.n	8004f36 <fillNtcTable+0x116>
    {
        expArg = ntcConfig->beta * ((1.0 / (NTC_DEGC_0 + temp)) -
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb faca 	bl	80003d4 <__aeabi_ui2d>
 8004e40:	4604      	mov	r4, r0
 8004e42:	460d      	mov	r5, r1
 8004e44:	69b8      	ldr	r0, [r7, #24]
 8004e46:	f7fb fad5 	bl	80003f4 <__aeabi_i2d>
 8004e4a:	a341      	add	r3, pc, #260	@ (adr r3, 8004f50 <fillNtcTable+0x130>)
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f7fb f984 	bl	800015c <__adddf3>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	f04f 0000 	mov.w	r0, #0
 8004e5c:	4940      	ldr	r1, [pc, #256]	@ (8004f60 <fillNtcTable+0x140>)
 8004e5e:	f7fb fc5d 	bl	800071c <__aeabi_ddiv>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4690      	mov	r8, r2
 8004e68:	4699      	mov	r9, r3
                (1.0 / (NTC_DEGC_0 + ntcConfig->refTemp)));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	7b1b      	ldrb	r3, [r3, #12]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb fac0 	bl	80003f4 <__aeabi_i2d>
 8004e74:	a336      	add	r3, pc, #216	@ (adr r3, 8004f50 <fillNtcTable+0x130>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb f96f 	bl	800015c <__adddf3>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	f04f 0000 	mov.w	r0, #0
 8004e86:	4936      	ldr	r1, [pc, #216]	@ (8004f60 <fillNtcTable+0x140>)
 8004e88:	f7fb fc48 	bl	800071c <__aeabi_ddiv>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
        expArg = ntcConfig->beta * ((1.0 / (NTC_DEGC_0 + temp)) -
 8004e90:	4640      	mov	r0, r8
 8004e92:	4649      	mov	r1, r9
 8004e94:	f7fb f960 	bl	8000158 <__aeabi_dsub>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	f7fb fb12 	bl	80004c8 <__aeabi_dmul>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ntcVal = exp(expArg) * ntcConfig->refRes;
 8004eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eb0:	f001 f8ae 	bl	8006010 <exp>
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb fa89 	bl	80003d4 <__aeabi_ui2d>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	f7fb fafd 	bl	80004c8 <__aeabi_dmul>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	e9c7 2302 	strd	r2, r3, [r7, #8]
        g_ntcTable[i] = (uint16_t)round((ntcVal /
                (ntcVal + ntcConfig->rntc)) * MC33771C_MEAS_AN0_MEAS_AN_MASK);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fb fa7a 	bl	80003d4 <__aeabi_ui2d>
 8004ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ee4:	f7fb f93a 	bl	800015c <__adddf3>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
        g_ntcTable[i] = (uint16_t)round((ntcVal /
 8004eec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ef0:	f7fb fc14 	bl	800071c <__aeabi_ddiv>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4619      	mov	r1, r3
 8004efc:	a316      	add	r3, pc, #88	@ (adr r3, 8004f58 <fillNtcTable+0x138>)
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f7fb fae1 	bl	80004c8 <__aeabi_dmul>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	f001 f8bf 	bl	8006090 <round>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	8bfc      	ldrh	r4, [r7, #30]
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f7fb fd96 	bl	8000a4c <__aeabi_d2uiz>
 8004f20:	4603      	mov	r3, r0
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <fillNtcTable+0x144>)
 8004f26:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        i++;
 8004f2a:	8bfb      	ldrh	r3, [r7, #30]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	83fb      	strh	r3, [r7, #30]
    for (temp = NTC_MINTEMP; temp <= NTC_MAXTEMP; temp++)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	3301      	adds	r3, #1
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b78      	cmp	r3, #120	@ 0x78
 8004f3a:	f77f af7c 	ble.w	8004e36 <fillNtcTable+0x16>
    }
}
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f4a:	bf00      	nop
 8004f4c:	f3af 8000 	nop.w
 8004f50:	66666666 	.word	0x66666666
 8004f54:	40711266 	.word	0x40711266
 8004f58:	00000000 	.word	0x00000000
 8004f5c:	40dfffc0 	.word	0x40dfffc0
 8004f60:	3ff00000 	.word	0x3ff00000
 8004f64:	200005c0 	.word	0x200005c0

08004f68 <doMeasurements>:
 * Description   : This function reads the measurement registers and print them
 *                 to serial console output.
 *
 *END**************************************************************************/
bcc_status_t doMeasurements(uint8_t cid)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b092      	sub	sp, #72	@ 0x48
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
    uint16_t measurements[BCC_MEAS_CNT];
    bcc_status_t error;

    if ((error = getMeasurements(cid, measurements)) != BCC_STATUS_SUCCESS)
 8004f72:	f107 0208 	add.w	r2, r7, #8
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fb46 	bl	800460c <getMeasurements>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004f86:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <doMeasurements+0x2c>
    {
        return error;
 8004f8e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004f92:	e007      	b.n	8004fa4 <doMeasurements+0x3c>
    }

    printMeasResults(measurements, cid);
 8004f94:	79fa      	ldrb	r2, [r7, #7]
 8004f96:	f107 0308 	add.w	r3, r7, #8
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fbe5 	bl	800476c <printMeasResults>

    return BCC_STATUS_SUCCESS;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3748      	adds	r7, #72	@ 0x48
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <doGetTemp>:
 *                 to serial console output.
 *
 *END**************************************************************************/

bcc_status_t doGetTemp(uint8_t cid)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b092      	sub	sp, #72	@ 0x48
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	71fb      	strb	r3, [r7, #7]
	uint16_t measurements[BCC_MEAS_CNT];
	bcc_status_t error;

	if ((error = getMeasurements(cid, measurements)) != BCC_STATUS_SUCCESS)
 8004fb6:	f107 0208 	add.w	r2, r7, #8
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fb24 	bl	800460c <getMeasurements>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004fca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <doGetTemp+0x2c>
	{
	    return error;
 8004fd2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004fd6:	e009      	b.n	8004fec <doGetTemp+0x40>
	}

	printANxTempCustom("AN 0", measurements[BCC_MSR_AN0]);
 8004fd8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4805      	ldr	r0, [pc, #20]	@ (8004ff4 <doGetTemp+0x48>)
 8004fde:	f7ff fb89 	bl	80046f4 <printANxTempCustom>
	printANxTempCustom("AN 1", measurements[BCC_MSR_AN1]);
 8004fe2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4804      	ldr	r0, [pc, #16]	@ (8004ff8 <doGetTemp+0x4c>)
 8004fe8:	f7ff fb84 	bl	80046f4 <printANxTempCustom>
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3748      	adds	r7, #72	@ 0x48
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	08006dbc 	.word	0x08006dbc
 8004ff8:	08006dc4 	.word	0x08006dc4

08004ffc <BCC_MCU_StartTimeout>:
 *                 the time passed as a parameter, function
 *                 BCC_MCU_TimeoutExpired should signalize an expired timeout.
 *
 *END**************************************************************************/
bcc_status_t BCC_MCU_StartTimeout(const uint32_t timeoutUs)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
//
//        // Bắt đầu Timer với ngắt
//        HAL_TIM_Base_Start_IT(&htim3);
//
//        return 0; // Thành công
    return BCC_STATUS_SUCCESS;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <BCC_MCU_WriteRstPin>:
 * Function Name : BCC_MCU_WriteRstPin
 * Description   : Writes logic 0 or 1 to the RST pin.
 *
 *END**************************************************************************/
void BCC_MCU_WriteRstPin(const uint8_t drvInstance, const uint8_t value)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	460a      	mov	r2, r1
 800501a:	71fb      	strb	r3, [r7, #7]
 800501c:	4613      	mov	r3, r2
 800501e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(BMS_RST_GPIO_Port, BMS_RST_Pin, value);
 8005020:	79bb      	ldrb	r3, [r7, #6]
 8005022:	461a      	mov	r2, r3
 8005024:	2102      	movs	r1, #2
 8005026:	4803      	ldr	r0, [pc, #12]	@ (8005034 <BCC_MCU_WriteRstPin+0x24>)
 8005028:	f7fd f814 	bl	8002054 <HAL_GPIO_WritePin>
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40010c00 	.word	0x40010c00

08005038 <BCC_MCU_WriteCsbPin>:
 * Function Name : BCC_MCU_WriteCsbPin
 * Description   : Writes logic 0 or 1 to the CSB_TX pin.
 *
 *END**************************************************************************/
void BCC_MCU_WriteCsbPin(const uint8_t drvInstance, const uint8_t value)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	460a      	mov	r2, r1
 8005042:	71fb      	strb	r3, [r7, #7]
 8005044:	4613      	mov	r3, r2
 8005046:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, value);
 8005048:	79bb      	ldrb	r3, [r7, #6]
 800504a:	461a      	mov	r2, r3
 800504c:	2110      	movs	r1, #16
 800504e:	4803      	ldr	r0, [pc, #12]	@ (800505c <BCC_MCU_WriteCsbPin+0x24>)
 8005050:	f7fd f800 	bl	8002054 <HAL_GPIO_WritePin>
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40010800 	.word	0x40010800

08005060 <BCC_MCU_TransferSpi>:
 *                 for SPI mode only.
 *
 *END**************************************************************************/
bcc_status_t BCC_MCU_TransferSpi(const uint8_t drvInstance, uint8_t txBuf[],
    uint8_t rxBuf[])
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8
 8005066:	4603      	mov	r3, r0
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	73fb      	strb	r3, [r7, #15]
	char txmess[] = {0xF1};
 800506e:	23f1      	movs	r3, #241	@ 0xf1
 8005070:	753b      	strb	r3, [r7, #20]
	char rxmess[] = {0xF2};
 8005072:	23f2      	movs	r3, #242	@ 0xf2
 8005074:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8005076:	2200      	movs	r2, #0
 8005078:	2110      	movs	r1, #16
 800507a:	480b      	ldr	r0, [pc, #44]	@ (80050a8 <BCC_MCU_TransferSpi+0x48>)
 800507c:	f7fc ffea 	bl	8002054 <HAL_GPIO_WritePin>
//	HAL_SPI_TransmitReceive(&hspi1, &txBuf[1], &rxBuf[1], 1, HAL_MAX_DELAY);
//	HAL_SPI_TransmitReceive(&hspi1, &txBuf[2], &rxBuf[2], 1, HAL_MAX_DELAY);
//	HAL_SPI_TransmitReceive(&hspi1, &txBuf[3], &rxBuf[3], 1, HAL_MAX_DELAY);
//	HAL_SPI_TransmitReceive(&hspi1, &txBuf[4], &rxBuf[4], 1, HAL_MAX_DELAY);
//	HAL_SPI_TransmitReceive(&hspi1, &txBuf[5], &rxBuf[5], 1, HAL_MAX_DELAY);
	HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, 6, HAL_MAX_DELAY);
 8005080:	f04f 33ff 	mov.w	r3, #4294967295
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2306      	movs	r3, #6
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4807      	ldr	r0, [pc, #28]	@ (80050ac <BCC_MCU_TransferSpi+0x4c>)
 800508e:	f7fd fc8d 	bl	80029ac <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8005092:	2201      	movs	r2, #1
 8005094:	2110      	movs	r1, #16
 8005096:	4804      	ldr	r0, [pc, #16]	@ (80050a8 <BCC_MCU_TransferSpi+0x48>)
 8005098:	f7fc ffdc 	bl	8002054 <HAL_GPIO_WritePin>
//	HAL_UART_Transmit(&huart1, txmess, sizeof(txmess),HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1, txBuf, 6,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1, rxmess, sizeof(rxmess),HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1, rxBuf, 6,HAL_MAX_DELAY);
    return BCC_STATUS_SUCCESS;
 800509c:	2300      	movs	r3, #0

}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40010800 	.word	0x40010800
 80050ac:	20000088 	.word	0x20000088

080050b0 <BCC_MCU_WaitMs>:
 * Function Name : BCC_WaitMs
 * Description   : Waits for specified amount of milliseconds.
 *
 *END**************************************************************************/
void BCC_MCU_WaitMs(uint16_t delay)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fc fd3d 	bl	8001b3c <HAL_Delay>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <BCC_MCU_WaitUs>:
 *
 *END**************************************************************************/


void BCC_MCU_WaitUs(uint32_t delay)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
//	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
//	while (__HAL_TIM_GET_COUNTER(&htim1) < delay);  // wait for the counter to reach the us input in the parameter
	HAL_Delay(delay);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fc fd32 	bl	8001b3c <HAL_Delay>
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <std>:
 80050e0:	2300      	movs	r3, #0
 80050e2:	b510      	push	{r4, lr}
 80050e4:	4604      	mov	r4, r0
 80050e6:	e9c0 3300 	strd	r3, r3, [r0]
 80050ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050ee:	6083      	str	r3, [r0, #8]
 80050f0:	8181      	strh	r1, [r0, #12]
 80050f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80050f4:	81c2      	strh	r2, [r0, #14]
 80050f6:	6183      	str	r3, [r0, #24]
 80050f8:	4619      	mov	r1, r3
 80050fa:	2208      	movs	r2, #8
 80050fc:	305c      	adds	r0, #92	@ 0x5c
 80050fe:	f000 f9f9 	bl	80054f4 <memset>
 8005102:	4b0d      	ldr	r3, [pc, #52]	@ (8005138 <std+0x58>)
 8005104:	6224      	str	r4, [r4, #32]
 8005106:	6263      	str	r3, [r4, #36]	@ 0x24
 8005108:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <std+0x5c>)
 800510a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800510c:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <std+0x60>)
 800510e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005110:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <std+0x64>)
 8005112:	6323      	str	r3, [r4, #48]	@ 0x30
 8005114:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <std+0x68>)
 8005116:	429c      	cmp	r4, r3
 8005118:	d006      	beq.n	8005128 <std+0x48>
 800511a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800511e:	4294      	cmp	r4, r2
 8005120:	d002      	beq.n	8005128 <std+0x48>
 8005122:	33d0      	adds	r3, #208	@ 0xd0
 8005124:	429c      	cmp	r4, r3
 8005126:	d105      	bne.n	8005134 <std+0x54>
 8005128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800512c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005130:	f000 ba58 	b.w	80055e4 <__retarget_lock_init_recursive>
 8005134:	bd10      	pop	{r4, pc}
 8005136:	bf00      	nop
 8005138:	08005345 	.word	0x08005345
 800513c:	08005367 	.word	0x08005367
 8005140:	0800539f 	.word	0x0800539f
 8005144:	080053c3 	.word	0x080053c3
 8005148:	20000704 	.word	0x20000704

0800514c <stdio_exit_handler>:
 800514c:	4a02      	ldr	r2, [pc, #8]	@ (8005158 <stdio_exit_handler+0xc>)
 800514e:	4903      	ldr	r1, [pc, #12]	@ (800515c <stdio_exit_handler+0x10>)
 8005150:	4803      	ldr	r0, [pc, #12]	@ (8005160 <stdio_exit_handler+0x14>)
 8005152:	f000 b869 	b.w	8005228 <_fwalk_sglue>
 8005156:	bf00      	nop
 8005158:	20000010 	.word	0x20000010
 800515c:	08005e7d 	.word	0x08005e7d
 8005160:	20000020 	.word	0x20000020

08005164 <cleanup_stdio>:
 8005164:	6841      	ldr	r1, [r0, #4]
 8005166:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <cleanup_stdio+0x34>)
 8005168:	b510      	push	{r4, lr}
 800516a:	4299      	cmp	r1, r3
 800516c:	4604      	mov	r4, r0
 800516e:	d001      	beq.n	8005174 <cleanup_stdio+0x10>
 8005170:	f000 fe84 	bl	8005e7c <_fflush_r>
 8005174:	68a1      	ldr	r1, [r4, #8]
 8005176:	4b09      	ldr	r3, [pc, #36]	@ (800519c <cleanup_stdio+0x38>)
 8005178:	4299      	cmp	r1, r3
 800517a:	d002      	beq.n	8005182 <cleanup_stdio+0x1e>
 800517c:	4620      	mov	r0, r4
 800517e:	f000 fe7d 	bl	8005e7c <_fflush_r>
 8005182:	68e1      	ldr	r1, [r4, #12]
 8005184:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <cleanup_stdio+0x3c>)
 8005186:	4299      	cmp	r1, r3
 8005188:	d004      	beq.n	8005194 <cleanup_stdio+0x30>
 800518a:	4620      	mov	r0, r4
 800518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005190:	f000 be74 	b.w	8005e7c <_fflush_r>
 8005194:	bd10      	pop	{r4, pc}
 8005196:	bf00      	nop
 8005198:	20000704 	.word	0x20000704
 800519c:	2000076c 	.word	0x2000076c
 80051a0:	200007d4 	.word	0x200007d4

080051a4 <global_stdio_init.part.0>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <global_stdio_init.part.0+0x30>)
 80051a8:	4c0b      	ldr	r4, [pc, #44]	@ (80051d8 <global_stdio_init.part.0+0x34>)
 80051aa:	4a0c      	ldr	r2, [pc, #48]	@ (80051dc <global_stdio_init.part.0+0x38>)
 80051ac:	4620      	mov	r0, r4
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	2104      	movs	r1, #4
 80051b2:	2200      	movs	r2, #0
 80051b4:	f7ff ff94 	bl	80050e0 <std>
 80051b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051bc:	2201      	movs	r2, #1
 80051be:	2109      	movs	r1, #9
 80051c0:	f7ff ff8e 	bl	80050e0 <std>
 80051c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051c8:	2202      	movs	r2, #2
 80051ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ce:	2112      	movs	r1, #18
 80051d0:	f7ff bf86 	b.w	80050e0 <std>
 80051d4:	2000083c 	.word	0x2000083c
 80051d8:	20000704 	.word	0x20000704
 80051dc:	0800514d 	.word	0x0800514d

080051e0 <__sfp_lock_acquire>:
 80051e0:	4801      	ldr	r0, [pc, #4]	@ (80051e8 <__sfp_lock_acquire+0x8>)
 80051e2:	f000 ba00 	b.w	80055e6 <__retarget_lock_acquire_recursive>
 80051e6:	bf00      	nop
 80051e8:	20000845 	.word	0x20000845

080051ec <__sfp_lock_release>:
 80051ec:	4801      	ldr	r0, [pc, #4]	@ (80051f4 <__sfp_lock_release+0x8>)
 80051ee:	f000 b9fb 	b.w	80055e8 <__retarget_lock_release_recursive>
 80051f2:	bf00      	nop
 80051f4:	20000845 	.word	0x20000845

080051f8 <__sinit>:
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4604      	mov	r4, r0
 80051fc:	f7ff fff0 	bl	80051e0 <__sfp_lock_acquire>
 8005200:	6a23      	ldr	r3, [r4, #32]
 8005202:	b11b      	cbz	r3, 800520c <__sinit+0x14>
 8005204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005208:	f7ff bff0 	b.w	80051ec <__sfp_lock_release>
 800520c:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <__sinit+0x28>)
 800520e:	6223      	str	r3, [r4, #32]
 8005210:	4b04      	ldr	r3, [pc, #16]	@ (8005224 <__sinit+0x2c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f5      	bne.n	8005204 <__sinit+0xc>
 8005218:	f7ff ffc4 	bl	80051a4 <global_stdio_init.part.0>
 800521c:	e7f2      	b.n	8005204 <__sinit+0xc>
 800521e:	bf00      	nop
 8005220:	08005165 	.word	0x08005165
 8005224:	2000083c 	.word	0x2000083c

08005228 <_fwalk_sglue>:
 8005228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800522c:	4607      	mov	r7, r0
 800522e:	4688      	mov	r8, r1
 8005230:	4614      	mov	r4, r2
 8005232:	2600      	movs	r6, #0
 8005234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005238:	f1b9 0901 	subs.w	r9, r9, #1
 800523c:	d505      	bpl.n	800524a <_fwalk_sglue+0x22>
 800523e:	6824      	ldr	r4, [r4, #0]
 8005240:	2c00      	cmp	r4, #0
 8005242:	d1f7      	bne.n	8005234 <_fwalk_sglue+0xc>
 8005244:	4630      	mov	r0, r6
 8005246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d907      	bls.n	8005260 <_fwalk_sglue+0x38>
 8005250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005254:	3301      	adds	r3, #1
 8005256:	d003      	beq.n	8005260 <_fwalk_sglue+0x38>
 8005258:	4629      	mov	r1, r5
 800525a:	4638      	mov	r0, r7
 800525c:	47c0      	blx	r8
 800525e:	4306      	orrs	r6, r0
 8005260:	3568      	adds	r5, #104	@ 0x68
 8005262:	e7e9      	b.n	8005238 <_fwalk_sglue+0x10>

08005264 <iprintf>:
 8005264:	b40f      	push	{r0, r1, r2, r3}
 8005266:	b507      	push	{r0, r1, r2, lr}
 8005268:	4906      	ldr	r1, [pc, #24]	@ (8005284 <iprintf+0x20>)
 800526a:	ab04      	add	r3, sp, #16
 800526c:	6808      	ldr	r0, [r1, #0]
 800526e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005272:	6881      	ldr	r1, [r0, #8]
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	f000 fad7 	bl	8005828 <_vfiprintf_r>
 800527a:	b003      	add	sp, #12
 800527c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005280:	b004      	add	sp, #16
 8005282:	4770      	bx	lr
 8005284:	2000001c 	.word	0x2000001c

08005288 <_puts_r>:
 8005288:	6a03      	ldr	r3, [r0, #32]
 800528a:	b570      	push	{r4, r5, r6, lr}
 800528c:	4605      	mov	r5, r0
 800528e:	460e      	mov	r6, r1
 8005290:	6884      	ldr	r4, [r0, #8]
 8005292:	b90b      	cbnz	r3, 8005298 <_puts_r+0x10>
 8005294:	f7ff ffb0 	bl	80051f8 <__sinit>
 8005298:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800529a:	07db      	lsls	r3, r3, #31
 800529c:	d405      	bmi.n	80052aa <_puts_r+0x22>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	0598      	lsls	r0, r3, #22
 80052a2:	d402      	bmi.n	80052aa <_puts_r+0x22>
 80052a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052a6:	f000 f99e 	bl	80055e6 <__retarget_lock_acquire_recursive>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	0719      	lsls	r1, r3, #28
 80052ae:	d502      	bpl.n	80052b6 <_puts_r+0x2e>
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d135      	bne.n	8005322 <_puts_r+0x9a>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 f8c5 	bl	8005448 <__swsetup_r>
 80052be:	b380      	cbz	r0, 8005322 <_puts_r+0x9a>
 80052c0:	f04f 35ff 	mov.w	r5, #4294967295
 80052c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052c6:	07da      	lsls	r2, r3, #31
 80052c8:	d405      	bmi.n	80052d6 <_puts_r+0x4e>
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	059b      	lsls	r3, r3, #22
 80052ce:	d402      	bmi.n	80052d6 <_puts_r+0x4e>
 80052d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052d2:	f000 f989 	bl	80055e8 <__retarget_lock_release_recursive>
 80052d6:	4628      	mov	r0, r5
 80052d8:	bd70      	pop	{r4, r5, r6, pc}
 80052da:	2b00      	cmp	r3, #0
 80052dc:	da04      	bge.n	80052e8 <_puts_r+0x60>
 80052de:	69a2      	ldr	r2, [r4, #24]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	dc17      	bgt.n	8005314 <_puts_r+0x8c>
 80052e4:	290a      	cmp	r1, #10
 80052e6:	d015      	beq.n	8005314 <_puts_r+0x8c>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	6022      	str	r2, [r4, #0]
 80052ee:	7019      	strb	r1, [r3, #0]
 80052f0:	68a3      	ldr	r3, [r4, #8]
 80052f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052f6:	3b01      	subs	r3, #1
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	2900      	cmp	r1, #0
 80052fc:	d1ed      	bne.n	80052da <_puts_r+0x52>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da11      	bge.n	8005326 <_puts_r+0x9e>
 8005302:	4622      	mov	r2, r4
 8005304:	210a      	movs	r1, #10
 8005306:	4628      	mov	r0, r5
 8005308:	f000 f85f 	bl	80053ca <__swbuf_r>
 800530c:	3001      	adds	r0, #1
 800530e:	d0d7      	beq.n	80052c0 <_puts_r+0x38>
 8005310:	250a      	movs	r5, #10
 8005312:	e7d7      	b.n	80052c4 <_puts_r+0x3c>
 8005314:	4622      	mov	r2, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f857 	bl	80053ca <__swbuf_r>
 800531c:	3001      	adds	r0, #1
 800531e:	d1e7      	bne.n	80052f0 <_puts_r+0x68>
 8005320:	e7ce      	b.n	80052c0 <_puts_r+0x38>
 8005322:	3e01      	subs	r6, #1
 8005324:	e7e4      	b.n	80052f0 <_puts_r+0x68>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	220a      	movs	r2, #10
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e7ee      	b.n	8005310 <_puts_r+0x88>
	...

08005334 <puts>:
 8005334:	4b02      	ldr	r3, [pc, #8]	@ (8005340 <puts+0xc>)
 8005336:	4601      	mov	r1, r0
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	f7ff bfa5 	b.w	8005288 <_puts_r>
 800533e:	bf00      	nop
 8005340:	2000001c 	.word	0x2000001c

08005344 <__sread>:
 8005344:	b510      	push	{r4, lr}
 8005346:	460c      	mov	r4, r1
 8005348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534c:	f000 f8fc 	bl	8005548 <_read_r>
 8005350:	2800      	cmp	r0, #0
 8005352:	bfab      	itete	ge
 8005354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005356:	89a3      	ldrhlt	r3, [r4, #12]
 8005358:	181b      	addge	r3, r3, r0
 800535a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800535e:	bfac      	ite	ge
 8005360:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005362:	81a3      	strhlt	r3, [r4, #12]
 8005364:	bd10      	pop	{r4, pc}

08005366 <__swrite>:
 8005366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	461f      	mov	r7, r3
 800536c:	898b      	ldrh	r3, [r1, #12]
 800536e:	4605      	mov	r5, r0
 8005370:	05db      	lsls	r3, r3, #23
 8005372:	460c      	mov	r4, r1
 8005374:	4616      	mov	r6, r2
 8005376:	d505      	bpl.n	8005384 <__swrite+0x1e>
 8005378:	2302      	movs	r3, #2
 800537a:	2200      	movs	r2, #0
 800537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005380:	f000 f8d0 	bl	8005524 <_lseek_r>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	4632      	mov	r2, r6
 8005388:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	4628      	mov	r0, r5
 8005390:	463b      	mov	r3, r7
 8005392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539a:	f000 b8e7 	b.w	800556c <_write_r>

0800539e <__sseek>:
 800539e:	b510      	push	{r4, lr}
 80053a0:	460c      	mov	r4, r1
 80053a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a6:	f000 f8bd 	bl	8005524 <_lseek_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	bf15      	itete	ne
 80053b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ba:	81a3      	strheq	r3, [r4, #12]
 80053bc:	bf18      	it	ne
 80053be:	81a3      	strhne	r3, [r4, #12]
 80053c0:	bd10      	pop	{r4, pc}

080053c2 <__sclose>:
 80053c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c6:	f000 b89d 	b.w	8005504 <_close_r>

080053ca <__swbuf_r>:
 80053ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053cc:	460e      	mov	r6, r1
 80053ce:	4614      	mov	r4, r2
 80053d0:	4605      	mov	r5, r0
 80053d2:	b118      	cbz	r0, 80053dc <__swbuf_r+0x12>
 80053d4:	6a03      	ldr	r3, [r0, #32]
 80053d6:	b90b      	cbnz	r3, 80053dc <__swbuf_r+0x12>
 80053d8:	f7ff ff0e 	bl	80051f8 <__sinit>
 80053dc:	69a3      	ldr	r3, [r4, #24]
 80053de:	60a3      	str	r3, [r4, #8]
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	071a      	lsls	r2, r3, #28
 80053e4:	d501      	bpl.n	80053ea <__swbuf_r+0x20>
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	b943      	cbnz	r3, 80053fc <__swbuf_r+0x32>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f82b 	bl	8005448 <__swsetup_r>
 80053f2:	b118      	cbz	r0, 80053fc <__swbuf_r+0x32>
 80053f4:	f04f 37ff 	mov.w	r7, #4294967295
 80053f8:	4638      	mov	r0, r7
 80053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	6922      	ldr	r2, [r4, #16]
 8005400:	b2f6      	uxtb	r6, r6
 8005402:	1a98      	subs	r0, r3, r2
 8005404:	6963      	ldr	r3, [r4, #20]
 8005406:	4637      	mov	r7, r6
 8005408:	4283      	cmp	r3, r0
 800540a:	dc05      	bgt.n	8005418 <__swbuf_r+0x4e>
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fd34 	bl	8005e7c <_fflush_r>
 8005414:	2800      	cmp	r0, #0
 8005416:	d1ed      	bne.n	80053f4 <__swbuf_r+0x2a>
 8005418:	68a3      	ldr	r3, [r4, #8]
 800541a:	3b01      	subs	r3, #1
 800541c:	60a3      	str	r3, [r4, #8]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	701e      	strb	r6, [r3, #0]
 8005426:	6962      	ldr	r2, [r4, #20]
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	429a      	cmp	r2, r3
 800542c:	d004      	beq.n	8005438 <__swbuf_r+0x6e>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	07db      	lsls	r3, r3, #31
 8005432:	d5e1      	bpl.n	80053f8 <__swbuf_r+0x2e>
 8005434:	2e0a      	cmp	r6, #10
 8005436:	d1df      	bne.n	80053f8 <__swbuf_r+0x2e>
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	f000 fd1e 	bl	8005e7c <_fflush_r>
 8005440:	2800      	cmp	r0, #0
 8005442:	d0d9      	beq.n	80053f8 <__swbuf_r+0x2e>
 8005444:	e7d6      	b.n	80053f4 <__swbuf_r+0x2a>
	...

08005448 <__swsetup_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4b29      	ldr	r3, [pc, #164]	@ (80054f0 <__swsetup_r+0xa8>)
 800544c:	4605      	mov	r5, r0
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	460c      	mov	r4, r1
 8005452:	b118      	cbz	r0, 800545c <__swsetup_r+0x14>
 8005454:	6a03      	ldr	r3, [r0, #32]
 8005456:	b90b      	cbnz	r3, 800545c <__swsetup_r+0x14>
 8005458:	f7ff fece 	bl	80051f8 <__sinit>
 800545c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005460:	0719      	lsls	r1, r3, #28
 8005462:	d422      	bmi.n	80054aa <__swsetup_r+0x62>
 8005464:	06da      	lsls	r2, r3, #27
 8005466:	d407      	bmi.n	8005478 <__swsetup_r+0x30>
 8005468:	2209      	movs	r2, #9
 800546a:	602a      	str	r2, [r5, #0]
 800546c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	81a3      	strh	r3, [r4, #12]
 8005476:	e033      	b.n	80054e0 <__swsetup_r+0x98>
 8005478:	0758      	lsls	r0, r3, #29
 800547a:	d512      	bpl.n	80054a2 <__swsetup_r+0x5a>
 800547c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800547e:	b141      	cbz	r1, 8005492 <__swsetup_r+0x4a>
 8005480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005484:	4299      	cmp	r1, r3
 8005486:	d002      	beq.n	800548e <__swsetup_r+0x46>
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f8af 	bl	80055ec <_free_r>
 800548e:	2300      	movs	r3, #0
 8005490:	6363      	str	r3, [r4, #52]	@ 0x34
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	b94b      	cbnz	r3, 80054c2 <__swsetup_r+0x7a>
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b8:	d003      	beq.n	80054c2 <__swsetup_r+0x7a>
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 fd2a 	bl	8005f16 <__smakebuf_r>
 80054c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c6:	f013 0201 	ands.w	r2, r3, #1
 80054ca:	d00a      	beq.n	80054e2 <__swsetup_r+0x9a>
 80054cc:	2200      	movs	r2, #0
 80054ce:	60a2      	str	r2, [r4, #8]
 80054d0:	6962      	ldr	r2, [r4, #20]
 80054d2:	4252      	negs	r2, r2
 80054d4:	61a2      	str	r2, [r4, #24]
 80054d6:	6922      	ldr	r2, [r4, #16]
 80054d8:	b942      	cbnz	r2, 80054ec <__swsetup_r+0xa4>
 80054da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054de:	d1c5      	bne.n	800546c <__swsetup_r+0x24>
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
 80054e2:	0799      	lsls	r1, r3, #30
 80054e4:	bf58      	it	pl
 80054e6:	6962      	ldrpl	r2, [r4, #20]
 80054e8:	60a2      	str	r2, [r4, #8]
 80054ea:	e7f4      	b.n	80054d6 <__swsetup_r+0x8e>
 80054ec:	2000      	movs	r0, #0
 80054ee:	e7f7      	b.n	80054e0 <__swsetup_r+0x98>
 80054f0:	2000001c 	.word	0x2000001c

080054f4 <memset>:
 80054f4:	4603      	mov	r3, r0
 80054f6:	4402      	add	r2, r0
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d100      	bne.n	80054fe <memset+0xa>
 80054fc:	4770      	bx	lr
 80054fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005502:	e7f9      	b.n	80054f8 <memset+0x4>

08005504 <_close_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	2300      	movs	r3, #0
 8005508:	4d05      	ldr	r5, [pc, #20]	@ (8005520 <_close_r+0x1c>)
 800550a:	4604      	mov	r4, r0
 800550c:	4608      	mov	r0, r1
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	f7fc fa1f 	bl	8001952 <_close>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_close_r+0x1a>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_close_r+0x1a>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20000840 	.word	0x20000840

08005524 <_lseek_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	2200      	movs	r2, #0
 800552e:	4d05      	ldr	r5, [pc, #20]	@ (8005544 <_lseek_r+0x20>)
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fc fa31 	bl	800199a <_lseek>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_lseek_r+0x1e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_lseek_r+0x1e>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20000840 	.word	0x20000840

08005548 <_read_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	2200      	movs	r2, #0
 8005552:	4d05      	ldr	r5, [pc, #20]	@ (8005568 <_read_r+0x20>)
 8005554:	602a      	str	r2, [r5, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f7fc f9de 	bl	8001918 <_read>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_read_r+0x1e>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_read_r+0x1e>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20000840 	.word	0x20000840

0800556c <_write_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	2200      	movs	r2, #0
 8005576:	4d05      	ldr	r5, [pc, #20]	@ (800558c <_write_r+0x20>)
 8005578:	602a      	str	r2, [r5, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f7fb fce6 	bl	8000f4c <_write>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_write_r+0x1e>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_write_r+0x1e>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	20000840 	.word	0x20000840

08005590 <__errno>:
 8005590:	4b01      	ldr	r3, [pc, #4]	@ (8005598 <__errno+0x8>)
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	2000001c 	.word	0x2000001c

0800559c <__libc_init_array>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	2600      	movs	r6, #0
 80055a0:	4d0c      	ldr	r5, [pc, #48]	@ (80055d4 <__libc_init_array+0x38>)
 80055a2:	4c0d      	ldr	r4, [pc, #52]	@ (80055d8 <__libc_init_array+0x3c>)
 80055a4:	1b64      	subs	r4, r4, r5
 80055a6:	10a4      	asrs	r4, r4, #2
 80055a8:	42a6      	cmp	r6, r4
 80055aa:	d109      	bne.n	80055c0 <__libc_init_array+0x24>
 80055ac:	f000 ff52 	bl	8006454 <_init>
 80055b0:	2600      	movs	r6, #0
 80055b2:	4d0a      	ldr	r5, [pc, #40]	@ (80055dc <__libc_init_array+0x40>)
 80055b4:	4c0a      	ldr	r4, [pc, #40]	@ (80055e0 <__libc_init_array+0x44>)
 80055b6:	1b64      	subs	r4, r4, r5
 80055b8:	10a4      	asrs	r4, r4, #2
 80055ba:	42a6      	cmp	r6, r4
 80055bc:	d105      	bne.n	80055ca <__libc_init_array+0x2e>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c4:	4798      	blx	r3
 80055c6:	3601      	adds	r6, #1
 80055c8:	e7ee      	b.n	80055a8 <__libc_init_array+0xc>
 80055ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ce:	4798      	blx	r3
 80055d0:	3601      	adds	r6, #1
 80055d2:	e7f2      	b.n	80055ba <__libc_init_array+0x1e>
 80055d4:	08007448 	.word	0x08007448
 80055d8:	08007448 	.word	0x08007448
 80055dc:	08007448 	.word	0x08007448
 80055e0:	0800744c 	.word	0x0800744c

080055e4 <__retarget_lock_init_recursive>:
 80055e4:	4770      	bx	lr

080055e6 <__retarget_lock_acquire_recursive>:
 80055e6:	4770      	bx	lr

080055e8 <__retarget_lock_release_recursive>:
 80055e8:	4770      	bx	lr
	...

080055ec <_free_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4605      	mov	r5, r0
 80055f0:	2900      	cmp	r1, #0
 80055f2:	d040      	beq.n	8005676 <_free_r+0x8a>
 80055f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f8:	1f0c      	subs	r4, r1, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bfb8      	it	lt
 80055fe:	18e4      	addlt	r4, r4, r3
 8005600:	f000 f8de 	bl	80057c0 <__malloc_lock>
 8005604:	4a1c      	ldr	r2, [pc, #112]	@ (8005678 <_free_r+0x8c>)
 8005606:	6813      	ldr	r3, [r2, #0]
 8005608:	b933      	cbnz	r3, 8005618 <_free_r+0x2c>
 800560a:	6063      	str	r3, [r4, #4]
 800560c:	6014      	str	r4, [r2, #0]
 800560e:	4628      	mov	r0, r5
 8005610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005614:	f000 b8da 	b.w	80057cc <__malloc_unlock>
 8005618:	42a3      	cmp	r3, r4
 800561a:	d908      	bls.n	800562e <_free_r+0x42>
 800561c:	6820      	ldr	r0, [r4, #0]
 800561e:	1821      	adds	r1, r4, r0
 8005620:	428b      	cmp	r3, r1
 8005622:	bf01      	itttt	eq
 8005624:	6819      	ldreq	r1, [r3, #0]
 8005626:	685b      	ldreq	r3, [r3, #4]
 8005628:	1809      	addeq	r1, r1, r0
 800562a:	6021      	streq	r1, [r4, #0]
 800562c:	e7ed      	b.n	800560a <_free_r+0x1e>
 800562e:	461a      	mov	r2, r3
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	b10b      	cbz	r3, 8005638 <_free_r+0x4c>
 8005634:	42a3      	cmp	r3, r4
 8005636:	d9fa      	bls.n	800562e <_free_r+0x42>
 8005638:	6811      	ldr	r1, [r2, #0]
 800563a:	1850      	adds	r0, r2, r1
 800563c:	42a0      	cmp	r0, r4
 800563e:	d10b      	bne.n	8005658 <_free_r+0x6c>
 8005640:	6820      	ldr	r0, [r4, #0]
 8005642:	4401      	add	r1, r0
 8005644:	1850      	adds	r0, r2, r1
 8005646:	4283      	cmp	r3, r0
 8005648:	6011      	str	r1, [r2, #0]
 800564a:	d1e0      	bne.n	800560e <_free_r+0x22>
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4408      	add	r0, r1
 8005652:	6010      	str	r0, [r2, #0]
 8005654:	6053      	str	r3, [r2, #4]
 8005656:	e7da      	b.n	800560e <_free_r+0x22>
 8005658:	d902      	bls.n	8005660 <_free_r+0x74>
 800565a:	230c      	movs	r3, #12
 800565c:	602b      	str	r3, [r5, #0]
 800565e:	e7d6      	b.n	800560e <_free_r+0x22>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	1821      	adds	r1, r4, r0
 8005664:	428b      	cmp	r3, r1
 8005666:	bf01      	itttt	eq
 8005668:	6819      	ldreq	r1, [r3, #0]
 800566a:	685b      	ldreq	r3, [r3, #4]
 800566c:	1809      	addeq	r1, r1, r0
 800566e:	6021      	streq	r1, [r4, #0]
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	6054      	str	r4, [r2, #4]
 8005674:	e7cb      	b.n	800560e <_free_r+0x22>
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	2000084c 	.word	0x2000084c

0800567c <sbrk_aligned>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	4e0f      	ldr	r6, [pc, #60]	@ (80056bc <sbrk_aligned+0x40>)
 8005680:	460c      	mov	r4, r1
 8005682:	6831      	ldr	r1, [r6, #0]
 8005684:	4605      	mov	r5, r0
 8005686:	b911      	cbnz	r1, 800568e <sbrk_aligned+0x12>
 8005688:	f000 fca4 	bl	8005fd4 <_sbrk_r>
 800568c:	6030      	str	r0, [r6, #0]
 800568e:	4621      	mov	r1, r4
 8005690:	4628      	mov	r0, r5
 8005692:	f000 fc9f 	bl	8005fd4 <_sbrk_r>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	d103      	bne.n	80056a2 <sbrk_aligned+0x26>
 800569a:	f04f 34ff 	mov.w	r4, #4294967295
 800569e:	4620      	mov	r0, r4
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
 80056a2:	1cc4      	adds	r4, r0, #3
 80056a4:	f024 0403 	bic.w	r4, r4, #3
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d0f8      	beq.n	800569e <sbrk_aligned+0x22>
 80056ac:	1a21      	subs	r1, r4, r0
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 fc90 	bl	8005fd4 <_sbrk_r>
 80056b4:	3001      	adds	r0, #1
 80056b6:	d1f2      	bne.n	800569e <sbrk_aligned+0x22>
 80056b8:	e7ef      	b.n	800569a <sbrk_aligned+0x1e>
 80056ba:	bf00      	nop
 80056bc:	20000848 	.word	0x20000848

080056c0 <_malloc_r>:
 80056c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c4:	1ccd      	adds	r5, r1, #3
 80056c6:	f025 0503 	bic.w	r5, r5, #3
 80056ca:	3508      	adds	r5, #8
 80056cc:	2d0c      	cmp	r5, #12
 80056ce:	bf38      	it	cc
 80056d0:	250c      	movcc	r5, #12
 80056d2:	2d00      	cmp	r5, #0
 80056d4:	4606      	mov	r6, r0
 80056d6:	db01      	blt.n	80056dc <_malloc_r+0x1c>
 80056d8:	42a9      	cmp	r1, r5
 80056da:	d904      	bls.n	80056e6 <_malloc_r+0x26>
 80056dc:	230c      	movs	r3, #12
 80056de:	6033      	str	r3, [r6, #0]
 80056e0:	2000      	movs	r0, #0
 80056e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057bc <_malloc_r+0xfc>
 80056ea:	f000 f869 	bl	80057c0 <__malloc_lock>
 80056ee:	f8d8 3000 	ldr.w	r3, [r8]
 80056f2:	461c      	mov	r4, r3
 80056f4:	bb44      	cbnz	r4, 8005748 <_malloc_r+0x88>
 80056f6:	4629      	mov	r1, r5
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7ff ffbf 	bl	800567c <sbrk_aligned>
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	4604      	mov	r4, r0
 8005702:	d158      	bne.n	80057b6 <_malloc_r+0xf6>
 8005704:	f8d8 4000 	ldr.w	r4, [r8]
 8005708:	4627      	mov	r7, r4
 800570a:	2f00      	cmp	r7, #0
 800570c:	d143      	bne.n	8005796 <_malloc_r+0xd6>
 800570e:	2c00      	cmp	r4, #0
 8005710:	d04b      	beq.n	80057aa <_malloc_r+0xea>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	4639      	mov	r1, r7
 8005716:	4630      	mov	r0, r6
 8005718:	eb04 0903 	add.w	r9, r4, r3
 800571c:	f000 fc5a 	bl	8005fd4 <_sbrk_r>
 8005720:	4581      	cmp	r9, r0
 8005722:	d142      	bne.n	80057aa <_malloc_r+0xea>
 8005724:	6821      	ldr	r1, [r4, #0]
 8005726:	4630      	mov	r0, r6
 8005728:	1a6d      	subs	r5, r5, r1
 800572a:	4629      	mov	r1, r5
 800572c:	f7ff ffa6 	bl	800567c <sbrk_aligned>
 8005730:	3001      	adds	r0, #1
 8005732:	d03a      	beq.n	80057aa <_malloc_r+0xea>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	442b      	add	r3, r5
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	f8d8 3000 	ldr.w	r3, [r8]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	bb62      	cbnz	r2, 800579c <_malloc_r+0xdc>
 8005742:	f8c8 7000 	str.w	r7, [r8]
 8005746:	e00f      	b.n	8005768 <_malloc_r+0xa8>
 8005748:	6822      	ldr	r2, [r4, #0]
 800574a:	1b52      	subs	r2, r2, r5
 800574c:	d420      	bmi.n	8005790 <_malloc_r+0xd0>
 800574e:	2a0b      	cmp	r2, #11
 8005750:	d917      	bls.n	8005782 <_malloc_r+0xc2>
 8005752:	1961      	adds	r1, r4, r5
 8005754:	42a3      	cmp	r3, r4
 8005756:	6025      	str	r5, [r4, #0]
 8005758:	bf18      	it	ne
 800575a:	6059      	strne	r1, [r3, #4]
 800575c:	6863      	ldr	r3, [r4, #4]
 800575e:	bf08      	it	eq
 8005760:	f8c8 1000 	streq.w	r1, [r8]
 8005764:	5162      	str	r2, [r4, r5]
 8005766:	604b      	str	r3, [r1, #4]
 8005768:	4630      	mov	r0, r6
 800576a:	f000 f82f 	bl	80057cc <__malloc_unlock>
 800576e:	f104 000b 	add.w	r0, r4, #11
 8005772:	1d23      	adds	r3, r4, #4
 8005774:	f020 0007 	bic.w	r0, r0, #7
 8005778:	1ac2      	subs	r2, r0, r3
 800577a:	bf1c      	itt	ne
 800577c:	1a1b      	subne	r3, r3, r0
 800577e:	50a3      	strne	r3, [r4, r2]
 8005780:	e7af      	b.n	80056e2 <_malloc_r+0x22>
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	42a3      	cmp	r3, r4
 8005786:	bf0c      	ite	eq
 8005788:	f8c8 2000 	streq.w	r2, [r8]
 800578c:	605a      	strne	r2, [r3, #4]
 800578e:	e7eb      	b.n	8005768 <_malloc_r+0xa8>
 8005790:	4623      	mov	r3, r4
 8005792:	6864      	ldr	r4, [r4, #4]
 8005794:	e7ae      	b.n	80056f4 <_malloc_r+0x34>
 8005796:	463c      	mov	r4, r7
 8005798:	687f      	ldr	r7, [r7, #4]
 800579a:	e7b6      	b.n	800570a <_malloc_r+0x4a>
 800579c:	461a      	mov	r2, r3
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	d1fb      	bne.n	800579c <_malloc_r+0xdc>
 80057a4:	2300      	movs	r3, #0
 80057a6:	6053      	str	r3, [r2, #4]
 80057a8:	e7de      	b.n	8005768 <_malloc_r+0xa8>
 80057aa:	230c      	movs	r3, #12
 80057ac:	4630      	mov	r0, r6
 80057ae:	6033      	str	r3, [r6, #0]
 80057b0:	f000 f80c 	bl	80057cc <__malloc_unlock>
 80057b4:	e794      	b.n	80056e0 <_malloc_r+0x20>
 80057b6:	6005      	str	r5, [r0, #0]
 80057b8:	e7d6      	b.n	8005768 <_malloc_r+0xa8>
 80057ba:	bf00      	nop
 80057bc:	2000084c 	.word	0x2000084c

080057c0 <__malloc_lock>:
 80057c0:	4801      	ldr	r0, [pc, #4]	@ (80057c8 <__malloc_lock+0x8>)
 80057c2:	f7ff bf10 	b.w	80055e6 <__retarget_lock_acquire_recursive>
 80057c6:	bf00      	nop
 80057c8:	20000844 	.word	0x20000844

080057cc <__malloc_unlock>:
 80057cc:	4801      	ldr	r0, [pc, #4]	@ (80057d4 <__malloc_unlock+0x8>)
 80057ce:	f7ff bf0b 	b.w	80055e8 <__retarget_lock_release_recursive>
 80057d2:	bf00      	nop
 80057d4:	20000844 	.word	0x20000844

080057d8 <__sfputc_r>:
 80057d8:	6893      	ldr	r3, [r2, #8]
 80057da:	b410      	push	{r4}
 80057dc:	3b01      	subs	r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	6093      	str	r3, [r2, #8]
 80057e2:	da07      	bge.n	80057f4 <__sfputc_r+0x1c>
 80057e4:	6994      	ldr	r4, [r2, #24]
 80057e6:	42a3      	cmp	r3, r4
 80057e8:	db01      	blt.n	80057ee <__sfputc_r+0x16>
 80057ea:	290a      	cmp	r1, #10
 80057ec:	d102      	bne.n	80057f4 <__sfputc_r+0x1c>
 80057ee:	bc10      	pop	{r4}
 80057f0:	f7ff bdeb 	b.w	80053ca <__swbuf_r>
 80057f4:	6813      	ldr	r3, [r2, #0]
 80057f6:	1c58      	adds	r0, r3, #1
 80057f8:	6010      	str	r0, [r2, #0]
 80057fa:	7019      	strb	r1, [r3, #0]
 80057fc:	4608      	mov	r0, r1
 80057fe:	bc10      	pop	{r4}
 8005800:	4770      	bx	lr

08005802 <__sfputs_r>:
 8005802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	4614      	mov	r4, r2
 800580a:	18d5      	adds	r5, r2, r3
 800580c:	42ac      	cmp	r4, r5
 800580e:	d101      	bne.n	8005814 <__sfputs_r+0x12>
 8005810:	2000      	movs	r0, #0
 8005812:	e007      	b.n	8005824 <__sfputs_r+0x22>
 8005814:	463a      	mov	r2, r7
 8005816:	4630      	mov	r0, r6
 8005818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800581c:	f7ff ffdc 	bl	80057d8 <__sfputc_r>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d1f3      	bne.n	800580c <__sfputs_r+0xa>
 8005824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005828 <_vfiprintf_r>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	460d      	mov	r5, r1
 800582e:	4614      	mov	r4, r2
 8005830:	4698      	mov	r8, r3
 8005832:	4606      	mov	r6, r0
 8005834:	b09d      	sub	sp, #116	@ 0x74
 8005836:	b118      	cbz	r0, 8005840 <_vfiprintf_r+0x18>
 8005838:	6a03      	ldr	r3, [r0, #32]
 800583a:	b90b      	cbnz	r3, 8005840 <_vfiprintf_r+0x18>
 800583c:	f7ff fcdc 	bl	80051f8 <__sinit>
 8005840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005842:	07d9      	lsls	r1, r3, #31
 8005844:	d405      	bmi.n	8005852 <_vfiprintf_r+0x2a>
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	059a      	lsls	r2, r3, #22
 800584a:	d402      	bmi.n	8005852 <_vfiprintf_r+0x2a>
 800584c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800584e:	f7ff feca 	bl	80055e6 <__retarget_lock_acquire_recursive>
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	071b      	lsls	r3, r3, #28
 8005856:	d501      	bpl.n	800585c <_vfiprintf_r+0x34>
 8005858:	692b      	ldr	r3, [r5, #16]
 800585a:	b99b      	cbnz	r3, 8005884 <_vfiprintf_r+0x5c>
 800585c:	4629      	mov	r1, r5
 800585e:	4630      	mov	r0, r6
 8005860:	f7ff fdf2 	bl	8005448 <__swsetup_r>
 8005864:	b170      	cbz	r0, 8005884 <_vfiprintf_r+0x5c>
 8005866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005868:	07dc      	lsls	r4, r3, #31
 800586a:	d504      	bpl.n	8005876 <_vfiprintf_r+0x4e>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	b01d      	add	sp, #116	@ 0x74
 8005872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	0598      	lsls	r0, r3, #22
 800587a:	d4f7      	bmi.n	800586c <_vfiprintf_r+0x44>
 800587c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800587e:	f7ff feb3 	bl	80055e8 <__retarget_lock_release_recursive>
 8005882:	e7f3      	b.n	800586c <_vfiprintf_r+0x44>
 8005884:	2300      	movs	r3, #0
 8005886:	9309      	str	r3, [sp, #36]	@ 0x24
 8005888:	2320      	movs	r3, #32
 800588a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800588e:	2330      	movs	r3, #48	@ 0x30
 8005890:	f04f 0901 	mov.w	r9, #1
 8005894:	f8cd 800c 	str.w	r8, [sp, #12]
 8005898:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005a44 <_vfiprintf_r+0x21c>
 800589c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058a0:	4623      	mov	r3, r4
 80058a2:	469a      	mov	sl, r3
 80058a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058a8:	b10a      	cbz	r2, 80058ae <_vfiprintf_r+0x86>
 80058aa:	2a25      	cmp	r2, #37	@ 0x25
 80058ac:	d1f9      	bne.n	80058a2 <_vfiprintf_r+0x7a>
 80058ae:	ebba 0b04 	subs.w	fp, sl, r4
 80058b2:	d00b      	beq.n	80058cc <_vfiprintf_r+0xa4>
 80058b4:	465b      	mov	r3, fp
 80058b6:	4622      	mov	r2, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffa1 	bl	8005802 <__sfputs_r>
 80058c0:	3001      	adds	r0, #1
 80058c2:	f000 80a7 	beq.w	8005a14 <_vfiprintf_r+0x1ec>
 80058c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058c8:	445a      	add	r2, fp
 80058ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80058cc:	f89a 3000 	ldrb.w	r3, [sl]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 809f 	beq.w	8005a14 <_vfiprintf_r+0x1ec>
 80058d6:	2300      	movs	r3, #0
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e0:	f10a 0a01 	add.w	sl, sl, #1
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	9307      	str	r3, [sp, #28]
 80058e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80058ee:	4654      	mov	r4, sl
 80058f0:	2205      	movs	r2, #5
 80058f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f6:	4853      	ldr	r0, [pc, #332]	@ (8005a44 <_vfiprintf_r+0x21c>)
 80058f8:	f000 fb7c 	bl	8005ff4 <memchr>
 80058fc:	9a04      	ldr	r2, [sp, #16]
 80058fe:	b9d8      	cbnz	r0, 8005938 <_vfiprintf_r+0x110>
 8005900:	06d1      	lsls	r1, r2, #27
 8005902:	bf44      	itt	mi
 8005904:	2320      	movmi	r3, #32
 8005906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800590a:	0713      	lsls	r3, r2, #28
 800590c:	bf44      	itt	mi
 800590e:	232b      	movmi	r3, #43	@ 0x2b
 8005910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005914:	f89a 3000 	ldrb.w	r3, [sl]
 8005918:	2b2a      	cmp	r3, #42	@ 0x2a
 800591a:	d015      	beq.n	8005948 <_vfiprintf_r+0x120>
 800591c:	4654      	mov	r4, sl
 800591e:	2000      	movs	r0, #0
 8005920:	f04f 0c0a 	mov.w	ip, #10
 8005924:	9a07      	ldr	r2, [sp, #28]
 8005926:	4621      	mov	r1, r4
 8005928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592c:	3b30      	subs	r3, #48	@ 0x30
 800592e:	2b09      	cmp	r3, #9
 8005930:	d94b      	bls.n	80059ca <_vfiprintf_r+0x1a2>
 8005932:	b1b0      	cbz	r0, 8005962 <_vfiprintf_r+0x13a>
 8005934:	9207      	str	r2, [sp, #28]
 8005936:	e014      	b.n	8005962 <_vfiprintf_r+0x13a>
 8005938:	eba0 0308 	sub.w	r3, r0, r8
 800593c:	fa09 f303 	lsl.w	r3, r9, r3
 8005940:	4313      	orrs	r3, r2
 8005942:	46a2      	mov	sl, r4
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	e7d2      	b.n	80058ee <_vfiprintf_r+0xc6>
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	1d19      	adds	r1, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	9103      	str	r1, [sp, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	bfbb      	ittet	lt
 8005954:	425b      	neglt	r3, r3
 8005956:	f042 0202 	orrlt.w	r2, r2, #2
 800595a:	9307      	strge	r3, [sp, #28]
 800595c:	9307      	strlt	r3, [sp, #28]
 800595e:	bfb8      	it	lt
 8005960:	9204      	strlt	r2, [sp, #16]
 8005962:	7823      	ldrb	r3, [r4, #0]
 8005964:	2b2e      	cmp	r3, #46	@ 0x2e
 8005966:	d10a      	bne.n	800597e <_vfiprintf_r+0x156>
 8005968:	7863      	ldrb	r3, [r4, #1]
 800596a:	2b2a      	cmp	r3, #42	@ 0x2a
 800596c:	d132      	bne.n	80059d4 <_vfiprintf_r+0x1ac>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	3402      	adds	r4, #2
 8005972:	1d1a      	adds	r2, r3, #4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	9203      	str	r2, [sp, #12]
 8005978:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800597c:	9305      	str	r3, [sp, #20]
 800597e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005a48 <_vfiprintf_r+0x220>
 8005982:	2203      	movs	r2, #3
 8005984:	4650      	mov	r0, sl
 8005986:	7821      	ldrb	r1, [r4, #0]
 8005988:	f000 fb34 	bl	8005ff4 <memchr>
 800598c:	b138      	cbz	r0, 800599e <_vfiprintf_r+0x176>
 800598e:	2240      	movs	r2, #64	@ 0x40
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	eba0 000a 	sub.w	r0, r0, sl
 8005996:	4082      	lsls	r2, r0
 8005998:	4313      	orrs	r3, r2
 800599a:	3401      	adds	r4, #1
 800599c:	9304      	str	r3, [sp, #16]
 800599e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a2:	2206      	movs	r2, #6
 80059a4:	4829      	ldr	r0, [pc, #164]	@ (8005a4c <_vfiprintf_r+0x224>)
 80059a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059aa:	f000 fb23 	bl	8005ff4 <memchr>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d03f      	beq.n	8005a32 <_vfiprintf_r+0x20a>
 80059b2:	4b27      	ldr	r3, [pc, #156]	@ (8005a50 <_vfiprintf_r+0x228>)
 80059b4:	bb1b      	cbnz	r3, 80059fe <_vfiprintf_r+0x1d6>
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	3307      	adds	r3, #7
 80059ba:	f023 0307 	bic.w	r3, r3, #7
 80059be:	3308      	adds	r3, #8
 80059c0:	9303      	str	r3, [sp, #12]
 80059c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c4:	443b      	add	r3, r7
 80059c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c8:	e76a      	b.n	80058a0 <_vfiprintf_r+0x78>
 80059ca:	460c      	mov	r4, r1
 80059cc:	2001      	movs	r0, #1
 80059ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80059d2:	e7a8      	b.n	8005926 <_vfiprintf_r+0xfe>
 80059d4:	2300      	movs	r3, #0
 80059d6:	f04f 0c0a 	mov.w	ip, #10
 80059da:	4619      	mov	r1, r3
 80059dc:	3401      	adds	r4, #1
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	4620      	mov	r0, r4
 80059e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e6:	3a30      	subs	r2, #48	@ 0x30
 80059e8:	2a09      	cmp	r2, #9
 80059ea:	d903      	bls.n	80059f4 <_vfiprintf_r+0x1cc>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0c6      	beq.n	800597e <_vfiprintf_r+0x156>
 80059f0:	9105      	str	r1, [sp, #20]
 80059f2:	e7c4      	b.n	800597e <_vfiprintf_r+0x156>
 80059f4:	4604      	mov	r4, r0
 80059f6:	2301      	movs	r3, #1
 80059f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059fc:	e7f0      	b.n	80059e0 <_vfiprintf_r+0x1b8>
 80059fe:	ab03      	add	r3, sp, #12
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	462a      	mov	r2, r5
 8005a04:	4630      	mov	r0, r6
 8005a06:	4b13      	ldr	r3, [pc, #76]	@ (8005a54 <_vfiprintf_r+0x22c>)
 8005a08:	a904      	add	r1, sp, #16
 8005a0a:	f3af 8000 	nop.w
 8005a0e:	4607      	mov	r7, r0
 8005a10:	1c78      	adds	r0, r7, #1
 8005a12:	d1d6      	bne.n	80059c2 <_vfiprintf_r+0x19a>
 8005a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a16:	07d9      	lsls	r1, r3, #31
 8005a18:	d405      	bmi.n	8005a26 <_vfiprintf_r+0x1fe>
 8005a1a:	89ab      	ldrh	r3, [r5, #12]
 8005a1c:	059a      	lsls	r2, r3, #22
 8005a1e:	d402      	bmi.n	8005a26 <_vfiprintf_r+0x1fe>
 8005a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a22:	f7ff fde1 	bl	80055e8 <__retarget_lock_release_recursive>
 8005a26:	89ab      	ldrh	r3, [r5, #12]
 8005a28:	065b      	lsls	r3, r3, #25
 8005a2a:	f53f af1f 	bmi.w	800586c <_vfiprintf_r+0x44>
 8005a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a30:	e71e      	b.n	8005870 <_vfiprintf_r+0x48>
 8005a32:	ab03      	add	r3, sp, #12
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	462a      	mov	r2, r5
 8005a38:	4630      	mov	r0, r6
 8005a3a:	4b06      	ldr	r3, [pc, #24]	@ (8005a54 <_vfiprintf_r+0x22c>)
 8005a3c:	a904      	add	r1, sp, #16
 8005a3e:	f000 f87d 	bl	8005b3c <_printf_i>
 8005a42:	e7e4      	b.n	8005a0e <_vfiprintf_r+0x1e6>
 8005a44:	080073e0 	.word	0x080073e0
 8005a48:	080073e6 	.word	0x080073e6
 8005a4c:	080073ea 	.word	0x080073ea
 8005a50:	00000000 	.word	0x00000000
 8005a54:	08005803 	.word	0x08005803

08005a58 <_printf_common>:
 8005a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	4698      	mov	r8, r3
 8005a60:	688a      	ldr	r2, [r1, #8]
 8005a62:	690b      	ldr	r3, [r1, #16]
 8005a64:	4607      	mov	r7, r0
 8005a66:	4293      	cmp	r3, r2
 8005a68:	bfb8      	it	lt
 8005a6a:	4613      	movlt	r3, r2
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a72:	460c      	mov	r4, r1
 8005a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a78:	b10a      	cbz	r2, 8005a7e <_printf_common+0x26>
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	0699      	lsls	r1, r3, #26
 8005a82:	bf42      	ittt	mi
 8005a84:	6833      	ldrmi	r3, [r6, #0]
 8005a86:	3302      	addmi	r3, #2
 8005a88:	6033      	strmi	r3, [r6, #0]
 8005a8a:	6825      	ldr	r5, [r4, #0]
 8005a8c:	f015 0506 	ands.w	r5, r5, #6
 8005a90:	d106      	bne.n	8005aa0 <_printf_common+0x48>
 8005a92:	f104 0a19 	add.w	sl, r4, #25
 8005a96:	68e3      	ldr	r3, [r4, #12]
 8005a98:	6832      	ldr	r2, [r6, #0]
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	42ab      	cmp	r3, r5
 8005a9e:	dc2b      	bgt.n	8005af8 <_printf_common+0xa0>
 8005aa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	3b00      	subs	r3, #0
 8005aa8:	bf18      	it	ne
 8005aaa:	2301      	movne	r3, #1
 8005aac:	0692      	lsls	r2, r2, #26
 8005aae:	d430      	bmi.n	8005b12 <_printf_common+0xba>
 8005ab0:	4641      	mov	r1, r8
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ab8:	47c8      	blx	r9
 8005aba:	3001      	adds	r0, #1
 8005abc:	d023      	beq.n	8005b06 <_printf_common+0xae>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	6922      	ldr	r2, [r4, #16]
 8005ac2:	f003 0306 	and.w	r3, r3, #6
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	bf14      	ite	ne
 8005aca:	2500      	movne	r5, #0
 8005acc:	6833      	ldreq	r3, [r6, #0]
 8005ace:	f04f 0600 	mov.w	r6, #0
 8005ad2:	bf08      	it	eq
 8005ad4:	68e5      	ldreq	r5, [r4, #12]
 8005ad6:	f104 041a 	add.w	r4, r4, #26
 8005ada:	bf08      	it	eq
 8005adc:	1aed      	subeq	r5, r5, r3
 8005ade:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ae2:	bf08      	it	eq
 8005ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	bfc4      	itt	gt
 8005aec:	1a9b      	subgt	r3, r3, r2
 8005aee:	18ed      	addgt	r5, r5, r3
 8005af0:	42b5      	cmp	r5, r6
 8005af2:	d11a      	bne.n	8005b2a <_printf_common+0xd2>
 8005af4:	2000      	movs	r0, #0
 8005af6:	e008      	b.n	8005b0a <_printf_common+0xb2>
 8005af8:	2301      	movs	r3, #1
 8005afa:	4652      	mov	r2, sl
 8005afc:	4641      	mov	r1, r8
 8005afe:	4638      	mov	r0, r7
 8005b00:	47c8      	blx	r9
 8005b02:	3001      	adds	r0, #1
 8005b04:	d103      	bne.n	8005b0e <_printf_common+0xb6>
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0e:	3501      	adds	r5, #1
 8005b10:	e7c1      	b.n	8005a96 <_printf_common+0x3e>
 8005b12:	2030      	movs	r0, #48	@ 0x30
 8005b14:	18e1      	adds	r1, r4, r3
 8005b16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b20:	4422      	add	r2, r4
 8005b22:	3302      	adds	r3, #2
 8005b24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b28:	e7c2      	b.n	8005ab0 <_printf_common+0x58>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	4641      	mov	r1, r8
 8005b30:	4638      	mov	r0, r7
 8005b32:	47c8      	blx	r9
 8005b34:	3001      	adds	r0, #1
 8005b36:	d0e6      	beq.n	8005b06 <_printf_common+0xae>
 8005b38:	3601      	adds	r6, #1
 8005b3a:	e7d9      	b.n	8005af0 <_printf_common+0x98>

08005b3c <_printf_i>:
 8005b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	7e0f      	ldrb	r7, [r1, #24]
 8005b42:	4691      	mov	r9, r2
 8005b44:	2f78      	cmp	r7, #120	@ 0x78
 8005b46:	4680      	mov	r8, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	469a      	mov	sl, r3
 8005b4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b52:	d807      	bhi.n	8005b64 <_printf_i+0x28>
 8005b54:	2f62      	cmp	r7, #98	@ 0x62
 8005b56:	d80a      	bhi.n	8005b6e <_printf_i+0x32>
 8005b58:	2f00      	cmp	r7, #0
 8005b5a:	f000 80d3 	beq.w	8005d04 <_printf_i+0x1c8>
 8005b5e:	2f58      	cmp	r7, #88	@ 0x58
 8005b60:	f000 80ba 	beq.w	8005cd8 <_printf_i+0x19c>
 8005b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b6c:	e03a      	b.n	8005be4 <_printf_i+0xa8>
 8005b6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b72:	2b15      	cmp	r3, #21
 8005b74:	d8f6      	bhi.n	8005b64 <_printf_i+0x28>
 8005b76:	a101      	add	r1, pc, #4	@ (adr r1, 8005b7c <_printf_i+0x40>)
 8005b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b7c:	08005bd5 	.word	0x08005bd5
 8005b80:	08005be9 	.word	0x08005be9
 8005b84:	08005b65 	.word	0x08005b65
 8005b88:	08005b65 	.word	0x08005b65
 8005b8c:	08005b65 	.word	0x08005b65
 8005b90:	08005b65 	.word	0x08005b65
 8005b94:	08005be9 	.word	0x08005be9
 8005b98:	08005b65 	.word	0x08005b65
 8005b9c:	08005b65 	.word	0x08005b65
 8005ba0:	08005b65 	.word	0x08005b65
 8005ba4:	08005b65 	.word	0x08005b65
 8005ba8:	08005ceb 	.word	0x08005ceb
 8005bac:	08005c13 	.word	0x08005c13
 8005bb0:	08005ca5 	.word	0x08005ca5
 8005bb4:	08005b65 	.word	0x08005b65
 8005bb8:	08005b65 	.word	0x08005b65
 8005bbc:	08005d0d 	.word	0x08005d0d
 8005bc0:	08005b65 	.word	0x08005b65
 8005bc4:	08005c13 	.word	0x08005c13
 8005bc8:	08005b65 	.word	0x08005b65
 8005bcc:	08005b65 	.word	0x08005b65
 8005bd0:	08005cad 	.word	0x08005cad
 8005bd4:	6833      	ldr	r3, [r6, #0]
 8005bd6:	1d1a      	adds	r2, r3, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6032      	str	r2, [r6, #0]
 8005bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005be0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005be4:	2301      	movs	r3, #1
 8005be6:	e09e      	b.n	8005d26 <_printf_i+0x1ea>
 8005be8:	6833      	ldr	r3, [r6, #0]
 8005bea:	6820      	ldr	r0, [r4, #0]
 8005bec:	1d19      	adds	r1, r3, #4
 8005bee:	6031      	str	r1, [r6, #0]
 8005bf0:	0606      	lsls	r6, r0, #24
 8005bf2:	d501      	bpl.n	8005bf8 <_printf_i+0xbc>
 8005bf4:	681d      	ldr	r5, [r3, #0]
 8005bf6:	e003      	b.n	8005c00 <_printf_i+0xc4>
 8005bf8:	0645      	lsls	r5, r0, #25
 8005bfa:	d5fb      	bpl.n	8005bf4 <_printf_i+0xb8>
 8005bfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	da03      	bge.n	8005c0c <_printf_i+0xd0>
 8005c04:	232d      	movs	r3, #45	@ 0x2d
 8005c06:	426d      	negs	r5, r5
 8005c08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c0c:	230a      	movs	r3, #10
 8005c0e:	4859      	ldr	r0, [pc, #356]	@ (8005d74 <_printf_i+0x238>)
 8005c10:	e011      	b.n	8005c36 <_printf_i+0xfa>
 8005c12:	6821      	ldr	r1, [r4, #0]
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	0608      	lsls	r0, r1, #24
 8005c18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c1c:	d402      	bmi.n	8005c24 <_printf_i+0xe8>
 8005c1e:	0649      	lsls	r1, r1, #25
 8005c20:	bf48      	it	mi
 8005c22:	b2ad      	uxthmi	r5, r5
 8005c24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	bf14      	ite	ne
 8005c2a:	230a      	movne	r3, #10
 8005c2c:	2308      	moveq	r3, #8
 8005c2e:	4851      	ldr	r0, [pc, #324]	@ (8005d74 <_printf_i+0x238>)
 8005c30:	2100      	movs	r1, #0
 8005c32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c36:	6866      	ldr	r6, [r4, #4]
 8005c38:	2e00      	cmp	r6, #0
 8005c3a:	bfa8      	it	ge
 8005c3c:	6821      	ldrge	r1, [r4, #0]
 8005c3e:	60a6      	str	r6, [r4, #8]
 8005c40:	bfa4      	itt	ge
 8005c42:	f021 0104 	bicge.w	r1, r1, #4
 8005c46:	6021      	strge	r1, [r4, #0]
 8005c48:	b90d      	cbnz	r5, 8005c4e <_printf_i+0x112>
 8005c4a:	2e00      	cmp	r6, #0
 8005c4c:	d04b      	beq.n	8005ce6 <_printf_i+0x1aa>
 8005c4e:	4616      	mov	r6, r2
 8005c50:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c54:	fb03 5711 	mls	r7, r3, r1, r5
 8005c58:	5dc7      	ldrb	r7, [r0, r7]
 8005c5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c5e:	462f      	mov	r7, r5
 8005c60:	42bb      	cmp	r3, r7
 8005c62:	460d      	mov	r5, r1
 8005c64:	d9f4      	bls.n	8005c50 <_printf_i+0x114>
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d10b      	bne.n	8005c82 <_printf_i+0x146>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	07df      	lsls	r7, r3, #31
 8005c6e:	d508      	bpl.n	8005c82 <_printf_i+0x146>
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	6861      	ldr	r1, [r4, #4]
 8005c74:	4299      	cmp	r1, r3
 8005c76:	bfde      	ittt	le
 8005c78:	2330      	movle	r3, #48	@ 0x30
 8005c7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c82:	1b92      	subs	r2, r2, r6
 8005c84:	6122      	str	r2, [r4, #16]
 8005c86:	464b      	mov	r3, r9
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	f8cd a000 	str.w	sl, [sp]
 8005c90:	aa03      	add	r2, sp, #12
 8005c92:	f7ff fee1 	bl	8005a58 <_printf_common>
 8005c96:	3001      	adds	r0, #1
 8005c98:	d14a      	bne.n	8005d30 <_printf_i+0x1f4>
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	b004      	add	sp, #16
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	f043 0320 	orr.w	r3, r3, #32
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2778      	movs	r7, #120	@ 0x78
 8005cae:	4832      	ldr	r0, [pc, #200]	@ (8005d78 <_printf_i+0x23c>)
 8005cb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	6831      	ldr	r1, [r6, #0]
 8005cb8:	061f      	lsls	r7, r3, #24
 8005cba:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cbe:	d402      	bmi.n	8005cc6 <_printf_i+0x18a>
 8005cc0:	065f      	lsls	r7, r3, #25
 8005cc2:	bf48      	it	mi
 8005cc4:	b2ad      	uxthmi	r5, r5
 8005cc6:	6031      	str	r1, [r6, #0]
 8005cc8:	07d9      	lsls	r1, r3, #31
 8005cca:	bf44      	itt	mi
 8005ccc:	f043 0320 	orrmi.w	r3, r3, #32
 8005cd0:	6023      	strmi	r3, [r4, #0]
 8005cd2:	b11d      	cbz	r5, 8005cdc <_printf_i+0x1a0>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	e7ab      	b.n	8005c30 <_printf_i+0xf4>
 8005cd8:	4826      	ldr	r0, [pc, #152]	@ (8005d74 <_printf_i+0x238>)
 8005cda:	e7e9      	b.n	8005cb0 <_printf_i+0x174>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	f023 0320 	bic.w	r3, r3, #32
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	e7f6      	b.n	8005cd4 <_printf_i+0x198>
 8005ce6:	4616      	mov	r6, r2
 8005ce8:	e7bd      	b.n	8005c66 <_printf_i+0x12a>
 8005cea:	6833      	ldr	r3, [r6, #0]
 8005cec:	6825      	ldr	r5, [r4, #0]
 8005cee:	1d18      	adds	r0, r3, #4
 8005cf0:	6961      	ldr	r1, [r4, #20]
 8005cf2:	6030      	str	r0, [r6, #0]
 8005cf4:	062e      	lsls	r6, r5, #24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	d501      	bpl.n	8005cfe <_printf_i+0x1c2>
 8005cfa:	6019      	str	r1, [r3, #0]
 8005cfc:	e002      	b.n	8005d04 <_printf_i+0x1c8>
 8005cfe:	0668      	lsls	r0, r5, #25
 8005d00:	d5fb      	bpl.n	8005cfa <_printf_i+0x1be>
 8005d02:	8019      	strh	r1, [r3, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	4616      	mov	r6, r2
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	e7bc      	b.n	8005c86 <_printf_i+0x14a>
 8005d0c:	6833      	ldr	r3, [r6, #0]
 8005d0e:	2100      	movs	r1, #0
 8005d10:	1d1a      	adds	r2, r3, #4
 8005d12:	6032      	str	r2, [r6, #0]
 8005d14:	681e      	ldr	r6, [r3, #0]
 8005d16:	6862      	ldr	r2, [r4, #4]
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f96b 	bl	8005ff4 <memchr>
 8005d1e:	b108      	cbz	r0, 8005d24 <_printf_i+0x1e8>
 8005d20:	1b80      	subs	r0, r0, r6
 8005d22:	6060      	str	r0, [r4, #4]
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	6123      	str	r3, [r4, #16]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d2e:	e7aa      	b.n	8005c86 <_printf_i+0x14a>
 8005d30:	4632      	mov	r2, r6
 8005d32:	4649      	mov	r1, r9
 8005d34:	4640      	mov	r0, r8
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	47d0      	blx	sl
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d0ad      	beq.n	8005c9a <_printf_i+0x15e>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	079b      	lsls	r3, r3, #30
 8005d42:	d413      	bmi.n	8005d6c <_printf_i+0x230>
 8005d44:	68e0      	ldr	r0, [r4, #12]
 8005d46:	9b03      	ldr	r3, [sp, #12]
 8005d48:	4298      	cmp	r0, r3
 8005d4a:	bfb8      	it	lt
 8005d4c:	4618      	movlt	r0, r3
 8005d4e:	e7a6      	b.n	8005c9e <_printf_i+0x162>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4632      	mov	r2, r6
 8005d54:	4649      	mov	r1, r9
 8005d56:	4640      	mov	r0, r8
 8005d58:	47d0      	blx	sl
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d09d      	beq.n	8005c9a <_printf_i+0x15e>
 8005d5e:	3501      	adds	r5, #1
 8005d60:	68e3      	ldr	r3, [r4, #12]
 8005d62:	9903      	ldr	r1, [sp, #12]
 8005d64:	1a5b      	subs	r3, r3, r1
 8005d66:	42ab      	cmp	r3, r5
 8005d68:	dcf2      	bgt.n	8005d50 <_printf_i+0x214>
 8005d6a:	e7eb      	b.n	8005d44 <_printf_i+0x208>
 8005d6c:	2500      	movs	r5, #0
 8005d6e:	f104 0619 	add.w	r6, r4, #25
 8005d72:	e7f5      	b.n	8005d60 <_printf_i+0x224>
 8005d74:	080073f1 	.word	0x080073f1
 8005d78:	08007402 	.word	0x08007402

08005d7c <__sflush_r>:
 8005d7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	0716      	lsls	r6, r2, #28
 8005d84:	4605      	mov	r5, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	d454      	bmi.n	8005e34 <__sflush_r+0xb8>
 8005d8a:	684b      	ldr	r3, [r1, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dc02      	bgt.n	8005d96 <__sflush_r+0x1a>
 8005d90:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	dd48      	ble.n	8005e28 <__sflush_r+0xac>
 8005d96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d98:	2e00      	cmp	r6, #0
 8005d9a:	d045      	beq.n	8005e28 <__sflush_r+0xac>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005da2:	682f      	ldr	r7, [r5, #0]
 8005da4:	6a21      	ldr	r1, [r4, #32]
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	d030      	beq.n	8005e0c <__sflush_r+0x90>
 8005daa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	0759      	lsls	r1, r3, #29
 8005db0:	d505      	bpl.n	8005dbe <__sflush_r+0x42>
 8005db2:	6863      	ldr	r3, [r4, #4]
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005db8:	b10b      	cbz	r3, 8005dbe <__sflush_r+0x42>
 8005dba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dbc:	1ad2      	subs	r2, r2, r3
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dc4:	6a21      	ldr	r1, [r4, #32]
 8005dc6:	47b0      	blx	r6
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	89a3      	ldrh	r3, [r4, #12]
 8005dcc:	d106      	bne.n	8005ddc <__sflush_r+0x60>
 8005dce:	6829      	ldr	r1, [r5, #0]
 8005dd0:	291d      	cmp	r1, #29
 8005dd2:	d82b      	bhi.n	8005e2c <__sflush_r+0xb0>
 8005dd4:	4a28      	ldr	r2, [pc, #160]	@ (8005e78 <__sflush_r+0xfc>)
 8005dd6:	410a      	asrs	r2, r1
 8005dd8:	07d6      	lsls	r6, r2, #31
 8005dda:	d427      	bmi.n	8005e2c <__sflush_r+0xb0>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	6062      	str	r2, [r4, #4]
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	04d9      	lsls	r1, r3, #19
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	d504      	bpl.n	8005df2 <__sflush_r+0x76>
 8005de8:	1c42      	adds	r2, r0, #1
 8005dea:	d101      	bne.n	8005df0 <__sflush_r+0x74>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b903      	cbnz	r3, 8005df2 <__sflush_r+0x76>
 8005df0:	6560      	str	r0, [r4, #84]	@ 0x54
 8005df2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005df4:	602f      	str	r7, [r5, #0]
 8005df6:	b1b9      	cbz	r1, 8005e28 <__sflush_r+0xac>
 8005df8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dfc:	4299      	cmp	r1, r3
 8005dfe:	d002      	beq.n	8005e06 <__sflush_r+0x8a>
 8005e00:	4628      	mov	r0, r5
 8005e02:	f7ff fbf3 	bl	80055ec <_free_r>
 8005e06:	2300      	movs	r3, #0
 8005e08:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e0a:	e00d      	b.n	8005e28 <__sflush_r+0xac>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b0      	blx	r6
 8005e12:	4602      	mov	r2, r0
 8005e14:	1c50      	adds	r0, r2, #1
 8005e16:	d1c9      	bne.n	8005dac <__sflush_r+0x30>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0c6      	beq.n	8005dac <__sflush_r+0x30>
 8005e1e:	2b1d      	cmp	r3, #29
 8005e20:	d001      	beq.n	8005e26 <__sflush_r+0xaa>
 8005e22:	2b16      	cmp	r3, #22
 8005e24:	d11d      	bne.n	8005e62 <__sflush_r+0xe6>
 8005e26:	602f      	str	r7, [r5, #0]
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e021      	b.n	8005e70 <__sflush_r+0xf4>
 8005e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e30:	b21b      	sxth	r3, r3
 8005e32:	e01a      	b.n	8005e6a <__sflush_r+0xee>
 8005e34:	690f      	ldr	r7, [r1, #16]
 8005e36:	2f00      	cmp	r7, #0
 8005e38:	d0f6      	beq.n	8005e28 <__sflush_r+0xac>
 8005e3a:	0793      	lsls	r3, r2, #30
 8005e3c:	bf18      	it	ne
 8005e3e:	2300      	movne	r3, #0
 8005e40:	680e      	ldr	r6, [r1, #0]
 8005e42:	bf08      	it	eq
 8005e44:	694b      	ldreq	r3, [r1, #20]
 8005e46:	1bf6      	subs	r6, r6, r7
 8005e48:	600f      	str	r7, [r1, #0]
 8005e4a:	608b      	str	r3, [r1, #8]
 8005e4c:	2e00      	cmp	r6, #0
 8005e4e:	ddeb      	ble.n	8005e28 <__sflush_r+0xac>
 8005e50:	4633      	mov	r3, r6
 8005e52:	463a      	mov	r2, r7
 8005e54:	4628      	mov	r0, r5
 8005e56:	6a21      	ldr	r1, [r4, #32]
 8005e58:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005e5c:	47e0      	blx	ip
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	dc07      	bgt.n	8005e72 <__sflush_r+0xf6>
 8005e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e72:	4407      	add	r7, r0
 8005e74:	1a36      	subs	r6, r6, r0
 8005e76:	e7e9      	b.n	8005e4c <__sflush_r+0xd0>
 8005e78:	dfbffffe 	.word	0xdfbffffe

08005e7c <_fflush_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	690b      	ldr	r3, [r1, #16]
 8005e80:	4605      	mov	r5, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	b913      	cbnz	r3, 8005e8c <_fflush_r+0x10>
 8005e86:	2500      	movs	r5, #0
 8005e88:	4628      	mov	r0, r5
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	b118      	cbz	r0, 8005e96 <_fflush_r+0x1a>
 8005e8e:	6a03      	ldr	r3, [r0, #32]
 8005e90:	b90b      	cbnz	r3, 8005e96 <_fflush_r+0x1a>
 8005e92:	f7ff f9b1 	bl	80051f8 <__sinit>
 8005e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f3      	beq.n	8005e86 <_fflush_r+0xa>
 8005e9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ea0:	07d0      	lsls	r0, r2, #31
 8005ea2:	d404      	bmi.n	8005eae <_fflush_r+0x32>
 8005ea4:	0599      	lsls	r1, r3, #22
 8005ea6:	d402      	bmi.n	8005eae <_fflush_r+0x32>
 8005ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eaa:	f7ff fb9c 	bl	80055e6 <__retarget_lock_acquire_recursive>
 8005eae:	4628      	mov	r0, r5
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	f7ff ff63 	bl	8005d7c <__sflush_r>
 8005eb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eb8:	4605      	mov	r5, r0
 8005eba:	07da      	lsls	r2, r3, #31
 8005ebc:	d4e4      	bmi.n	8005e88 <_fflush_r+0xc>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	059b      	lsls	r3, r3, #22
 8005ec2:	d4e1      	bmi.n	8005e88 <_fflush_r+0xc>
 8005ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ec6:	f7ff fb8f 	bl	80055e8 <__retarget_lock_release_recursive>
 8005eca:	e7dd      	b.n	8005e88 <_fflush_r+0xc>

08005ecc <__swhatbuf_r>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	460c      	mov	r4, r1
 8005ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed4:	4615      	mov	r5, r2
 8005ed6:	2900      	cmp	r1, #0
 8005ed8:	461e      	mov	r6, r3
 8005eda:	b096      	sub	sp, #88	@ 0x58
 8005edc:	da0c      	bge.n	8005ef8 <__swhatbuf_r+0x2c>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ee6:	bf14      	ite	ne
 8005ee8:	2340      	movne	r3, #64	@ 0x40
 8005eea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005eee:	2000      	movs	r0, #0
 8005ef0:	6031      	str	r1, [r6, #0]
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	b016      	add	sp, #88	@ 0x58
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	466a      	mov	r2, sp
 8005efa:	f000 f849 	bl	8005f90 <_fstat_r>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	dbed      	blt.n	8005ede <__swhatbuf_r+0x12>
 8005f02:	9901      	ldr	r1, [sp, #4]
 8005f04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f0c:	4259      	negs	r1, r3
 8005f0e:	4159      	adcs	r1, r3
 8005f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f14:	e7eb      	b.n	8005eee <__swhatbuf_r+0x22>

08005f16 <__smakebuf_r>:
 8005f16:	898b      	ldrh	r3, [r1, #12]
 8005f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f1a:	079d      	lsls	r5, r3, #30
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	d507      	bpl.n	8005f32 <__smakebuf_r+0x1c>
 8005f22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	6163      	str	r3, [r4, #20]
 8005f2e:	b003      	add	sp, #12
 8005f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f32:	466a      	mov	r2, sp
 8005f34:	ab01      	add	r3, sp, #4
 8005f36:	f7ff ffc9 	bl	8005ecc <__swhatbuf_r>
 8005f3a:	9f00      	ldr	r7, [sp, #0]
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	4639      	mov	r1, r7
 8005f40:	4630      	mov	r0, r6
 8005f42:	f7ff fbbd 	bl	80056c0 <_malloc_r>
 8005f46:	b948      	cbnz	r0, 8005f5c <__smakebuf_r+0x46>
 8005f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4c:	059a      	lsls	r2, r3, #22
 8005f4e:	d4ee      	bmi.n	8005f2e <__smakebuf_r+0x18>
 8005f50:	f023 0303 	bic.w	r3, r3, #3
 8005f54:	f043 0302 	orr.w	r3, r3, #2
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	e7e2      	b.n	8005f22 <__smakebuf_r+0xc>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	9b01      	ldr	r3, [sp, #4]
 8005f6a:	6020      	str	r0, [r4, #0]
 8005f6c:	b15b      	cbz	r3, 8005f86 <__smakebuf_r+0x70>
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f74:	f000 f81e 	bl	8005fb4 <_isatty_r>
 8005f78:	b128      	cbz	r0, 8005f86 <__smakebuf_r+0x70>
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f023 0303 	bic.w	r3, r3, #3
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	431d      	orrs	r5, r3
 8005f8a:	81a5      	strh	r5, [r4, #12]
 8005f8c:	e7cf      	b.n	8005f2e <__smakebuf_r+0x18>
	...

08005f90 <_fstat_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	2300      	movs	r3, #0
 8005f94:	4d06      	ldr	r5, [pc, #24]	@ (8005fb0 <_fstat_r+0x20>)
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	602b      	str	r3, [r5, #0]
 8005f9e:	f7fb fce3 	bl	8001968 <_fstat>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	d102      	bne.n	8005fac <_fstat_r+0x1c>
 8005fa6:	682b      	ldr	r3, [r5, #0]
 8005fa8:	b103      	cbz	r3, 8005fac <_fstat_r+0x1c>
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	bd38      	pop	{r3, r4, r5, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000840 	.word	0x20000840

08005fb4 <_isatty_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	4d05      	ldr	r5, [pc, #20]	@ (8005fd0 <_isatty_r+0x1c>)
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fb fce1 	bl	8001986 <_isatty>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_isatty_r+0x1a>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_isatty_r+0x1a>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	20000840 	.word	0x20000840

08005fd4 <_sbrk_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	4d05      	ldr	r5, [pc, #20]	@ (8005ff0 <_sbrk_r+0x1c>)
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	f7fb fce8 	bl	80019b4 <_sbrk>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_sbrk_r+0x1a>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_sbrk_r+0x1a>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	20000840 	.word	0x20000840

08005ff4 <memchr>:
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	b2c9      	uxtb	r1, r1
 8005ffa:	4402      	add	r2, r0
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	d101      	bne.n	8006006 <memchr+0x12>
 8006002:	2000      	movs	r0, #0
 8006004:	e003      	b.n	800600e <memchr+0x1a>
 8006006:	7804      	ldrb	r4, [r0, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	428c      	cmp	r4, r1
 800600c:	d1f6      	bne.n	8005ffc <memchr+0x8>
 800600e:	bd10      	pop	{r4, pc}

08006010 <exp>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	f000 f883 	bl	8006120 <__ieee754_exp>
 800601a:	4604      	mov	r4, r0
 800601c:	460d      	mov	r5, r1
 800601e:	4630      	mov	r0, r6
 8006020:	4639      	mov	r1, r7
 8006022:	f000 f82f 	bl	8006084 <finite>
 8006026:	b168      	cbz	r0, 8006044 <exp+0x34>
 8006028:	a311      	add	r3, pc, #68	@ (adr r3, 8006070 <exp+0x60>)
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	4630      	mov	r0, r6
 8006030:	4639      	mov	r1, r7
 8006032:	f7fa fcd9 	bl	80009e8 <__aeabi_dcmpgt>
 8006036:	b140      	cbz	r0, 800604a <exp+0x3a>
 8006038:	f7ff faaa 	bl	8005590 <__errno>
 800603c:	2322      	movs	r3, #34	@ 0x22
 800603e:	2400      	movs	r4, #0
 8006040:	4d0f      	ldr	r5, [pc, #60]	@ (8006080 <exp+0x70>)
 8006042:	6003      	str	r3, [r0, #0]
 8006044:	4620      	mov	r0, r4
 8006046:	4629      	mov	r1, r5
 8006048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800604a:	4630      	mov	r0, r6
 800604c:	a30a      	add	r3, pc, #40	@ (adr r3, 8006078 <exp+0x68>)
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa fcaa 	bl	80009ac <__aeabi_dcmplt>
 8006058:	2800      	cmp	r0, #0
 800605a:	d0f3      	beq.n	8006044 <exp+0x34>
 800605c:	f7ff fa98 	bl	8005590 <__errno>
 8006060:	2322      	movs	r3, #34	@ 0x22
 8006062:	2400      	movs	r4, #0
 8006064:	2500      	movs	r5, #0
 8006066:	6003      	str	r3, [r0, #0]
 8006068:	e7ec      	b.n	8006044 <exp+0x34>
 800606a:	bf00      	nop
 800606c:	f3af 8000 	nop.w
 8006070:	fefa39ef 	.word	0xfefa39ef
 8006074:	40862e42 	.word	0x40862e42
 8006078:	d52d3051 	.word	0xd52d3051
 800607c:	c0874910 	.word	0xc0874910
 8006080:	7ff00000 	.word	0x7ff00000

08006084 <finite>:
 8006084:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006088:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800608c:	0fc0      	lsrs	r0, r0, #31
 800608e:	4770      	bx	lr

08006090 <round>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006096:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800609a:	2a13      	cmp	r2, #19
 800609c:	4604      	mov	r4, r0
 800609e:	460d      	mov	r5, r1
 80060a0:	460b      	mov	r3, r1
 80060a2:	dc1a      	bgt.n	80060da <round+0x4a>
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	da0b      	bge.n	80060c0 <round+0x30>
 80060a8:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80060ac:	3201      	adds	r2, #1
 80060ae:	bf04      	itt	eq
 80060b0:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80060b4:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80060b8:	2200      	movs	r2, #0
 80060ba:	461d      	mov	r5, r3
 80060bc:	4614      	mov	r4, r2
 80060be:	e016      	b.n	80060ee <round+0x5e>
 80060c0:	4815      	ldr	r0, [pc, #84]	@ (8006118 <round+0x88>)
 80060c2:	4110      	asrs	r0, r2
 80060c4:	4001      	ands	r1, r0
 80060c6:	4321      	orrs	r1, r4
 80060c8:	d011      	beq.n	80060ee <round+0x5e>
 80060ca:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80060ce:	fa41 f202 	asr.w	r2, r1, r2
 80060d2:	4413      	add	r3, r2
 80060d4:	ea23 0300 	bic.w	r3, r3, r0
 80060d8:	e7ee      	b.n	80060b8 <round+0x28>
 80060da:	2a33      	cmp	r2, #51	@ 0x33
 80060dc:	dd0a      	ble.n	80060f4 <round+0x64>
 80060de:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80060e2:	d104      	bne.n	80060ee <round+0x5e>
 80060e4:	4602      	mov	r2, r0
 80060e6:	f7fa f839 	bl	800015c <__adddf3>
 80060ea:	4604      	mov	r4, r0
 80060ec:	460d      	mov	r5, r1
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80060fc:	40f8      	lsrs	r0, r7
 80060fe:	4220      	tst	r0, r4
 8006100:	d0f5      	beq.n	80060ee <round+0x5e>
 8006102:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8006106:	2201      	movs	r2, #1
 8006108:	408a      	lsls	r2, r1
 800610a:	1912      	adds	r2, r2, r4
 800610c:	bf28      	it	cs
 800610e:	3301      	addcs	r3, #1
 8006110:	ea22 0200 	bic.w	r2, r2, r0
 8006114:	e7d1      	b.n	80060ba <round+0x2a>
 8006116:	bf00      	nop
 8006118:	000fffff 	.word	0x000fffff
 800611c:	00000000 	.word	0x00000000

08006120 <__ieee754_exp>:
 8006120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006124:	4fae      	ldr	r7, [pc, #696]	@ (80063e0 <__ieee754_exp+0x2c0>)
 8006126:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800612a:	42ba      	cmp	r2, r7
 800612c:	4604      	mov	r4, r0
 800612e:	460d      	mov	r5, r1
 8006130:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8006134:	d932      	bls.n	800619c <__ieee754_exp+0x7c>
 8006136:	4fab      	ldr	r7, [pc, #684]	@ (80063e4 <__ieee754_exp+0x2c4>)
 8006138:	42ba      	cmp	r2, r7
 800613a:	d912      	bls.n	8006162 <__ieee754_exp+0x42>
 800613c:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8006140:	4303      	orrs	r3, r0
 8006142:	4602      	mov	r2, r0
 8006144:	d005      	beq.n	8006152 <__ieee754_exp+0x32>
 8006146:	460b      	mov	r3, r1
 8006148:	f7fa f808 	bl	800015c <__adddf3>
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	e002      	b.n	8006158 <__ieee754_exp+0x38>
 8006152:	2e00      	cmp	r6, #0
 8006154:	f040 8112 	bne.w	800637c <__ieee754_exp+0x25c>
 8006158:	4620      	mov	r0, r4
 800615a:	4629      	mov	r1, r5
 800615c:	b004      	add	sp, #16
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	a389      	add	r3, pc, #548	@ (adr r3, 8006388 <__ieee754_exp+0x268>)
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	f7fa fc3e 	bl	80009e8 <__aeabi_dcmpgt>
 800616c:	4607      	mov	r7, r0
 800616e:	b128      	cbz	r0, 800617c <__ieee754_exp+0x5c>
 8006170:	2000      	movs	r0, #0
 8006172:	b004      	add	sp, #16
 8006174:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	f000 b966 	b.w	8006448 <__math_oflow>
 800617c:	4620      	mov	r0, r4
 800617e:	a384      	add	r3, pc, #528	@ (adr r3, 8006390 <__ieee754_exp+0x270>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	4629      	mov	r1, r5
 8006186:	f7fa fc11 	bl	80009ac <__aeabi_dcmplt>
 800618a:	2800      	cmp	r0, #0
 800618c:	f000 8085 	beq.w	800629a <__ieee754_exp+0x17a>
 8006190:	4638      	mov	r0, r7
 8006192:	b004      	add	sp, #16
 8006194:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	f000 b951 	b.w	800643e <__math_uflow>
 800619c:	4b92      	ldr	r3, [pc, #584]	@ (80063e8 <__ieee754_exp+0x2c8>)
 800619e:	429a      	cmp	r2, r3
 80061a0:	f240 80a7 	bls.w	80062f2 <__ieee754_exp+0x1d2>
 80061a4:	4b91      	ldr	r3, [pc, #580]	@ (80063ec <__ieee754_exp+0x2cc>)
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d877      	bhi.n	800629a <__ieee754_exp+0x17a>
 80061aa:	4b91      	ldr	r3, [pc, #580]	@ (80063f0 <__ieee754_exp+0x2d0>)
 80061ac:	00f4      	lsls	r4, r6, #3
 80061ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f7f9 ffcf 	bl	8000158 <__aeabi_dsub>
 80061ba:	4680      	mov	r8, r0
 80061bc:	4689      	mov	r9, r1
 80061be:	4b8d      	ldr	r3, [pc, #564]	@ (80063f4 <__ieee754_exp+0x2d4>)
 80061c0:	f1c6 0a01 	rsb	sl, r6, #1
 80061c4:	4423      	add	r3, r4
 80061c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061ca:	e9cd 3400 	strd	r3, r4, [sp]
 80061ce:	ebaa 0a06 	sub.w	sl, sl, r6
 80061d2:	4640      	mov	r0, r8
 80061d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061d8:	4649      	mov	r1, r9
 80061da:	f7f9 ffbd 	bl	8000158 <__aeabi_dsub>
 80061de:	4604      	mov	r4, r0
 80061e0:	460d      	mov	r5, r1
 80061e2:	4622      	mov	r2, r4
 80061e4:	462b      	mov	r3, r5
 80061e6:	4620      	mov	r0, r4
 80061e8:	4629      	mov	r1, r5
 80061ea:	f7fa f96d 	bl	80004c8 <__aeabi_dmul>
 80061ee:	a36a      	add	r3, pc, #424	@ (adr r3, 8006398 <__ieee754_exp+0x278>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	4606      	mov	r6, r0
 80061f6:	460f      	mov	r7, r1
 80061f8:	f7fa f966 	bl	80004c8 <__aeabi_dmul>
 80061fc:	a368      	add	r3, pc, #416	@ (adr r3, 80063a0 <__ieee754_exp+0x280>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f7f9 ffa9 	bl	8000158 <__aeabi_dsub>
 8006206:	4632      	mov	r2, r6
 8006208:	463b      	mov	r3, r7
 800620a:	f7fa f95d 	bl	80004c8 <__aeabi_dmul>
 800620e:	a366      	add	r3, pc, #408	@ (adr r3, 80063a8 <__ieee754_exp+0x288>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7f9 ffa2 	bl	800015c <__adddf3>
 8006218:	4632      	mov	r2, r6
 800621a:	463b      	mov	r3, r7
 800621c:	f7fa f954 	bl	80004c8 <__aeabi_dmul>
 8006220:	a363      	add	r3, pc, #396	@ (adr r3, 80063b0 <__ieee754_exp+0x290>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7f9 ff97 	bl	8000158 <__aeabi_dsub>
 800622a:	4632      	mov	r2, r6
 800622c:	463b      	mov	r3, r7
 800622e:	f7fa f94b 	bl	80004c8 <__aeabi_dmul>
 8006232:	a361      	add	r3, pc, #388	@ (adr r3, 80063b8 <__ieee754_exp+0x298>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7f9 ff90 	bl	800015c <__adddf3>
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	f7fa f942 	bl	80004c8 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	f7f9 ff84 	bl	8000158 <__aeabi_dsub>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	4620      	mov	r0, r4
 800625a:	4629      	mov	r1, r5
 800625c:	f7fa f934 	bl	80004c8 <__aeabi_dmul>
 8006260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006264:	f1ba 0f00 	cmp.w	sl, #0
 8006268:	d15a      	bne.n	8006320 <__ieee754_exp+0x200>
 800626a:	2200      	movs	r2, #0
 800626c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7f9 ff70 	bl	8000158 <__aeabi_dsub>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006280:	f7fa fa4c 	bl	800071c <__aeabi_ddiv>
 8006284:	4622      	mov	r2, r4
 8006286:	462b      	mov	r3, r5
 8006288:	f7f9 ff66 	bl	8000158 <__aeabi_dsub>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	2000      	movs	r0, #0
 8006292:	4959      	ldr	r1, [pc, #356]	@ (80063f8 <__ieee754_exp+0x2d8>)
 8006294:	f7f9 ff60 	bl	8000158 <__aeabi_dsub>
 8006298:	e758      	b.n	800614c <__ieee754_exp+0x2c>
 800629a:	4b58      	ldr	r3, [pc, #352]	@ (80063fc <__ieee754_exp+0x2dc>)
 800629c:	4620      	mov	r0, r4
 800629e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80062a2:	4629      	mov	r1, r5
 80062a4:	a346      	add	r3, pc, #280	@ (adr r3, 80063c0 <__ieee754_exp+0x2a0>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f7fa f90d 	bl	80004c8 <__aeabi_dmul>
 80062ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062b2:	f7f9 ff53 	bl	800015c <__adddf3>
 80062b6:	f7fa fba1 	bl	80009fc <__aeabi_d2iz>
 80062ba:	4682      	mov	sl, r0
 80062bc:	f7fa f89a 	bl	80003f4 <__aeabi_i2d>
 80062c0:	a341      	add	r3, pc, #260	@ (adr r3, 80063c8 <__ieee754_exp+0x2a8>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	4606      	mov	r6, r0
 80062c8:	460f      	mov	r7, r1
 80062ca:	f7fa f8fd 	bl	80004c8 <__aeabi_dmul>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4620      	mov	r0, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7f9 ff3f 	bl	8000158 <__aeabi_dsub>
 80062da:	a33d      	add	r3, pc, #244	@ (adr r3, 80063d0 <__ieee754_exp+0x2b0>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	4680      	mov	r8, r0
 80062e2:	4689      	mov	r9, r1
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7fa f8ee 	bl	80004c8 <__aeabi_dmul>
 80062ec:	e9cd 0100 	strd	r0, r1, [sp]
 80062f0:	e76f      	b.n	80061d2 <__ieee754_exp+0xb2>
 80062f2:	4b43      	ldr	r3, [pc, #268]	@ (8006400 <__ieee754_exp+0x2e0>)
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d80e      	bhi.n	8006316 <__ieee754_exp+0x1f6>
 80062f8:	a337      	add	r3, pc, #220	@ (adr r3, 80063d8 <__ieee754_exp+0x2b8>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7f9 ff2d 	bl	800015c <__adddf3>
 8006302:	2200      	movs	r2, #0
 8006304:	4b3c      	ldr	r3, [pc, #240]	@ (80063f8 <__ieee754_exp+0x2d8>)
 8006306:	f7fa fb6f 	bl	80009e8 <__aeabi_dcmpgt>
 800630a:	b138      	cbz	r0, 800631c <__ieee754_exp+0x1fc>
 800630c:	2200      	movs	r2, #0
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	4b39      	ldr	r3, [pc, #228]	@ (80063f8 <__ieee754_exp+0x2d8>)
 8006314:	e718      	b.n	8006148 <__ieee754_exp+0x28>
 8006316:	f04f 0a00 	mov.w	sl, #0
 800631a:	e762      	b.n	80061e2 <__ieee754_exp+0xc2>
 800631c:	4682      	mov	sl, r0
 800631e:	e760      	b.n	80061e2 <__ieee754_exp+0xc2>
 8006320:	4632      	mov	r2, r6
 8006322:	463b      	mov	r3, r7
 8006324:	2000      	movs	r0, #0
 8006326:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800632a:	f7f9 ff15 	bl	8000158 <__aeabi_dsub>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006336:	f7fa f9f1 	bl	800071c <__aeabi_ddiv>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006342:	f7f9 ff09 	bl	8000158 <__aeabi_dsub>
 8006346:	4642      	mov	r2, r8
 8006348:	464b      	mov	r3, r9
 800634a:	f7f9 ff05 	bl	8000158 <__aeabi_dsub>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	2000      	movs	r0, #0
 8006354:	4928      	ldr	r1, [pc, #160]	@ (80063f8 <__ieee754_exp+0x2d8>)
 8006356:	f7f9 feff 	bl	8000158 <__aeabi_dsub>
 800635a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800635e:	4592      	cmp	sl, r2
 8006360:	db02      	blt.n	8006368 <__ieee754_exp+0x248>
 8006362:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006366:	e6f1      	b.n	800614c <__ieee754_exp+0x2c>
 8006368:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800636c:	2200      	movs	r2, #0
 800636e:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8006372:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006376:	f7fa f8a7 	bl	80004c8 <__aeabi_dmul>
 800637a:	e6e7      	b.n	800614c <__ieee754_exp+0x2c>
 800637c:	2400      	movs	r4, #0
 800637e:	2500      	movs	r5, #0
 8006380:	e6ea      	b.n	8006158 <__ieee754_exp+0x38>
 8006382:	bf00      	nop
 8006384:	f3af 8000 	nop.w
 8006388:	fefa39ef 	.word	0xfefa39ef
 800638c:	40862e42 	.word	0x40862e42
 8006390:	d52d3051 	.word	0xd52d3051
 8006394:	c0874910 	.word	0xc0874910
 8006398:	72bea4d0 	.word	0x72bea4d0
 800639c:	3e663769 	.word	0x3e663769
 80063a0:	c5d26bf1 	.word	0xc5d26bf1
 80063a4:	3ebbbd41 	.word	0x3ebbbd41
 80063a8:	af25de2c 	.word	0xaf25de2c
 80063ac:	3f11566a 	.word	0x3f11566a
 80063b0:	16bebd93 	.word	0x16bebd93
 80063b4:	3f66c16c 	.word	0x3f66c16c
 80063b8:	5555553e 	.word	0x5555553e
 80063bc:	3fc55555 	.word	0x3fc55555
 80063c0:	652b82fe 	.word	0x652b82fe
 80063c4:	3ff71547 	.word	0x3ff71547
 80063c8:	fee00000 	.word	0xfee00000
 80063cc:	3fe62e42 	.word	0x3fe62e42
 80063d0:	35793c76 	.word	0x35793c76
 80063d4:	3dea39ef 	.word	0x3dea39ef
 80063d8:	8800759c 	.word	0x8800759c
 80063dc:	7e37e43c 	.word	0x7e37e43c
 80063e0:	40862e41 	.word	0x40862e41
 80063e4:	7fefffff 	.word	0x7fefffff
 80063e8:	3fd62e42 	.word	0x3fd62e42
 80063ec:	3ff0a2b1 	.word	0x3ff0a2b1
 80063f0:	08007428 	.word	0x08007428
 80063f4:	08007418 	.word	0x08007418
 80063f8:	3ff00000 	.word	0x3ff00000
 80063fc:	08007438 	.word	0x08007438
 8006400:	3defffff 	.word	0x3defffff

08006404 <with_errno>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	4604      	mov	r4, r0
 8006408:	460d      	mov	r5, r1
 800640a:	4616      	mov	r6, r2
 800640c:	f7ff f8c0 	bl	8005590 <__errno>
 8006410:	4629      	mov	r1, r5
 8006412:	6006      	str	r6, [r0, #0]
 8006414:	4620      	mov	r0, r4
 8006416:	bd70      	pop	{r4, r5, r6, pc}

08006418 <xflow>:
 8006418:	b513      	push	{r0, r1, r4, lr}
 800641a:	4604      	mov	r4, r0
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	b10c      	cbz	r4, 8006426 <xflow+0xe>
 8006422:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006426:	e9cd 2300 	strd	r2, r3, [sp]
 800642a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800642e:	f7fa f84b 	bl	80004c8 <__aeabi_dmul>
 8006432:	2222      	movs	r2, #34	@ 0x22
 8006434:	b002      	add	sp, #8
 8006436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643a:	f7ff bfe3 	b.w	8006404 <with_errno>

0800643e <__math_uflow>:
 800643e:	2200      	movs	r2, #0
 8006440:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006444:	f7ff bfe8 	b.w	8006418 <xflow>

08006448 <__math_oflow>:
 8006448:	2200      	movs	r2, #0
 800644a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800644e:	f7ff bfe3 	b.w	8006418 <xflow>
	...

08006454 <_init>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr

08006460 <_fini>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr
